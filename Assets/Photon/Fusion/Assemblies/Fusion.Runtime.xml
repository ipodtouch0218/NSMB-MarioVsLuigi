<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fusion.Runtime</name>
    </assembly>
    <members>
        <member name="T:Fusion.PageSizes">
            <summary>
            Page Bit Shift Lookup Table
            </summary>
        </member>
        <member name="T:Fusion.AccuracyAttribute">
            <summary>
            Additional companion attribute to NetworkedAttribute, which indicates how floats should be compressed.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.Double)">
            <summary>
            Constructor new accuracy.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.Single)">
            <summary>
            Constructor new accuracy.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyAttribute.#ctor(System.String)">
            <summary>
            Constructor that takes a named <see cref="T:Fusion.AccuracyDefaults"/> constant.
            Accuracy for this property will be acquired from the <see cref="F:Fusion.NetworkProjectConfig.AccuracyDefaults"/> settings.
            </summary>
            <param name="defaultAccuracyTag"></param>
        </member>
        <member name="T:Fusion.AccuracyRangeAttribute">
            <summary>
            Allows for a specific slider range on Accuracy types to be displayed. Without this Accuracy values use a default slider range.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyRangeAttribute.#ctor(Fusion.AccuracyRangePreset)">
            <summary>
            Allows for a specific slider range on Accuracy types to be displayed. Without this Accuracy values use a default slider range.
            </summary>
            <param name="preset"></param>
        </member>
        <member name="T:Fusion.BehaviourActionAttribute">
            <summary>
            Attribute for use on Fusion.Behaviour classes. 
            Automatically runs this method when the inspector refreshes. GUILayout calls be in the method and will render into the inspector.
            Allows for editor code to be added to a component, without requiring a custom Editor script.
            </summary>
        </member>
        <member name="T:Fusion.BehaviourActionAttribute.ActionFlags">
            <summary>
            Conditions flags for when this action should run.
            </summary>
        </member>
        <member name="F:Fusion.BehaviourActionAttribute.ActionFlags.ShowAtRuntime">
            <summary>
            Run this action when playing.
            </summary>
        </member>
        <member name="F:Fusion.BehaviourActionAttribute.ActionFlags.ShowAtNotRuntime">
            <summary>
            Run this action when not playing.
            </summary>
        </member>
        <member name="F:Fusion.BehaviourActionAttribute.ActionFlags.AlwaysShow">
            <summary>
            Always run this action, regardless of play mode.
            </summary>
        </member>
        <member name="F:Fusion.BehaviourActionAttribute.ActionFlags.DirtyAfterButton">
            <summary>
            Tells the editor to dirty the class instance after executing a button action.
            </summary>
        </member>
        <member name="F:Fusion.BehaviourActionAttribute.ConditionFlags">
            <summary>
            Specific flags for when this element should be displayed.
            </summary>
        </member>
        <member name="M:Fusion.BehaviourActionAttribute.#ctor(System.String,System.String,Fusion.BehaviourActionAttribute.ActionFlags)">
            <summary>
            Define a BehaviourAction.
            </summary>
            <param name="executeMethod">The name of the method to execute. If excluded, this will be the method this attribute is on.</param>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic.</param>
            <param name="flags">Specific conditions for when the action should occur.</param>
        </member>
        <member name="M:Fusion.BehaviourActionAttribute.#ctor(System.String,Fusion.BehaviourActionAttribute.ActionFlags)">
            <summary>
            Define a BehaviourAction, with the action being the method this attribute is attached to.
            </summary>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic.</param>
            <param name="flags">Specific conditions for when the action should occur.</param>
        </member>
        <member name="T:Fusion.BehaviourButtonActionAttribute">
            <summary>
            Attribute for use on Fusion.Behaviour classes. 
            Automatically creates a button in the inspector of <see cref="T:Fusion.Behaviour"/> derived classes. 
            Can be used on Fields or Method member types. 
            For fields, the name of the method the button will execute must be supplied.
            When used on methods, that method will be called.
            </summary>
        </member>
        <member name="M:Fusion.BehaviourButtonActionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Define a ButtonBehaviourAction.
            </summary>
            <param name="buttonName">The name that will be displayed on the button.</param>
            <param name="executeMethod">The name of the method to execute. If excluded, this will be the method this attribute is on.</param>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic.</param>
        </member>
        <member name="M:Fusion.BehaviourButtonActionAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Define a ButtonBehaviourAction.
            </summary>
            <param name="buttonName">The name that will be displayed on the button.</param>
            <param name="showWhileRunning">Indicates if this button should appear while playing.</param>
            <param name="showWhileNotRunning">Indicates if this button should appear while not playing.</param>
            <param name="executeMethod">The name of the method to execute. If excluded, this will be the method this attribute is on.</param>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic.</param>
        </member>
        <member name="M:Fusion.BehaviourButtonActionAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Define a ButtonBehaviourAction.
            </summary>
            <param name="buttonName">The name that will be displayed on the button.</param>
            <param name="showWhileRunning">Indicates if this button should appear while playing.</param>
            <param name="showWhileNotRunning">Indicates if this button should appear while not playing.</param>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic. This member can be a property, field or method. 
            The return value of any of these is converted into a double. True = 1, False = 0. Null = 0.</param>
        </member>
        <member name="T:Fusion.BehaviourWarnAttribute">
            <summary>
            Attribute for use on Fusion.Behaviour classes. 
            Automatically draws a warning box in the inspector if the conditions are met.
            </summary>
        </member>
        <member name="M:Fusion.BehaviourWarnAttribute.#ctor(System.String,System.String)">
            <summary>
            Define a ButtonBehaviourAction.
            </summary>
            <param name="warnText">The text that will be shown in the warning box.</param>
            <param name="conditionMember">The name of the member (in the same class) to evaluate, to determine if the action should be performed. 
            Typically null, as the action method can have its own logic. This member can be a property, field or method. 
            The return value of any of these is converted into a double. True = 1, False = 0. Null = 0.</param>
        </member>
        <member name="T:Fusion.CastEnumAttribute">
            <summary>
            Casts an enum or int value in the inspector to specific enum type for rendering of its popup list. 
            Supplying a method name rather than a type allows a property with the type Type to be used to dynamically get the enum type.
            </summary>
        </member>
        <member name="T:Fusion.DrawIfAttribute">
            <summary>
            Fusion editor attribute for selectively drawing/hiding fields. Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para>
            </summary>
        </member>
        <member name="F:Fusion.DrawIfAttribute.Hide">
            <summary>
            Instructs the attribute completely hide the field if not draw, rather than the default of just disabling it.
            </summary>
        </member>
        <member name="M:Fusion.DrawIfAttribute.#ctor(System.String,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMemberName">Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="compareToValue">The value to compare the member value against.</param>
            <param name="hide">How the field should be hidden (disabled or removed)</param>
            <param name="compare">How the condition member value and compareToValye will be evaluated.</param>
        </member>
        <member name="M:Fusion.DrawIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMemberName">Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="compareToValue">The value to compare the member value against.</param>
            <param name="compare">How the condition member value and compareToValye will be evaluated.</param>
        </member>
        <member name="M:Fusion.DrawIfAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMemberName">Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="hide">How the field should be hidden (disabled or removed)</param>
            <param name="compare">How the condition member value and compareToValye will be evaluated.</param>
        </member>
        <member name="T:Fusion.EditorDisabledAttribute">
            <summary>
            Fusion editor attribute for disabling fields.
            </summary>
        </member>
        <member name="M:Fusion.EditorDisabledAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="hideInRelease">If using the release version of the fusion.runtime.dll, field will be hidden, rather than just disabled.</param>
        </member>
        <member name="T:Fusion.EditorDisabledGroupAttribute">
            <summary>
            Fusion editor attribute for disabling groups of fields.
            </summary>
        </member>
        <member name="T:Fusion.EnumMaskAttribute">
            <summary>
            Attribute that indicates an enum should render as multi-select mask drop list in the inspector
            </summary>
        </member>
        <member name="T:Fusion.MultiPropertyDrawersFixAttribute">
            <summary>
            Use in Unity 2020.3, when <see cref="T:Fusion.DecoratingPropertyAttribute"/>-based attributes
            preceeed a PropertyAttribute that creates a per-attribute drawer.
            </summary>
        </member>
        <member name="T:Fusion.OnChangedTargets">
            <summary>
            Defines the target authority mask for OnChanged callbacks
            </summary>
        </member>
        <member name="F:Fusion.OnChangedTargets.StateAuthority">
            <summary>
            Receive callback if you have state authority over the object
            </summary>
        </member>
        <member name="F:Fusion.OnChangedTargets.InputAuthority">
            <summary>
            Receive callback if you have input authority over the object
            </summary>
        </member>
        <member name="F:Fusion.OnChangedTargets.Proxies">
            <summary>
            Receive callback if you have neither input or state authority over the object
            </summary>
        </member>
        <member name="F:Fusion.OnChangedTargets.All">
            <summary>
            Shorthand for StateAuthority|InputAuthority|Proxies
            </summary>
        </member>
        <member name="T:Fusion.NetworkedAttribute">
            <summary>
            <para>
            Flags a property of <see cref="T:Fusion.NetworkBehaviour"/> for network state synchronization. 
            The property should have empty get and set defines, which will automatically be replaced with networking code via IL Weaving.
            OnChanged can be assigned with the name of a method in the same NetworkBehaviour. 
            The named method will get called whenever this property value has been changed by the State Authority.
            <code>
            | [Networked(OnChanged = nameof(MyCallbackMethod)]<br></br>
            | public int MyProperty { get; set; }
            |
            | protected static void MyCallbackMethod(Changed&lt;ChangedCallbackParent&gt; changed) {
            |   changed.LoadNew();
            |   var newval = changed.Behaviour.MyProperty;
            |   changed.LoadOld();
            |   var oldval = changed.Behaviour.MyProperty;
            |   Debug.Log($"Changed from {oldval} to {newval}");
            | }
            </code>
            </para>
            <para>
            Inside of INetworkStruct, do not use AutoProperties (get; set;), as these will introduce managed types into the struct, which are not allowed. Instead use '=> default'.
            <code>
            | [Networked]<br></br>
            | public string StringProp { get => default; set { } }
            </code>
            </para>
            </summary>
        </member>
        <member name="P:Fusion.NetworkedAttribute.OnChanged">
            <summary>
            Signature for the callback is:
            <code>static void OnChanged(Changed&lt;MyClass&gt; changed){} </code>
            </summary>
        </member>
        <member name="P:Fusion.NetworkedAttribute.OnChangedTargets">
            <summary>
            Which targets should receive the OnChanged callback.
            </summary>
        </member>
        <member name="P:Fusion.NetworkedAttribute.Default">
            <summary>
            Name of the field that holds the default value for this networked property.
            </summary>
        </member>
        <member name="P:Fusion.NetworkedAttribute.Group">
            <summary>
            Interest group for this property
            </summary>
        </member>
        <member name="M:Fusion.NetworkedAttribute.#ctor">
            <summary>
            Default constructor for NetworkedAttribute
            </summary>
        </member>
        <member name="M:Fusion.NetworkedAttribute.#ctor(System.String)">
            <summary>
            Group constructor
            </summary>
            <param name="group">The interest group this property belongs to</param>
        </member>
        <member name="P:Fusion.NetworkSerializeMethodAttribute.MaxSize">
            <summary>
            If set, this changes expected Wrap method signature to int Name(NetworkRunner, T, byte*) and Unwrap to int Name(NetworkRunner, byte*, ref T).
            In both cases, the result is the number of bytes written/read and can not be greater than what's declared here.
            </summary>
        </member>
        <member name="T:Fusion.NetworkStructWeavedAttribute">
            <summary>
            Describes the total number of WORDs a <see cref="!:Fusion.INetworkedStruct"/> uses.
            </summary>
        </member>
        <member name="T:Fusion.NormalizedRectAttribute">
            <summary>
            Enables a special inspector drawer for Unity Rect type, specially designed for editing RectTransforms using normalized values.
            </summary>
        </member>
        <member name="M:Fusion.NormalizedRectAttribute.#ctor(System.Boolean,System.Single)">
            <summary>
            Constructor for <see cref="T:Fusion.NormalizedRectAttribute"/>. InvertY inverts Y handling, for RectTransforms which treat lowerRight as origin, rather than upper left.
            </summary>
            <param name="invertY"></param>
            <param name="aspectRatio">Expressed as Width/Height, this defines the ratio of the box shown in the inspector. Value of 0 indicates game window resolution will be used.</param>
        </member>
        <member name="T:Fusion.Pow2SliderAttribute">
            <summary>
            Attribute used to mark a field that needs to change based on an exponent
            via a UI slider
            </summary>
        </member>
        <member name="F:Fusion.Pow2SliderAttribute.AllowZero">
            <summary>
            Determines if a slider power of 0 results in an actual value of one, or zero.
            </summary>
        </member>
        <member name="P:Fusion.ScriptHelpAttribute.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.ScriptHelpAttribute.BackColor">
            <summary>
            Color of the inspector header for this component type. None indicates no header graphic should be used.
            </summary>
        </member>
        <member name="P:Fusion.ScriptHelpAttribute.Icon">
            <summary>
            Icon used for the inspector header for this component type. None indicates no header graphic should be used.
            </summary>
        </member>
        <member name="T:Fusion.Units">
            <summary>
            Unit Type for a certain field.
            This helps to identify the unit that a certain value represents, like Seconds or Percentage
            </summary>
        </member>
        <member name="F:Fusion.Units.None">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.Ticks">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.Seconds">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.MilliSecs">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.Kilobytes">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.Megabytes">
            <summary> </summary>
        </member>
        <member name="F:Fusion.Units.Normalized">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Multiplier">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Percentage">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.NormalizedPercentage">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Degrees">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.PerSecond">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.DegreesPerSecond">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Radians">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.RadiansPerSecond">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.TicksPerSecond">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Units">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Bytes">
            <summary></summary>
        </member>
        <member name="F:Fusion.Units.Count">
            <summary></summary>
        </member>
        <member name="T:Fusion.UnitAttribute">
            <summary>
            Unit Attribute class.
            Used to mark a field with the respective <see cref="T:Fusion.Units"/>
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.DecimalPlaces">
            <summary>
            The rounding used by the value slider.
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.ClampMin">
            <summary>
            If entered values below this Min should be clamped.
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.ClampMax">
            <summary>
            If entered values above this Max should be clamped.
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.UseInverse">
            <summary>
            Displays 1/value as a second field.
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.InverseName">
            <summary>
            The label used for the inverse field (if used).
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.InverseUnit">
            <summary>
            The Units used for the inverse, as they will be different than the primary field.
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.InverseDecimalPlaces">
            <summary>
            The rounding used by the inverse slider (if <see cref="F:Fusion.UnitAttribute.UseInverse"/> is enabled).
            </summary>
        </member>
        <member name="F:Fusion.UnitAttribute.UseSlider">
            <summary>
            Set to false to override the effect of setting the min or max range values, and prevent the slider from being used.
            Useful for cases where a min/max is desired for clamping, but a slider range is not appropriate.
            </summary>
        </member>
        <member name="M:Fusion.UnitAttribute.#ctor(Fusion.Units)">
            <summary>
            Specify the field <see cref="T:Fusion.Units"/> type, without Min and Max values
            </summary>
            <param name="unit">Unit type</param>
        </member>
        <member name="M:Fusion.UnitAttribute.#ctor(Fusion.Units,System.Double,System.Double)">
            <summary>
            Specify the field <see cref="T:Fusion.Units"/> type, and its Min and Max values.
            </summary>
            <param name="unit">Unit type</param>
            <param name="min">Min value for this field</param>
            <param name="max">Max value for this field</param>
            <param name="clamp">If values outside of the min/max range will get clamped, or be allowed.</param>
        </member>
        <member name="T:Fusion.DoIfCompareOperator">
            <summary>
            Comparison method for evaluating condition member value against compareToValues.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.Equal">
            <summary>
            True if condition member value equals compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.NotEqual">
            <summary>
            True if condition member value is not equal to compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.Less">
            <summary>
            True if condition member value is less than compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.LessOrEqual">
            <summary>
            True if condition member value is less than or equal to compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.GreaterOrEqual">
            <summary>
            True if condition member value is greater than or equal to compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.Greater">
            <summary>
            True if condition member value is greater than compareToValue.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.NotZero">
            <summary>
            Returns true if the condition member evaluates to anything other than zero.
            In the case of object references, this means true for any non-null value.
            </summary>
        </member>
        <member name="F:Fusion.DoIfCompareOperator.IsZero">
            <summary>
            Returns true if the condition member evaluates to zero.
            In the case of object references, this means true for any null value.
            </summary>
        </member>
        <member name="T:Fusion.DoIfAttribute">
            <summary>
            Fusion editor attribute for selective editor rendering. Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para>
            </summary>
        </member>
        <member name="M:Fusion.DoIfAttribute.#ctor(System.String,System.Double)">
            <summary>
            Base Constructor.
            </summary>
            <param name="conditionMemberName"></param>
            <param name="compareToValue"></param>
        </member>
        <member name="M:Fusion.DoIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Base Constructor.
            </summary>
            <param name="conditionMemberName"></param>
            <param name="compareToValue"></param>
        </member>
        <member name="M:Fusion.DoIfAttribute.#ctor(System.String)">
            <summary>
            Base Constructor.
            </summary>
            <param name="conditionMemberName"></param>
        </member>
        <member name="T:Fusion.WarnIfAttribute">
            <summary>
            Fusion editor attribute for adding notices to fields if the condition member evaluates as true. 
            Condition member can be a property, field or method (with a return value).
            <para>Value of condition method is converted to a long. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para>
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.Message">
            <summary>
            The default warning text, when a warning is shown.
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.MsgType">
            <summary>
            The default message type for this warning.
            0 = None, 1 = Info, 2 = Warning, 3 = Error
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.MsgProvider">
            <summary>
            The name of any member which can be evaluated to a string value, which will be used as the source for the warning message text.
            If null (default), then <see cref="F:Fusion.WarnIfAttribute.Message"/> will be used instead.
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.MsgTypeProvider">
            <summary>
            The name of any member which can be evaluated to an int value, which will be used as the source for the MsgType value.
            If null (default), then <see cref="F:Fusion.WarnIfAttribute.MsgType"/> will be used instead.
            0 = None, 1 = Info, 2 = Warning, 3 = Error
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.ActionMethod">
            <summary>
            The name of a method with no arguments and returns void, which will execute when the warning icon is clicked.
            </summary>
        </member>
        <member name="F:Fusion.WarnIfAttribute.UseMsgIconOnly">
            <summary>
            Limits the warning box to only the icon next to the value field, rather than using the inline message box which is added below the field.
            </summary>
        </member>
        <member name="M:Fusion.WarnIfAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Fusion.WarnIfAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The text of the info box.</param>
        </member>
        <member name="M:Fusion.WarnIfAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMember">Name of a property, field or method (with a return value) member.
            <para>Value of condition method is converted to a double. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="message">The text of the info/warn/error box.</param>
        </member>
        <member name="M:Fusion.WarnIfAttribute.#ctor(System.String,System.Double,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMember">Name of a property, field or method (with a return value) member.
            <para>Value of condition method is converted to a double. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="compareToValue">The value the conditionMember value is compred to.</param>
            <param name="message">The text of the info/warn/error box.</param>
        </member>
        <member name="M:Fusion.WarnIfAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="conditionMember">Name of a property, field or method (with a return value) member.
            <para>Value of condition method is converted to a double. Null = 0, False = 0, True = 1, Unity Object = InstanceId</para></param>
            <param name="compareToValue">The value the conditionMember value is compred to.</param>
            <param name="message">The text of the info/warn/error box.</param>
        </member>
        <member name="T:Fusion.CloudCommunicator">
            <summary>
            Wrapper around the Fusion LBC Implementation <see cref="T:Fusion.Photon.Realtime.FusionRelayClient"/>
            
            It will control and manage the communication between Fusion and the Photon Cloud
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.Client">
            <summary>
            Fusion LBC Client Reference
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.CommunicatorID">
            <summary>
            ID of this Communicator. This reflects the Actor Number of the Peer inside the Room
            </summary>
        </member>
        <member name="P:Fusion.CloudCommunicator.WasExtracted">
            <summary>
            Flag to signal if this Communicator was extracted and will be reused
            </summary>
        </member>
        <member name="T:Fusion.CloudServices">
            <summary>
            Responsible to deal with LoadBalancingClient Events
            </summary>
            <summary>
            Responsible for dealing and managing the API used to communicate with the Photon Cloud.
            This also includes:
            - Send/Reply to Protocol Messages
            - Query for Reflexive Information
            - Perform NAT Punchthrough
            - Manage the Realtime client
            - Respond to/deal with Photon Cloud events
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsCloudReady">
            <summary>
            Signal if the local peer is connected to the Photon Cloud and can perform extra actions, like creating/joining a Room.
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.UserId">
            <summary>
            Photon Client UserID
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsInRoom">
            <summary>
            Signal if the local peer is already inside a Room
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsInLobby">
            <summary>
            Signal if the local peer is already inside a Lobby
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.SessionSlots">
            <summary>
            Max Number of players a Session can handle
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsMasterClient">
            <summary>
            Signal if the local peer is also the Master Client of the Current Room
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.AuthenticationValues">
            <summary>
            Get the internal <see cref="P:Fusion.CloudServices.AuthenticationValues"/> used by the Client to perform the authentication
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.Communicator">
            <summary>
            Reference to the current active communicator
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.IsNATPunchthroughEnabled">
            <summary>
            Signal if the local peer will try or accept connections using NAT Punch
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.CustomSTUNServer">
            <summary>
            Custom STUN Server
            </summary>
        </member>
        <member name="P:Fusion.CloudServices.NATType">
            <summary>
            Exposes the current NAT Type from the local Peer
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.#ctor(Fusion.NetworkRunner,Fusion.CloudCommunicator)">
            <summary>
            Builds a new CloudService reference
            </summary>
            <param name="runner">Reference to the current active Runner</param>
            <param name="communicator">Opitional external Communicator</param>
        </member>
        <member name="M:Fusion.CloudServices.ExtractCommunicator">
            <summary>
            Extract the internal Communicator for later re-use
            </summary>
            <returns>Current <see cref="T:Fusion.CloudCommunicator"/> used by this instance with all resetted settings</returns>
        </member>
        <member name="M:Fusion.CloudServices.Update">
            <summary>
            Update and perform all pending actions related to the Photon Cloud communication
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.ConnectToCloud(Fusion.Photon.Realtime.AuthenticationValues,Fusion.Photon.Realtime.AppSettings)">
            <summary>
            Connect the local peer to Photon Cloud using an async process.
            </summary>
            <param name="authentication">Custom Authentication Values used to Auth the local peer</param>
            <param name="customAppSettings">Custom Photon App Settings</param>
            <returns>Async Task of the connect to Photon Cloud process. Can be used to wait for the process to be finished</returns>
        </member>
        <member name="M:Fusion.CloudServices.JoinSessionLobby(Fusion.SessionLobby,System.String,Fusion.Photon.Realtime.LobbyType)">
            <summary>
            Join the Peer to a specific Lobby, either a prebuild or a custom one
            </summary>
            <param name="sessionLobby">Lobby Type to Join</param>
            <param name="lobbyID">Custom Lobby ID</param>
            <param name="lobbyType">Custom Lobby Type</param>
            <returns>True if the operation could be completed. <see cref="M:Fusion.Photon.Realtime.LoadBalancingClient.OpJoinLobby(Fusion.Photon.Realtime.TypedLobby)"/></returns>
        </member>
        <member name="M:Fusion.CloudServices.EnterRoom(Fusion.StartGameArgs)">
             <summary>
             Make the local Peer Create/Join a Room based on Start Game Arguments
             
                           --------------------->Yes--->CreateOrJoin
             SharedMode--->| Valid Room Name |
                           --------------------->No---->[RandomRoomName]-->JoinRandomOrCreate
            
                           --------------------->Yes--->CreateOrJoin
             ClientMode--->| Valid Room Name |
                           --------------------->No---->[RandomRoomName]-->JoinRandom
             
             ServerMode--  --------------------->Yes----------------------------|
                        |->| Valid Room Name |                                  v
             HostMode----  --------------------->No---->[RandomRoomName]-->CreateOrJoin
             
             </summary>
             <param name="args">Start Game Args ref</param>
             <returns>Task of the Join Room process</returns>
        </member>
        <member name="M:Fusion.CloudServices.DisconnectFromCloud">
            <summary>
            Disconnect the Local Peer from the Photon Cloud.
            </summary>
            <returns>Async Task of the disconnect from Photon Cloud process. Can be used to wait for the process to be finished</returns>
        </member>
        <member name="M:Fusion.CloudServices.GetActorUserID(System.Int32)">
            <summary>
            Get the UserID of another Player Actor in the Room
            </summary>
            <param name="actorID">ActorID of a Player inside the Room</param>
            <returns>Player UserID</returns>
        </member>
        <member name="M:Fusion.CloudServices.TryGetActorIdByUniqueId(System.Int64,System.Int32@)">
            <summary>
            Try to get the ActorId associated with a specific Client Unique Id
            </summary>
            <param name="uniqueId">Client Unique Id to check</param>
            <param name="actorId">ActorId associated with that Client Unique Id</param>
            <returns>True if the ActorId can be found</returns>
        </member>
        <member name="M:Fusion.CloudServices.OnInternalConnectionAttempt(System.Int32,System.Int32,System.Boolean@,Fusion.Sockets.NetAddress@)">
            <summary>
            Callback fire on every connection attempt with a remote Server.
            
            It is used while trying to hole-punch the remote server and enables the manager to swap the target endpoint in between attempts.
            This is necessary to maintain a flow of attempts even if we exchange the local/public/relay endpoints
            </summary>
            <param name="attempt">Current attempt number</param>
            <param name="totalConnectionAttempts">Max number of attempts</param>
            <param name="shouldChange">Flag if target EndPoint should change</param>
            <param name="newAddress">New target EndPoint</param>
        </member>
        <member name="M:Fusion.CloudServices.Connect(Fusion.NATPunchStage,Fusion.Sockets.NetAddress)">
            <summary>
            Start the connection process with a Remote Server
            </summary>
            <param name="punchStage">Starting NAT Punch state, see <see cref="T:Fusion.NATPunchStage"/> for more info</param>
            <param name="endPoint">Remote Server EndPoint to connect to</param>
        </member>
        <member name="M:Fusion.CloudServices.Dispose">
            <summary>
            Disposes the current <see cref="T:Fusion.CloudServices"/>
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.OnRoomChanged">
            <summary>
            Callback invoked when any Room Property has changed
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.OnRoomListChanged(System.Collections.Generic.List{Fusion.Photon.Realtime.RoomInfo})">
            <summary>
            Callback invoked when the Room list is updated with data from the Cloud
            </summary>
            <param name="roomList">New List of <see cref="T:Fusion.Photon.Realtime.RoomInfo"/></param>
        </member>
        <member name="M:Fusion.CloudServices.SendJoinMessage">
            <summary>
            Send a <see cref="T:Fusion.Protocol.Join"/> Protocol Message to Fusion Plugin
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.SendNetworkSyncMessage(Fusion.NetworkProjectConfig)">
            <summary>
            Send a <see cref="T:Fusion.Protocol.NetworkConfigSync"/> Protocol Message to the Fusion Plugin
            </summary>
            <param name="projectConfig">Reference to the Project Config to be sent</param>
        </member>
        <member name="M:Fusion.CloudServices.SendReflexiveInfo(Fusion.Sockets.Stun.StunResult)">
            <summary>
            Send a <see cref="T:Fusion.Protocol.ReflexiveInfo"/> Protocol Message to the Fusion Plugin
            </summary>
            <param name="stunResult">Reference to StunResult used to build the Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.SendStateSnapshot(System.Int32,System.Int32,System.UInt32,System.Byte[])">
            <summary>
            Build and send the latest Server Snapshot to the Fusion Plugin
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.HandleJoinMessage(System.Int32,Fusion.Protocol.Join)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.Join"/> Confirmation Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="join">Join Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleStartMessage(System.Int32,Fusion.Protocol.Start)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.Start"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="start">Start Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleDisconnectMessage(System.Int32,Fusion.Protocol.Disconnect)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.Disconnect"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="disconnect">Disconnect Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleNetworkConfigMessage(System.Int32,Fusion.Protocol.NetworkConfigSync)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.NetworkConfigSync"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="configSync">NetworkConfigSync Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.HandleReflexiveInfoMessage(System.Int32,Fusion.Protocol.ReflexiveInfo)">
            <summary>
            Handles a <see cref="T:Fusion.Protocol.ReflexiveInfo"/> Protocol Message sent by the Fusion Plugin
            </summary>
            <param name="sender">Sender Actor Number</param>
            <param name="reflexiveInfo">ReflexiveInfo Protocol Message</param>
        </member>
        <member name="M:Fusion.CloudServices.Service_CheckScheduledRequests">
            <summary>
            Check for scheduled requests
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.ConfirmJoin">
            <summary>
            Confirms or waits for confirmation from the Plugin of the Join Message
            </summary>
            <returns>True if the Join Confirmation was received, false otherwise</returns>
        </member>
        <member name="M:Fusion.CloudServices.Service_UpdateSessionInfo">
            <summary>
            Update the <see cref="T:Fusion.SessionInfo"/> data based on the current LBC Information after the peer enters a Room
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.Service_SendHostMigrationSnapshots">
            <summary>
            Host Snapshot Update Service
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.SendHostMigrationSnapshot">
            <summary>
            Try to send Server Snapshot to Plugin 
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.Run_ReversePing(Fusion.Sockets.NetAddress)">
            <summary>
            Reverse ping will send Empty UDP Packets to the RemoteAddr in order to setup the Routing Table
            on the current NAT of the Server, forcing it to allow packages from the remote client to be received
            </summary>
            <param name="remoteAddr">Remove EndPoint to ping</param>
        </member>
        <member name="M:Fusion.CloudServices.QueryReflexiveInfo">
            <summary>
            Run the STUN Service to retrieve the current Reflexive Addresses of the local peer
            </summary>
            <returns>Running Task of the STUN Query Procedure</returns>
        </member>
        <member name="M:Fusion.CloudServices.UpdateInitializeArgs(Fusion.NetworkRunnerInitializeArgs)">
            <summary>
            Update the internal <see cref="T:Fusion.NetworkRunnerInitializeArgs"/> used to start the Fusion Runner
            </summary>
            <param name="newArgs">New arguments</param>
        </member>
        <member name="M:Fusion.CloudServices.CheckSubnet(Fusion.Sockets.NetAddress)">
            <summary>
            Check if Remote Private EndPoint appears to be in the same Subnet
            </summary>
            <returns>True if in same Subnet</returns>
        </member>
        <member name="M:Fusion.CloudServices.InitRelayLogs">
            <summary>
            Initilize the Log system from the Realtime SDK to use the Fusion Log System
            </summary>
        </member>
        <member name="M:Fusion.CloudServices.UpdateSessionInfo(Fusion.SessionInfo,Fusion.Photon.Realtime.RoomInfo)">
            <summary>
            Converts a <see cref="T:Fusion.Photon.Realtime.RoomInfo"/> to a <see cref="T:Fusion.SessionInfo"/>
            </summary>
            <param name="sessionInfo"><see cref="T:Fusion.SessionInfo"/> </param>
            <param name="roomInfo"><see cref="T:Fusion.Photon.Realtime.RoomInfo"/> ref</param>
            <returns><see cref="T:Fusion.SessionInfo"/> ref</returns>
        </member>
        <member name="T:Fusion.CloudServicesMetadata">
            <summary>
            Holds information about the local peer used to Join/Start/Connect to a remote Peer
            using the Photon Cloud as backend
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.JOIN_PM_TIMEOUT">
            <summary>
            Timeout between sending a <see cref="T:Fusion.Protocol.Join"/> Request and receive a Join Confirmation
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LobbyClientServer">
            <summary>
            Client Server Lobby
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LobbyShared">
            <summary>
            Shared Lobby
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.RunnerInitializeArgs">
            <summary>
            Reference to the initialization arguments set by the user.
            They are used to start the Fusion Runner
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentPunchStage">
            <summary>
            Connection Stage related to the current EndPoint Type used by the client to connect a remote server
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentJoinStage">
            <summary>
            Describes the current state of the Join process
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.CurrentProtocolMessageVersion">
            <summary>
            Describe the current protocol version we are using to communicate with the Plugin
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.RemoteReflexiveInfo">
            <summary>
            Remote Server Reflexive Info. Stores private and public EndPoint of the remote server.
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.LocalReflexiveInfo">
            <summary>
            Local Reflexive Info. Stores private and public EndPoint of the local peer.
            </summary>
        </member>
        <member name="P:Fusion.CloudServicesMetadata.UniqueId">
            <summary>
            Stores the local peer Unique Id
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.ScheduledRequests">
            <summary>
            Stores requests sent by the plugin
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.LastDisconnectMsg">
            <summary>
            Last Disconnect Msg Received from the Plugin
            </summary>
        </member>
        <member name="F:Fusion.CloudServicesMetadata.UniqueIdToReflexiveInfoTable">
            <summary>
            Mapping between Actor UniqueId and its ReflexiveInfo
            </summary>
        </member>
        <member name="T:Fusion.ScheduledRequests">
            <summary>
            Define a list of Requests that may be asked by the Plugin Server
            </summary>
        </member>
        <member name="F:Fusion.ScheduledRequests.None">
            <summary>
            No Request
            </summary>
        </member>
        <member name="F:Fusion.ScheduledRequests.ReflexiveInfo">
            <summary>
            Request for the Local Reflexive Info
            </summary>
        </member>
        <member name="T:Fusion.NATPunchStage">
            <summary>
            Describes the current Target Address Type used in the NAT Punch procedure
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.None">
            <summary>
            No connection procedure is running
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Local">
            <summary>
            Trying to Connect to LAN EndPoint
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Public">
            <summary>
            Trying to Connect to WAN EndPoint
            </summary>
        </member>
        <member name="F:Fusion.NATPunchStage.Relay">
            <summary>
            Trying to Connect to Relay EndPoint
            </summary>
        </member>
        <member name="T:Fusion.JoinProcessStage">
            <summary>
            Stage of the Join Process.
            
            When starting the peer, the first thing we need to make sure is to have Joined the Room
            with a confirmation from the Plugin, this will signal the current stage of this
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Idle">
            <summary>
            Join Request not sent yet
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Joining">
            <summary>
            Join Request Sent, waiting for confirmation
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Done">
            <summary>
            Join Confirmation Received, all good
            </summary>
        </member>
        <member name="F:Fusion.JoinProcessStage.Fail">
            <summary>
            Failed to receive Join Confirmation after a timeout (<see cref="F:Fusion.CloudServicesMetadata.JOIN_PM_TIMEOUT"/>)
            </summary>
        </member>
        <member name="T:Fusion.PeerPing">
            <summary>
            Stores the data of a "Request to Ping" used by the Server in Client-Server Mode
            to send arbitrary "pings" to a connecting Client.
            
            This allows the local NAT Table to be updated with the right mapping information
            from the remote client, increasing the chance of the local Server to receive any
            connect request from the remote peer.
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.PING_DELAY">
            <summary>
            Delay between pings
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.AttemptCount">
            <summary>
            Total number of pings to send
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.NextAttemptCountDown">
            <summary>
            Countdown for the next ping
            </summary>
        </member>
        <member name="F:Fusion.PeerPing.ReflexiveInfo">
            <summary>
            Remote Client Reflexive Info, used to getter the Public EndPoint to send the ping
            </summary>
        </member>
        <member name="T:Fusion.ScheduledRequestsExt">
            <summary>
            Extension methods to <see cref="T:Fusion.ScheduledRequests"/>
            </summary>
        </member>
        <member name="T:Fusion.IAfterAllTicks">
            <summary>
            Interface for <see cref="M:Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean,System.Int32)"/> callback. 
            Called after the resimulation loop (when applicable), and also after the forward simulation loop.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean,System.Int32)">
            <summary>
            Called after the resimulation loop (when applicable), and also after the forward simulation loop.
            Only called on Updates where resimulation or forward ticks are processed.
            </summary>
            <param name="resimulation">True if this is being called during the resimulation loop. False if during the forward simulation loop.</param>
            <param name="tickCount">How many resimulation or forward ticks are going to be processed.</param>
        </member>
        <member name="T:Fusion.IAfterClientPredictionReset">
            <summary>
            Callback interface for <see cref="M:Fusion.IAfterClientPredictionReset.AfterClientPredictionReset"/>.
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            immediately after state is set to the latest server snapshot.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterClientPredictionReset.AfterClientPredictionReset">
            <summary>
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            immediately after state is set to the latest server snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IAfterHostMigration">
            <summary>
            Used to mark NetworkBehaviors that need to be react after a Host Migration process
            </summary>
        </member>
        <member name="M:Fusion.IAfterHostMigration.AfterHostMigration">
            <summary>
            Invoked after the Host Migration happens in order to setup non-networked data on NetworkBehaviors
            </summary>
        </member>
        <member name="T:Fusion.IAfterPhysicsStep">
            <summary>
            Interface for <see cref="M:Fusion.IAfterPhysicsStep.AfterPhysicsStep"/> callback. Called immediately after Physics.Simulate().
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterPhysicsStep.AfterPhysicsStep">
            <summary>
            Called immediately after Physics.Simulate().
            </summary>
        </member>
        <member name="T:Fusion.IAfterTick">
            <summary>
            Interface for <see cref="M:Fusion.IAfterTick.AfterTick"/> callback. 
            Called after each tick simulation completes.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterTick.AfterTick">
            <summary>
            Called after each tick simulation completes.
            </summary>
        </member>
        <member name="T:Fusion.IAfterUpdate">
            <summary>
            Interface for the <see cref="M:Fusion.IAfterUpdate.AfterUpdate"/> callback, which is called at the end of each Fusion Update segment. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IAfterUpdate.AfterUpdate">
            <summary>
            Called at the end of the Fusion Update loop, before all Unity MonoBehaviour.Update() callbacks.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeAllTicks">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeAllTicks.BeforeAllTicks(System.Boolean,System.Int32)"/> callback. 
            Called before the resimulation loop (when applicable), and also before the forward simulation loop.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeAllTicks.BeforeAllTicks(System.Boolean,System.Int32)">
            <summary>
            Called before the resimulation loop (when applicable), and also before the forward simulation loop. 
            Only called on Updates where resimulation or forward ticks are processed.
            </summary>
            <param name="resimulation">True if this is being called during the resimulation loop. False if during the forward simulation loop.</param>
            <param name="tickCount">How many resimulation or forward ticks are going to be processed.</param>
        </member>
        <member name="T:Fusion.IBeforeClientPredictionReset">
            <summary>
            Callback interface for <see cref="M:Fusion.IBeforeClientPredictionReset.BeforeClientPredictionReset"/>.
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            before state is set to the latest server snapshot.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeClientPredictionReset.BeforeClientPredictionReset">
            <summary>
            Called at the very start of the resimulation loop (on clients with prediction enabled), 
            before state is set to the latest server snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeHitboxRegistration">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeHitboxRegistration.BeforeHitboxRegistration"/> callback.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeHitboxRegistration.BeforeHitboxRegistration">
            <summary>
            Called immediately before the <see cref="T:Fusion.HitboxManager"/> registers hitboxes in a snapshot.
            </summary>
        </member>
        <member name="T:Fusion.IBeforePhysicsStep">
            <summary>
            Interface for <see cref="M:Fusion.IBeforePhysicsStep.BeforePhysicsStep"/> callback. Called immediately before Physics.Simulate().
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforePhysicsStep.BeforePhysicsStep">
            <summary>
            Called immediately before Physics.Simulate().
            </summary>
        </member>
        <member name="T:Fusion.IBeforeTick">
            <summary>
            Interface for <see cref="M:Fusion.IBeforeTick.BeforeTick"/> callback. 
            Called before each tick is simulated.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeTick.BeforeTick">
            <summary>
            Called before each tick is simulated.
            </summary>
        </member>
        <member name="T:Fusion.IBeforeUpdate">
            <summary>
            Interface for the <see cref="M:Fusion.IBeforeUpdate.BeforeUpdate"/> callback, which is called at the beginning of each Fusion Update segment. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IBeforeUpdate.BeforeUpdate">
            <summary>
            Called at the start of the Fusion Update loop, before the Fusion simulation loop.
            </summary>
        </member>
        <member name="T:Fusion.IPredictedSpawnBehaviour">
            <summary>
            Interface for predicted spawn callbacks.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            </summary>
        </member>
        <member name="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSpawned">
            <summary>
            Called in place of Spawned(), when the predicted object is initially created locally on the client.
            </summary>
        </member>
        <member name="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnUpdate">
            <summary>
            Called every tick in place of FixedUpdateNetwork(), until <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSuccess"/> or <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnFailed"/> occur.
            </summary>
        </member>
        <member name="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnRender">
            <summary>
            Called every tick in place of Render(), until <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSuccess"/> or <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnFailed"/> occur.
            </summary>
        </member>
        <member name="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnFailed">
            <summary>
            Called when Server does not produce the spawn that has been predicted. 
            The spawn did not actually happen, and this callback may be used to clean up after the missed prediction.
            </summary>
        </member>
        <member name="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSuccess">
            <summary>
            Called when Server spawn was has been confirmed, and the predicted spawn object has been added to the simulation.
            </summary>
        </member>
        <member name="T:Fusion.ISimulationEnter">
            <summary>
            Interface for <see cref="M:Fusion.ISimulationEnter.SimulationEnter"/> callback.
            Called when the <see cref="T:Fusion.NetworkObject"/> joins AreaOfInterest.
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            Only applicable to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>. 
            </summary>
        </member>
        <member name="M:Fusion.ISimulationEnter.SimulationEnter">
            <summary>
            Called when the <see cref="T:Fusion.NetworkObject"/> joins AreaOfInterest.
            Object is now receiving snapshot updates.
            Object will execute <see cref="T:Fusion.NetworkBehaviour"/> FixedUpdateNetwork() and Render() methods until the object leaves simulation.
            </summary>
        </member>
        <member name="T:Fusion.ISimulationExit">
            <summary>
            Interface for the <see cref="M:Fusion.ISimulationExit.SimulationExit"/> callback.
            Called when the <see cref="T:Fusion.NetworkObject"/> leaves AreaOfInterest. 
            Implement this interface on <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> classes.
            Only applicable to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>. 
            </summary>
        </member>
        <member name="M:Fusion.ISimulationExit.SimulationExit">
            <summary>
            Called when the <see cref="T:Fusion.NetworkObject"/> leaves AreaOfInterest. 
            Object is no longer receiving snapshot updates.
            Object will stop executing <see cref="T:Fusion.NetworkBehaviour"/> FixedUpdateNetwork() and Render() methods until the object rejoins simulation.
            </summary>
        </member>
        <member name="T:Fusion.WriteAccuracy">
            <summary>
            Float compression value, used when writing to the fusion allocator.
            </summary>
        </member>
        <member name="T:Fusion.ReadAccuracy">
            <summary>
            Float decompression value, used when reading from the fusion allocator.
            </summary>
        </member>
        <member name="T:Fusion.Accuracy">
            <summary>
            Indicates the rounding factor of compressed values. 
            All values will be truncated to the nearest multiple of this.
            <para>For example; A value of 0.012345f compressed with an Accuracy of 0.001, becomes 0.012f</para>
            <para>An Accuracy setting of 0 is uncompressed.</para>
            </summary>
        </member>
        <member name="P:Fusion.Accuracy.Value">
            <summary>
            The accuracy value that is used as a rounding factor for Fusion's compression. All values will be truncated to the nearest multiple of this.
            </summary>
        </member>
        <member name="P:Fusion.Accuracy.Inverse">
            <summary>
            The inverse of the Accuracy value, used in decompression.
            </summary>
        </member>
        <member name="M:Fusion.Accuracy.SetValue(System.Single)">
            <summary>
            Sets the Accuracy value.Inverse is determined and set as well.
            </summary>
        </member>
        <member name="M:Fusion.Accuracy.UseGlobalAccuracy(System.String)">
            <summary>
            Sets the accuracy to a global accuracy, which are defined in Fusion's <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
            <param name="tag">The name of the Accuracy Default (can be found in <see cref="T:Fusion.NetworkProjectConfig"/>'s settings.</param>
        </member>
        <member name="M:Fusion.Accuracy.GetWriteAccuracy(Fusion.NetworkProjectConfig)">
            <summary>
            Gets the <see cref="T:Fusion.WriteAccuracy"/> value used for float compression.
            </summary>
            <param name="config">Reference to the project Config file, which is needed to look up the global <see cref="T:Fusion.AccuracyDefaults"/> values.
            Typically this is Runner.Config is used for this value.
            </param>
        </member>
        <member name="M:Fusion.Accuracy.GetReadAccuracy(Fusion.NetworkProjectConfig)">
            <summary>
            Gets the <see cref="T:Fusion.ReadAccuracy"/> value used for float decompression.
            </summary>
            <param name="config">Reference to the project <see cref="T:Fusion.NetworkProjectConfig"/> file, which is needed to look up the global <see cref="T:Fusion.AccuracyDefaults"/> values.</param>
        </member>
        <member name="M:Fusion.Accuracy.#ctor(System.Single)">
            <summary>
            Accuracy constructor. The provided float value is used to determine the rounding. 
            For example, an accuracy of .01f would result in the value .02345 being rounded to .02f.
            </summary>
            <param name="accuracy"></param>
        </member>
        <member name="M:Fusion.Accuracy.#ctor(System.String,System.Single)">
            <summary>
            Accuracy constructor that binds this accuracy to a named <see cref="T:Fusion.AccuracyDefaults"/> setting.
            <para>This can be a built-in constant, like AccuracyDefaults.POSITION - 
            or your own custom name (provided you have defined it in <see cref="F:Fusion.NetworkProjectConfig.AccuracyDefaults"/>.</para>
            </summary>
            <param name="tag">The string name of the tag. Can be an <see cref="T:Fusion.AccuracyDefaults"/> constant, or your own defined default.</param>
            <param name="value">The value that will be used if the AccuracyDefaults toggle is deselected in the inspector.</param>
        </member>
        <member name="M:Fusion.Accuracy.#ctor(System.String)">
            <summary>
            Accuracy constructor for named <see cref="T:Fusion.AccuracyDefaults"/> usage. Pass the named default to this constructor.
            The <see cref="P:Fusion.Accuracy.Value"/>, <see cref="P:Fusion.Accuracy.Inverse"/> properties and the <see cref="M:Fusion.Accuracy.GetReadAccuracy(Fusion.NetworkProjectConfig)"/> and <see cref="M:Fusion.Accuracy.GetWriteAccuracy(Fusion.NetworkProjectConfig)"/> methods 
            will lookup their return values using the <see cref="T:Fusion.AccuracyDefaults"/> in the supplied <see cref="P:Fusion.NetworkRunner.Config"/>.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Fusion.Accuracy.op_Implicit(System.Single)~Fusion.Accuracy">
            <summary>
            Implicit operator to convert floats into accuracy.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fusion.Accuracy.ToString">
            <summary>
            Summary text for this accuracy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.NetworkAreaOfInterestBehaviour">
            <summary>
            Base class for network behaviours which provide a position offset for area of interest.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="P:Fusion.NetworkAreaOfInterestBehaviour.PositionWordOffset">
            <summary>
            The int* offset for the Ptr, for the memory location of the position data.
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviour">
            <summary>
            Base class for Fusion network components, which are associated with a <see cref="T:Fusion.NetworkObject"/>.
            <para>Derived from <see cref="T:Fusion.SimulationBehaviour"/>, components derived from this class are associated with a <see cref="T:Fusion.NetworkRunner"/> and <see cref="T:Fusion.Simulation"/>.
            Components derived from this class are associated with a parent <see cref="T:Fusion.NetworkObject"/>.
            and can use the <see cref="T:Fusion.NetworkedAttribute"/> on properties to automate state synchronization, 
            and can use the <see cref="T:Fusion.RpcAttribute"/> on methods, to automate messaging.</para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviour.InterpolationDataSources">
            <summary>
            Options for which time frame this object will render in. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.InterpolationDataSources.Auto">
            <summary>
            Selects the most likely suitable time frame.
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.InterpolationDataSources.Snapshots">
            <summary>
            Renders the object in the remote time frame, using the most recently consumed remote state tick.
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.InterpolationDataSources.Predicted">
            <summary>
            Render the object in the local players time frame, interpolating between the most recent tick simulation result and the previous.
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.InterpolationDataSources.NoInterpolation">
            <summary>
            Interpolation will not be calculated nor applied.
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.Ptr">
            <summary>
            Pointer to the allocated memory associated with this Object. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour.ObjectIndex">
            <summary>
            The index of this <see cref="T:Fusion.NetworkBehaviour"/>, in the <see cref="F:Fusion.NetworkObject.NetworkedBehaviours"/> array.
            </summary>
        </member>
        <member name="F:Fusion.NetworkBehaviour._interpolationDataSource">
            <summary>
            Indicates whether the state authority snapshot tick data, or prediction tick data (if available in the current mode for the current peer) should be used for interpolation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.WordInfo">
            <summary>
            Gives access to the offset (in 32 bit words) and count (in 32 bit words) of this behaviour backing data
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.InterpolationDataSource">
            <summary>
            Get/Set the time frame this object is rendered in.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.Id">
            <summary>
            The unique identifier for this network behaviour. 
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetLocalAuthorityMask">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the current local authority over this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.DynamicWordCount">
            <summary>
            Override this value for custom memory allocations. 
            This is for advanced use cases only, and cannot be used if <see cref="T:Fusion.NetworkedAttribute"/> is used in the derived class.  
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.CopyStateFrom(Fusion.NetworkBehaviour)">
            <summary>
            Copies entire state of passed in source <see cref="T:Fusion.NetworkBehaviour"/>
            </summary>
            <param name="source">Source <see cref="T:Fusion.NetworkBehaviour"/> to copy data from</param>
        </member>
        <member name="P:Fusion.NetworkBehaviour.InvokeOnChangedForInitialNonZeroValues">
            <summary>
            Override this property to change whether initial non-zero values assigned
            to [Networked] properties invoke OnChanged callbacks. For clients
            the initial value comes from the simulation snapshot, not from what has
            been set locally in the inspector.
            
            Returns "true" by default.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Spawned">
            <summary>
            Post spawn callback.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Despawned(Fusion.NetworkRunner,System.Boolean)">
            <summary>
            Called before the network object is despawned
            </summary>
            <param name="hasState">If the state of the behaviour is still accessible</param>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInterpolationData(Fusion.InterpolationData@,System.Nullable{System.Boolean})">
            <summary>
            Get 'To' and 'From' states, and the Alpha (t) values needed for lerping.
            </summary>
            <param name="data">The returned values.</param>
            <param name="predicted">Force interpolation to the current <see cref="T:Fusion.Simulation"/>s time frame</param>
            <returns>True valid state data was returned.</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInterpolationData(Fusion.InterpolationData@,System.Boolean@)">
            <summary>
            Get 'To' and 'From' states, and the Alpha (t) values needed for interpolation.
            </summary>
            <param name="data">The returned values.</param>
            <param name="predicted">
            If the interpolation data is in the predicted time frame (true) or between snapshots (false),
            according to the <see cref="P:Fusion.NetworkBehaviour.InterpolationDataSource"/>.
            </param>
            <returns>True valid state data was returned.</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.IsInterpolationDataPredicted">
            <summary>
            If the behaviour data should be interpolated between latest predicted states or between snapshots.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.OnChangeClearAll">
            <summary>
            Clear all dynamic OnChange callbacks from this behaviour
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.OnChangeRemove(Fusion.NetworkBehaviourCallbackReference)">
            <summary>
            Removes a specific OnChange callback from this behaviour
            </summary>
            <param name="reference">The reference returned by OnChangeAdd</param>
            <returns>Removal succeeded</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.OnChangeAdd``1(System.Int32,System.Int32,Fusion.ChangedDelegate{``0},Fusion.OnChangedTargets)">
            <summary>
            Adds a OnChange callback to this behaviour which is bound to a specific word offset and word count
            </summary>
            <param name="wordOffset">Word offset to monitor for changes</param>
            <param name="wordCount">How many words to monitor for changes, from offset and up</param>
            <param name="callback">Callback to invoke</param>
            <typeparam name="T">Type of the behaviour</typeparam>
            <returns>Reference struct that can be used to remove this callback later</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.OnChangeAdd``1(System.String,Fusion.ChangedDelegate{``0},Fusion.OnChangedTargets)">
            <summary>
            Adds a OnChange callback to this behaviour which is bound to a specific weaved property
            </summary>
            <param name="propertyName">Name of the property to monitor for changes</param>
            <param name="callback">Callback to invoke</param>
            <typeparam name="T">Type of the behaviour</typeparam>
            <returns>Reference struct that can be used to remove this callback later</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInput``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInput``1(``0@)">
            <summary>
            Returns true if it a valid <see cref="T:Fusion.INetworkInput"/> can be found for the current simulation tick (Typically this is used in <see cref="M:Fusion.NetworkBehaviour.FixedUpdateNetwork"/>).
            <para>The returned input struct originates from the <see cref="P:Fusion.NetworkObject.InputAuthority"/>, 
            and if valid contains the inputs supplied by that <see cref="T:Fusion.PlayerRef"/> for the current simulation tick.</para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviour.RawInterpolator">
            <summary>
            RawInterpolator provides a set of methods to get the "from" and "to" ticks of the associated [Networked] property,
            as well as the current interpolation value for the two.
            All methods return raw memory pointers and expects the caller to be able to convert the data to the proper types.
            <seealso cref="T:Fusion.NetworkBehaviour.Interpolator`1"/>
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviour.Interpolator`1">
            <summary>
            Interpolator provides a set of methods to get the "from" and "to" ticks of the associated [Networked] property,
            as well as the current interpolation value for the two, but it also provides a Value property as a shortcut to
            get the actual interpolated value for those parameters.
            <seealso cref="T:Fusion.NetworkBehaviour.RawInterpolator"/>
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.Interpolator`1.Value">
            <summary>
            Get the current interpolation value for this Interpolator. This method will silently ignore missing interpolation data and just return the default value for `T`
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviour.Interpolator`1.TryValue">
            <summary>
            Get the current interpolation value for this Interpolator. Similar to the `Value` property, but will return null if interpolation data is not available.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Interpolator`1.TryGetValues(`0@,`0@,System.Single@,System.Nullable{System.Boolean})">
            <summary>
            Try and get 'To' and 'From' states, and the Alpha (t) values needed for interpolation.
            </summary>
            <param name="from">Value on the state the interpolation is going from.</param>
            <param name="to">Value on the state the interpolation is going to.</param>
            <param name="alpha">Interpolant factor between the two states.</param>
            <param name="force">
            Force interpolation to the current <see cref="T:Fusion.Simulation"/>s time frame (as opposed to between snapshots).
            If no value is forced, interpolation data will be retrieved according to the <see cref="P:Fusion.NetworkBehaviour.InterpolationDataSource"/>.
            </param>
            <returns>True if the interpolation data is available, false otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.Interpolator`1.GetValues(System.Nullable{System.Boolean})">
            <summary>
            Get 'To' and 'From' states, and the Alpha (t) values needed for interpolation.
            </summary>
            <param name="force">
            Force interpolation to the current <see cref="T:Fusion.Simulation"/>s time frame (as opposed to between snapshots).
            If no value is forced, interpolation data will be retrieved according to the <see cref="P:Fusion.NetworkBehaviour.InterpolationDataSource"/>.
            </param>
            <returns>A tuple containing the values. Null if interpolation data is not available.</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInterpolator(System.String)">
            <summary>
            Get a raw interpolator for a networked property.
            The returned `RawInterpolator` provides a way to calculate the "between-ticks" value of the named [Networked] property.
            </summary>
            <param name="propertyName">Name of the [Networked] property</param>
            <returns>`RawInterpolator` for the networked property</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.GetInterpolator``1(System.String)">
            <summary>
            Get an interpolator for a networked property.
            The returned `Interpolator` provides a way to calculate the "between-ticks" value of the named [Networked] property with the specified type `T`.
            The value is a linear interpolation between the "from" and the "to" ticks and is available via the `Value` property on the `Interpolator`.
            </summary>
            <param name="propertyName">Name of the [Networked] property</param>
            <typeparam name="T">Type of the [Networked] property</typeparam>
            <returns>`Interpolator` for the networked property</returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.MakeInitializer``1(``0[])">
            <summary>
            This is a special method that is meant to be used only for [Networked] properties inline initialization.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.MakeInitializer``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            This is a special method that is meant to be used only for [Networked] properties inline initialization.
            </summary>
        </member>
        <member name="M:Fusion.NetworkBehaviour.op_Implicit(Fusion.NetworkBehaviour)~Fusion.NetworkBehaviourId">
            <summary>
            Converts NetworkBehaviour to NetworkBehaviourId
            </summary>
            <param name="behaviour"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkBehaviour.InvokeWeavedCode">
            <summary>
            This method needs to be invoked in user overrides of:
            <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>
            <see cref="M:Fusion.NetworkBehaviour.CopyStateToBackingFields"/>
            </summary>
        </member>
        <member name="T:Fusion.NetworkBehaviourCallbackReference">
            <summary>
            Reference to an OnChange callback added to a NetworkBehaviour
            </summary>
        </member>
        <member name="P:Fusion.NetworkBehaviourCallbackReference.IsValid">
            <summary>
            If this callback reference is valid or not
            </summary>
        </member>
        <member name="T:Fusion.NetworkMecanimAnimator">
            <summary>
            A component for synchronizing the Animator controller state from the State Authority to network proxies.
            Requires a Unity Animator component, and a <see cref="T:Fusion.NetworkObject"/> component.
            NOTE: Animator Root Motion is not compatible with re-simulation and prediction.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.Animator">
            <summary>
            The Animator being synced.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.TotalWords">
            <summary>
            The number of words allocated per snapshot for serialization of the Animator. (One Word is 32 bits, or 4 bytes).
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.SyncSettings">
            <summary>
            Flags controlling which Mecanim data will be synced.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.FloatAccuracy">
            <summary>
            Accuracy used for parameter float values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.TimeAccuracy">
            <summary>
            Accuracy used for animator state normalized time values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.WeightAccuracy">
            <summary>
            Accuracy used for layer weight values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.StateHashes">
            <summary>
            States found in the current AnimatorController, converted to hashes.
            </summary>
        </member>
        <member name="F:Fusion.NetworkMecanimAnimator.TriggerHashes">
            <summary>
            Triggers found in the current AnimatorController, converted to hashes.
            </summary>
        </member>
        <member name="M:Fusion.NetworkMecanimAnimator.SetTrigger(System.Int32,System.Boolean)">
            <summary>
            Queues a SetTrigger() call for the associated Animator on the State Authority. Call this instead of Animator.SetTrigger() for the State Authority to ensure that triggers are captured.
            On State Authority, this call will defer the SetTrigger() pass-through to the Animator until FixedUpdateNetwork() is called, 
            where all queued triggers will be executed (this is to ensure tick agreement between server and clients).
            </summary>
            <param name="triggerHash"></param>
            <param name="passThroughOnInputAuthority">Will call Animator.SetTrigger() immediately on the InputAuthority. If false, SetTrigger() will not be called on the Input Authority at all
            and Animator.SetTrigger() should be called explicitly as needed.
            </param>
        </member>
        <member name="M:Fusion.NetworkMecanimAnimator.SetTrigger(System.String,System.Boolean)">
            <summary>
            Queues a SetTrigger() call for the associated Animator on the State Authority. Call this instead of Animator.SetTrigger() for the State Authority to ensure that triggers are captured.
            On State Authority, this call will defer the SetTrigger() pass-through to the Animator until FixedUpdateNetwork() is called, 
            where all queued triggers will be executed (this is to ensure tick agreement between server and clients).
            </summary>
            <param name="trigger"></param>
            <param name="passThroughOnInputAuthority">Will call Animator.SetTrigger() immediately on the InputAuthority. If false, SetTrigger() will not be called on the Input Authority at all
            and Animator.SetTrigger() should be called explicitly as needed.
            </param>
        </member>
        <member name="T:Fusion.NetworkPhysicsSimulation2D">
            <summary>
            Fusion component for handling Physics2D.SyncTransforms() and Physics2D.Simulate(). 
            Only used when <see cref="F:Fusion.NetworkProjectConfig.PhysicsEngines.Physics2D"/> == true.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPhysicsSimulation3D">
            <summary>
            Fusion component for handling Physics.SyncTransforms() and Physics.Simulate(). 
            Only used when <see cref="F:Fusion.NetworkProjectConfig.PhysicsEngines.Physics3D"/> == true.
            </summary>
        </member>
        <member name="T:Fusion.OrderAttribute">
            <summary>
            Base class for OrderBefore and OrderAfter attributes.
            </summary>
        </member>
        <member name="T:Fusion.OrderAfterAttribute">
            <summary>
            <para>Fusion attribute used to indicate relative execution order of <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> derived scripts.
            Any number of scripts can be specified.</para>
            <para>Usage:</para>
            <code>[OrderAfter(typeof(MySimulationBehaviour), typeof(MyNetworkBehaviour), etc)]
            </code>
            </summary>
        </member>
        <member name="P:Fusion.OrderAfterAttribute.After">
            <summary>
            The array of scripts the attributed script should run before.
            </summary>
        </member>
        <member name="M:Fusion.OrderAfterAttribute.#ctor(System.Type[])">
            <summary>
            Fusion attribute that defines execution order of this script relative to specified other scripts.
            </summary>
            <param name="types">The <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> scripts this attributed script should execute AFTER.</param>
        </member>
        <member name="T:Fusion.OrderBeforeAttribute">
            <summary>
            <para>Fusion attribute used to indicate relative execution order of <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> derived scripts.
            Any number of scripts can be specified.</para>
            <para>Usage:</para>
            <code>[OrderBefore(typeof(MySimulationBehaviour), typeof(MyNetworkBehaviour), etc)]
            </code>
            </summary>
        </member>
        <member name="P:Fusion.OrderBeforeAttribute.Before">
            <summary>
            The array of scripts the attributed script should run before.
            </summary>
        </member>
        <member name="M:Fusion.OrderBeforeAttribute.#ctor(System.Type[])">
            <summary>
            Fusion attribute that defines execution order of this script relative to specified other scripts.
            </summary>
            <param name="types">The <see cref="T:Fusion.SimulationBehaviour"/> and <see cref="T:Fusion.NetworkBehaviour"/> scripts this attributed script should execute BEFORE.</param>
        </member>
        <member name="T:Fusion.OrderSorter">
            <summary>
            This sorting class is meant to be released and garbage collected after use.
            </summary>
        </member>
        <member name="M:Fusion.OrderSorter.Run">
            <summary>
            Returns sorted list of Types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.OrderSorter.Scanlibrary">
            <summary>
            Locate all SimulationBehaviours, and add them to this system.
            </summary>
        </member>
        <member name="M:Fusion.OrderSorter.AlphabetizeTypes">
            <summary>
            Alphabetize the initial list to create determinism in all following steps.
            </summary>
        </member>
        <member name="M:Fusion.OrderSorter.RegisterNode(System.Type)">
            <summary>
            Create the node without searching for attributes yet.
            </summary>
        </member>
        <member name="M:Fusion.OrderSorter.MergeChains">
            <summary>
            Merge Before and Afters based on the logic: If A is Before B, and B is Before C, then A is Before C... etc
            This allows obvious conflicts to be quickly spotted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.OrderSorter.ConvertNodesToSortedArray">
            <summary>
            Converts linked OrderNode list to Type[]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.IRunnerVisibilityRecognizedType">
            <summary>
            Flags a Unity component class as a RunnerVisibilityNodes recognized type. 
            Will be included in <see cref="P:Fusion.NetworkRunner.IsVisible"/> handling, and will be found by <see cref="T:Fusion.RunnerVisibilityNodes"/> component finds.
            </summary>
        </member>
        <member name="T:Fusion.RunnerVisibilityNodeRoot">
            <summary>
            Flag component which indicates a NetworkObject has already been factored into a Runner's VisibilityNode list.
            </summary>
        </member>
        <member name="T:Fusion.RunnerVisibilityNode">
            <summary>
            Identifies visible/audible components (such as renderers, canvases, lights) that should be enabled/disabled by <see cref="P:Fusion.NetworkRunner.IsVisible"/>.
            Automatically added to scene objects and spawned objects during play if running in <see cref="F:Fusion.NetworkProjectConfig.PeerModes.Multiple"/>. 
            Additionally this component can be added manually at development time to identify specific Behaviours or Renderers you would like to restrict to one enabled copy at a time.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode._recognizedBehaviourNames">
            <summary>
            Types that fusion.runtime isn't aware of, which need to be found using names instead.
            </summary>
        </member>
        <member name="T:Fusion.RunnerVisibilityNode.PreferredRunners">
            <summary>
            The peer runner that will be used if more than one runner is visible, and this node was manually added by developer (indicating only one instance should be visible at a time).
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.PreferredRunners.InputAuthority">
            <summary>
            The peer/runner with input authority will be used if visible.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.PreferredRunners.Server">
            <summary>
            The server peer/runner will be used if visible.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.PreferredRunners.Client">
            <summary>
            The first client peer/runner will be used if visible.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.PreferredRunner">
            <summary>
            If more than one runner instance is visible, this indicates which peer's clone of this entity should be visible.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.Component">
            <summary>
            The associated component with this node. This Behaviour or Renderer will be enabled/disabled when its parent <see cref="P:Fusion.NetworkRunner.IsVisible"/> is changed.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.Guid">
            <summary>
            Guid is used for common objects (user flagged nodes that should only run in one instance), to identify matching clones.
            </summary>
        </member>
        <member name="P:Fusion.RunnerVisibilityNode.DefaultState">
            <summary>
            Set to false to indicate that this object should remain disabled even when <see cref="P:Fusion.NetworkRunner.IsVisible"/> is set to true.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNode.SetEnabled(System.Boolean)">
            <summary>
            Sets the visibility state of this node.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="F:Fusion.RunnerVisibilityNode.CommonObjectLookup">
            <summary>
            Dictionary lookup for manually added visibility nodes (which indicates only one instance should be visible at a time), 
            which returns a list of nodes for a given LocalIdentifierInFile.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNode.AddVisibilityNodes(UnityEngine.GameObject,Fusion.NetworkRunner)">
            <summary>
            Find all component types that contribute to a scene rendering, and associate them with a <see cref="T:Fusion.RunnerVisibilityNode"/> component, 
            and add them to the runner's list of visibility nodes.
            </summary>
            <param name="go"></param>
            <param name="runner"></param>
        </member>
        <member name="M:Fusion.RunnerVisibilityNode.RefreshAllRunnerVisibilities">
            <summary>
            Force a complete visibility refresh on all runners. Typically used if a runner is destroyed/shutdown.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNode.RefreshRunnerVisibility(Fusion.NetworkRunner,System.Boolean)">
            <summary>
            Reapplies a runner's IsVisibile setting to all of its registered visibility nodes.
            </summary>
            <param name="runner"></param>
            <param name="refreshCommonObjects"></param>
        </member>
        <member name="T:Fusion.RunnerVisibilityNodes">
            <summary>
            Automatically adds a <see cref="T:Fusion.RunnerVisibilityNode"/> for each indicated component. 
            These indicated components will be limited to no more than one enabled instance when running in Multi-Peer mode.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNodes.PreferredRunner">
            <summary>
            If more than one runner instance is visible, this indicates which peer's clone of this entity should be visible.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNodes.Components">
            <summary>
            Collection of components that will be marked for Multi-Peer mode as objects that should only have one enabled instance.
            </summary>
        </member>
        <member name="F:Fusion.RunnerVisibilityNodes._guid">
            <summary>
            Prefix for the GUIDs of <see cref="T:Fusion.RunnerVisibilityNode"/> components which are added at runtime.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNodes.AddNodes">
            <summary>
            At runtime startup, this adds a <see cref="T:Fusion.RunnerVisibilityNode"/> for each component reference to this GameObject.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNodes.FindRecognizedTypes">
            <summary>
            Finds visual/audio components on this GameObject, and adds them to the Components collection.
            </summary>
        </member>
        <member name="M:Fusion.RunnerVisibilityNodes.FindNestedRecognizedTypes">
            <summary>
            Finds visual/audio nested components on this GameObject and its children, and adds them to the Components collection.
            </summary>
        </member>
        <member name="T:Fusion.SimulationBehaviour">
            <summary>
            Base class for a Fusion aware Behaviour (derived from UnityEngine.MonoBehavour).
            Objects derived from this object can be associated with a <see cref="T:Fusion.NetworkRunner"/> and <see cref="T:Fusion.Simulation"/>.
            If a parent <see cref="T:Fusion.NetworkObject"/> is found, this component will also be associated with that network entity.
            </summary>
        </member>
        <member name="F:Fusion.SimulationBehaviour.Runner">
            <summary>
            The <see cref="T:Fusion.NetworkRunner"/> this component is associated with.
            </summary>
        </member>
        <member name="F:Fusion.SimulationBehaviour.Object">
            <summary>
            The <see cref="T:Fusion.NetworkObject"/> this component is associated with. May be null if this GameObject does not have a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviour.HasInputAuthority">
            <summary>
            Returns true if the <see cref="P:Fusion.Simulation.LocalPlayer"/> of the associated <see cref="T:Fusion.NetworkRunner"/> is the designated as Input Authority for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviour.HasStateAuthority">
            <summary>
            Returns true if the associated <see cref="T:Fusion.NetworkRunner"/> is the State Authority for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviour.IsProxy">
            <summary>
            Returns true if the associated <see cref="T:Fusion.NetworkRunner"/> is neither the Input nor State Authority for this network entity.
            It is recommended to use !<see cref="P:Fusion.SimulationBehaviour.HasStateAuthority"/> or !<see cref="P:Fusion.SimulationBehaviour.HasInputAuthority"/> when possible instead,
            as this check requires evaluating both authorities - and is therefore less performant than the individual checks.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.FixedUpdateNetwork">
            <summary>
            Fusion FixedUpdate timing callback.
            </summary>
        </member>
        <member name="M:Fusion.SimulationBehaviour.Render">
            <summary>
            Post simulation frame rendering callback. Runs after all simulations have finished. Use in place of Unity's Update when Fusion is handling Physics.
            </summary>
        </member>
        <member name="T:Fusion.SimulationBehaviourAttribute">
            <summary>
            Attribute for specifying which <see cref="T:Fusion.SimulationStages"/> and <see cref="T:Fusion.SimulationModes"/> this <see cref="T:Fusion.SimulationBehaviour"/> will execute in.
            Can be used to limit execution to only Host, Server or Client peers, or to only execute on Resimulation or Forward ticks.
            Usage:
            <code>
            [SimulationBehaviour(Stages = SimulationStages.Forward, Modes = SimulationModes.Server | SimulationModes.Host)]
            </code>
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourAttribute.Stages">
            <summary>
            Flag for which stages of the simulation loop this component will execute this script.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourAttribute.Modes">
            <summary>
            Flag for which indicated peers in <see cref="T:Fusion.SimulationModes"/> will execute this script.
            </summary>
        </member>
        <member name="P:Fusion.SimulationBehaviourUpdater.CallbackInterfacesDefualts">
            <summary>
            The default behaviour interfaces
            </summary>
        </member>
        <member name="T:Fusion.NetworkPosition">
            <summary>
            Replicates a Unity Transform's position state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Rotation is NOT networked. For that, see <see cref="T:Fusion.NetworkPositionRotation"/> or <see cref="T:Fusion.NetworkTransform"/>.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            <remarks>
            This component does not interpolate visuals. In order to do that, use a <see cref="T:Fusion.NetworkTransform"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:Fusion.NetworkPosition.Transform">
            <summary>
            Cached GameObject.transform reference.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.Awake">
            <summary>
            Implements Unity's Awake event function.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.OnEnable">
            <summary>
            Implements Unity's OnEnable event function.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.Spawned">
            <summary>
            Overrides <see cref="M:Fusion.NetworkBehaviour.Spawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.BeforeUpdate">
            <summary>
            Implements <see cref="T:Fusion.IBeforeUpdate"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.BeforeAllTicks(System.Boolean,System.Int32)">
            <summary>
            Implements <see cref="T:Fusion.IBeforeAllTicks"/>.
            If overriding this method in an inheritor, the base method should be called.
            To extend the functionality of copying data from the networked buffer to the engine,
            override and extend <see cref="M:Fusion.NetworkPosition.CopyFromBufferToEngine"/> instead.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.AfterAllTicks(System.Boolean,System.Int32)">
            <summary>
            Implements <see cref="T:Fusion.IAfterAllTicks"/>.
            If overriding this method in an inheritor, the base method should be called.
            To extend the functionality of copying data from the engine to the networked buffer,
            override and extend <see cref="M:Fusion.NetworkPosition.CopyFromEngineToBuffer"/> instead.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.RemotePrefabCreated">
            <summary>
            Implements <see cref="T:Fusion.IRemotePrefabCreated"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.BeforeCopyPreviousState">
            <summary>
            Implements <see cref="T:Fusion.IBeforeCopyPreviousState"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.CopyBackingFieldsToState(System.Boolean)">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.CopyFromBufferToEngine">
            <summary>
            Sets the position value retrieved from the networked data to the engine's position field.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.CopyFromEngineToBuffer">
            <summary>
            Sets the position value retrieved from the engine (Unity) to the respective networked field.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.GetEnginePosition">
            <summary>
            Gets the position value from the engine. By default, the world position is set to be the output.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.SetEnginePosition(UnityEngine.Vector3)">
            <summary>
            Sets a position value to the engine. By default, the value is set to the transform's world position field.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.AfterHostMigration">
            <inheritdoc cref="M:Fusion.IAfterHostMigration.AfterHostMigration"/>
        </member>
        <member name="F:Fusion.NetworkPosition.WORD_COUNT_NPOS">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkPosition"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPosition.BaseWordCount">
            <summary>
            Number of words used by this class on the networked data buffer, including all inherited fields,
            to serve for reference to inheritors.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPosition.PositionWordOffset">
            <summary>
            Implements <see cref="T:Fusion.NetworkAreaOfInterestBehaviour"/> by defining the word offset from the base pointer to the field that carries the position data used for Area of Interest management.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.ReadPosition">
            <summary>
            Reads from the position field on this object's networked data
            with the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.ReadPosition(System.Int32*)">
            <summary>
            Reads from a position field on the networked data pointed by <paramref name="ptr"/>
            with the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.ReadPosition(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from a position field on the networked data pointed by <paramref name="ptr"/>
            with the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.WritePosition(UnityEngine.Vector3)">
            <summary>
            Writes to a position field on this object's networked data
            with the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.WritePosition(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to a position field on the networked data pointed by <paramref name="ptr"/>
            with the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPosition.WritePosition(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to a position field on the networked data pointed by <paramref name="ptr"/>
            with the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPositionRotation">
            <summary>
            Replicates a Unity Transform's position and rotation states from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject to sync the position and rotation.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            <remarks>
            This component does not interpolate visuals. In order to do that, use a <see cref="T:Fusion.NetworkTransform"/>.
            </remarks>
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.CopyFromBufferToEngine">
            <summary>
            Sets the values retrieved from the networked data to the respective engine (Unity) fields.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.CopyFromEngineToBuffer">
            <summary>
            Sets the values retrieved from the engine (Unity) to the respective networked fields.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.GetEngineRotation">
            <summary>
            Gets the rotation value from the engine. By default, the world rotation is set to be the output.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.SetEngineRotation(UnityEngine.Quaternion)">
            <summary>
            Sets a rotation value to the engine. By default, the value is set to the transform's world rotation field.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPositionRotation.WORD_COUNT_NPR">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkPositionRotation"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPositionRotation.BaseWordCount">
            <summary>
            Number of words used by this class on the networked data buffer, including all inherited fields,
            to serve for reference to inheritors.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.ReadRotation">
            <summary>
            Reads from the rotation field on this object's networked data
            with the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.ReadRotation(System.Int32*)">
            <summary>
            Reads from a rotation field on the networked data pointed by <paramref name="ptr"/>
            with the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.ReadRotation(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from a rotation field on the networked data pointed by <paramref name="ptr"/>
            with the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.WriteRotation(UnityEngine.Quaternion)">
            <summary>
            Writes to a rotation field on this object's networked data
            with the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.WriteRotation(UnityEngine.Quaternion,System.Int32*)">
            <summary>
            Writes to a rotation field on the networked data pointed by <paramref name="ptr"/>
            with the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPositionRotation.WriteRotation(UnityEngine.Quaternion,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to a rotation field on the networked data pointed by <paramref name="ptr"/>
            with the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbody">
            <summary>
            Replicates a Unity Rigidbody state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject with a Rigidbody component.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody.Rigidbody">
            <summary>
            Cached reference of this object's <see cref="P:Fusion.NetworkRigidbody.Rigidbody"/> component.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.SetIsKinematic(System.Boolean)">
            <summary>
            Sets the <see cref="P:Fusion.NetworkRigidbody.Rigidbody"/> <see cref="P:UnityEngine.Rigidbody.isKinematic"/> field to <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.SetCollisionDetectionMode(UnityEngine.CollisionDetectionMode)">
            <summary>
            Sets the <see cref="P:Fusion.NetworkRigidbody.Rigidbody"/> collision detection <paramref name="mode"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody.DefaultTeleportInterpolationVelocity">
            <summary>
            Sets the default teleport interpolation velocity to be the rigidbody velocity.
            For more details on how this field is used, see <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody.DefaultTeleportInterpolationAngularVelocity">
            <summary>
            Sets the default teleport interpolation angular velocity to be the rigidbody angular velocity.
            For more details on how this field is used, see <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.Awake">
            <summary>
            Implements Unity's Awake event function.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.Spawned">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.Spawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.RemotePrefabCreated">
            <summary>
            Implements <see cref="T:Fusion.IRemotePrefabCreated"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.StateAuthorityChanged">
            <summary>
            Implements <see cref="T:Fusion.IStateAuthorityChanged"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.CopyBackingFieldsToState(System.Boolean)">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.CopyFromBufferToEngine">
            <inheritdoc cref="M:Fusion.NetworkPositionRotation.CopyFromBufferToEngine"/>
        </member>
        <member name="M:Fusion.NetworkRigidbody.CopyFromEngineToBuffer">
            <inheritdoc cref="M:Fusion.NetworkPositionRotation.CopyFromEngineToBuffer"/>
        </member>
        <member name="F:Fusion.NetworkRigidbody.WORD_COUNT_NRB">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkRigidbody"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody.BaseWordCount">
            <inheritdoc cref="P:Fusion.NetworkPositionRotation.BaseWordCount"/>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyPosition">
            <summary>
            Reads from the field reserved to store the rigidbody position on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyPosition(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyPosition(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyRotation">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on this object's
            networked data using the default Runner rotation read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyRotation(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the default Runner rotation read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadRigidbodyRotation(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadVelocity">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadVelocity(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadAngularVelocity">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadAngularVelocity(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadAngularVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            <summary>
            Reads from a field reserved to store the rigidbody flags and constraints
            on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            <summary>
            Reads from a field reserved to store the rigidbody flags and constraints
            on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyPosition(UnityEngine.Vector3)">
            <summary>
            Writes to the field reserved to store the rigidbody position on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyPosition(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyPosition(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyRotation(UnityEngine.Quaternion)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on this object's
            networked data using the default Runner rotation write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyRotation(UnityEngine.Quaternion,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the default Runner rotation write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteRigidbodyRotation(UnityEngine.Quaternion,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteVelocity(UnityEngine.Vector3)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteVelocity(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteVelocity(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteAngularVelocity(UnityEngine.Vector3)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteAngularVelocity(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteAngularVelocity(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags,UnityEngine.RigidbodyConstraints)">
            <summary>
            Writes to a field reserved to store the rigidbody flags and constraints on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags,UnityEngine.RigidbodyConstraints,System.Int32*)">
            <summary>
            Writes a field reserved to store the rigidbody flags and constraints on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbody2D">
            <summary>
            Replicates a Unity Rigidbody state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject with a Rigidbody component.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody2D.Rigidbody">
            <summary>
            Cached reference of this object's <see cref="T:UnityEngine.Rigidbody2D"/> component.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.SetIsKinematic(System.Boolean)">
            <summary>
            Sets the <see cref="P:Fusion.NetworkRigidbody2D.Rigidbody"/> <see cref="P:UnityEngine.Rigidbody2D.isKinematic"/> field to <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.SetCollisionDetectionMode(UnityEngine.CollisionDetectionMode)">
            <summary>
            Sets the <see cref="P:UnityEngine.Rigidbody2D.collisionDetectionMode"/> to <see cref="F:UnityEngine.CollisionDetectionMode2D.Discrete"/> if <paramref name="mode"/>
            is <see cref="F:UnityEngine.CollisionDetectionMode.Discrete"/>, and to <see cref="F:UnityEngine.CollisionDetectionMode2D.Continuous"/> otherwise.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody2D.DefaultTeleportInterpolationVelocity">
            <summary>
            Sets the default teleport interpolation velocity to be the rigidbody velocity.
            For more details on how this field is used, see <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody2D.DefaultTeleportInterpolationAngularVelocity">
            <summary>
            Sets the default teleport interpolation angular velocity to be the rigidbody angular velocity, around the Z axis.
            For more details on how this field is used, see <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.Awake">
            <summary>
            Implements Unity's Awake event function.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.Spawned">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.Spawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.RemotePrefabCreated">
            <summary>
            Implements <see cref="T:Fusion.IRemotePrefabCreated"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.StateAuthorityChanged">
            <summary>
            Implements <see cref="T:Fusion.IStateAuthorityChanged"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.CopyBackingFieldsToState(System.Boolean)">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.CopyFromBufferToEngine">
            <inheritdoc cref="M:Fusion.NetworkPositionRotation.CopyFromBufferToEngine"/>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.CopyFromEngineToBuffer">
            <inheritdoc cref="M:Fusion.NetworkPositionRotation.CopyFromEngineToBuffer"/>
        </member>
        <member name="F:Fusion.NetworkRigidbody2D.WORD_COUNT_NRB_2D">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkRigidbody2D"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbody2D.BaseWordCount">
            <inheritdoc cref="P:Fusion.NetworkPositionRotation.BaseWordCount"/>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyPosition">
            <summary>
            Reads from the field reserved to store the rigidbody position on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyPosition(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyPosition(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyRotation">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on this object's
            networked data using the default Runner rotation read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyRotation(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the default Runner rotation read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadRigidbodyRotation(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadVelocity">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadVelocity(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadAngularVelocity">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadAngularVelocity(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadAngularVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadGravityScale">
            <summary>
            Reads from the field reserved to store the rigidbody gravity scale on this object's
            networked data using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadGravityScale(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody gravity scale on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadGravityScale(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody gravity scale on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            <summary>
            Reads from a field reserved to store the rigidbody flags and constraints
            on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            <summary>
            Reads from a field reserved to store the rigidbody flags and constraints
            on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyPosition(UnityEngine.Vector2)">
            <summary>
            Writes to the field reserved to store the rigidbody position on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyPosition(UnityEngine.Vector2,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyPosition(UnityEngine.Vector2,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody position on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyRotation(System.Single)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on this object's
            networked data using the default Runner rotation write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyRotation(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the default Runner rotation write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteRigidbodyRotation(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody rotation on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteVelocity(UnityEngine.Vector2)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteVelocity(UnityEngine.Vector2,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteVelocity(UnityEngine.Vector2,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteAngularVelocity(System.Single)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteAngularVelocity(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteAngularVelocity(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody angular velocity on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteGravityScale(System.Single)">
            <summary>
            Writes to the field reserved to store the rigidbody gravity scale on this object's
            networked data using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteGravityScale(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody gravity scale on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteGravityScale(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody gravity scale on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags,UnityEngine.RigidbodyConstraints2D)">
            <summary>
            Writes to a field reserved to store the rigidbody flags and constraints on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbody2D.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags,UnityEngine.RigidbodyConstraints2D,System.Int32*)">
            <summary>
            Writes a field reserved to store the rigidbody flags and constraints on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbodyBase">
            <summary>
            Base class for 2D and 3D networked rigid body behaviours:
            see <see cref="T:Fusion.NetworkRigidbody2D"/> and <see cref="T:Fusion.NetworkRigidbody"/>, respectively.
            This class handles some of the data and logic shared between the two versions.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.SetIsKinematic(System.Boolean)">
            <summary>
            Sets a 2D or 3D rigid body kinematic field to <paramref name="value"/>,
            according to the explicit implementation.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.SetCollisionDetectionMode(UnityEngine.CollisionDetectionMode)">
            <summary>
            Sets a 2D or 3D rigid body collision detection <paramref name="mode"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase._forceSnapshotInterpolated">
            <summary>
            If the rigid body state is not predicted, but just interpolated between snapshots.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase._initialized">
            <summary>
            If <see cref="M:Fusion.NetworkRigidbodyBase.Init"/> was called at least once on this instance.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.RemotePrefabCreated">
            <summary>
            Implements <see cref="T:Fusion.IRemotePrefabCreated"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.CopyBackingFieldsToState(System.Boolean)">
            <summary>
            Implements <see cref="M:Fusion.NetworkBehaviour.CopyBackingFieldsToState(System.Boolean)"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.BeforeAllTicks(System.Boolean,System.Int32)">
            <summary>
            Implements <see cref="T:Fusion.IBeforeAllTicks"/>.
            If overriding this method in an inheritor, the base method should be called.
            To extend the functionality of copying data from the networked buffer to the engine,
            override and extend <see cref="M:Fusion.NetworkPositionRotation.CopyFromBufferToEngine"/> instead.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.AfterAllTicks(System.Boolean,System.Int32)">
            <summary>
            Implements <see cref="T:Fusion.IAfterAllTicks"/>.
            If overriding this method in an inheritor, the base method should be called.
            To extend the functionality of copying data from the engine to the networked buffer,
            override and extend <see cref="M:Fusion.NetworkPositionRotation.CopyFromEngineToBuffer"/> instead.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.BeforeCopyPreviousState">
            <summary>
            Implements <see cref="T:Fusion.IBeforeCopyPreviousState"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.StateAuthorityChanged">
            <summary>
            Implements <see cref="T:Fusion.IStateAuthorityChanged"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.IsInterpolationDataPredicted">
            <inheritdoc cref="M:Fusion.NetworkRigidbodyBase.IsInterpolationDataPredicted"/>
        </member>
        <member name="T:Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags">
            <summary>
            Networked flags representing a 2D or 3D rigid body state and characteristics.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags.IsKinematic">
            <summary>
            Networked kinematic state.
            See also <see cref="P:UnityEngine.Rigidbody.isKinematic"/> or <see cref="P:UnityEngine.Rigidbody2D.isKinematic"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags.UseGravity">
            <summary>
            Networked <see cref="P:UnityEngine.Rigidbody.useGravity"/> state. Not used with 2D rigid bodies.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags.IsSleeping">
            <summary>
            Networked sleeping state.
            See also <see cref="M:UnityEngine.Rigidbody.IsSleeping"/> or <see cref="M:UnityEngine.Rigidbody2D.IsSleeping"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBase.WORD_COUNT_NRBB">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkRigidbodyBase"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbodyBase.BaseWordCount">
            <inheritdoc cref="P:Fusion.NetworkPositionRotation.BaseWordCount"/>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDrag">
            <summary>
            Reads from the field reserved to store the rigidbody drag on this object's networked data
            using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDrag(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody drag on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDrag(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody drag on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadAngularDrag">
            <summary>
            Reads from the field reserved to store the rigidbody angular drag on this object's networked data
            using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadAngularDrag(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody angular drag on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadAngularDrag(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody angular drag on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadMass">
            <summary>
            Reads from the field reserved to store the rigidbody mass on this object's networked data
            using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadMass(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody mass on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadMass(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from the field reserved to store the rigidbody mass on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadNetworkRigidbodyFlags">
            <summary>
            Reads from the field reserved to store the rigidbody flags on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadNetworkRigidbodyFlags(System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody flags on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadNetworkRigidbodyRawFlags">
            <summary>
            Reads from the field reserved to store the rigid body flags on this object's networked data
            and returns the raw word value that might also carry flags specific to 2D or 3D rigid bodies.
            See also <see cref="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            NetworkRigidbody.ReadNetworkRigidbodyFlags</see> or <see cref="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            NetworkRigidbody2D.ReadNetworkRigidbodyFlags</see>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadNetworkRigidbodyRawFlags(System.Int32*)">
            <summary>
            Reads from a field reserved to store the rigid body flags on the networked data pointed by <paramref name="ptr"/>
            and returns the raw word value that might also carry flags specific to 2D or 3D rigid bodies.
            See also <see cref="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            NetworkRigidbody.ReadNetworkRigidbodyFlags</see> or <see cref="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            NetworkRigidbody2D.ReadNetworkRigidbodyFlags</see>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDragsAndMass">
            <summary>
            Reads the values of a rigidbody drag, angular drag and mass field on this object's networked data
            using the default Runner position read accuracy.
            The values are returned as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDragsAndMass(System.Int32*)">
            <summary>
            Reads the values of a rigidbody drag, angular drag and mass field on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            The values are returned as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.ReadDragsAndMass(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads the values of a rigidbody drag, angular drag and mass field on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="readAccuracy"/>.
            The values are returned as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDrag(System.Single)">
            <summary>
            Writes the field reserved to store the rigidbody drag on this object's networked data
            using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDrag(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody drag on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDrag(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody drag on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteAngularDrag(System.Single)">
            <summary>
            Writes the field reserved to store the rigidbody angular drag on this object's networked data
            using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteAngularDrag(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody angular drag on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteAngularDrag(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody angular drag on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteMass(System.Single)">
            <summary>
            Writes the field reserved to store the rigidbody mass on this object's networked data
            using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteMass(System.Single,System.Int32*)">
            <summary>
            Writes to the field reserved to store the rigidbody mass on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position write accuracy.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteMass(System.Single,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to the field reserved to store the rigidbody mass on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags)">
            <summary>
            Writes to the field reserved to store the rigidbody flags on this object's networked data.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteNetworkRigidbodyFlags(Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags,System.Int32*)">
            <summary>
            Reads from the field reserved to store the rigidbody flags on the networked data pointed by <paramref name="ptr"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteNetworkRigidbodyRawFlags(System.Int32)">
            <summary>
            Writes to the field reserved to store the on this object's networked data.
            See also <see cref="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            NetworkRigidbody.ReadNetworkRigidbodyFlags</see> or <see cref="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            NetworkRigidbody2D.ReadNetworkRigidbodyFlags</see>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteNetworkRigidbodyRawFlags(System.Int32,System.Int32*)">
            <summary>
            Writes to the field reserved to store the on this object's networked data.
            See also <see cref="M:Fusion.NetworkRigidbody.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints@)">
            NetworkRigidbody.ReadNetworkRigidbodyFlags</see> or <see cref="M:Fusion.NetworkRigidbody2D.ReadNetworkRigidbodyFlags(System.Int32*,Fusion.NetworkRigidbodyBase.NetworkRigidbodyFlags@,UnityEngine.RigidbodyConstraints2D@)">
            NetworkRigidbody2D.ReadNetworkRigidbodyFlags</see>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDragsAndMass(UnityEngine.Vector3)">
            <summary>
            Writes the values of a rigidbody drag, angular drag and mass field on this object's networked data
            using the default Runner position read accuracy.
            The values must be provided as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDragsAndMass(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Reads the values of a rigidbody drag, angular drag and mass field on the networked data pointed
            by <paramref name="ptr"/> using the default Runner position read accuracy.
            The values must be provided as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyBase.WriteDragsAndMass(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Reads the values of a rigidbody drag, angular drag and mass field on the networked data pointed
            by <paramref name="ptr"/> using the defined <paramref name="writeAccuracy"/>.
            The values must be provided as the x, y and z values of a Vector3, respectively.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform">
            <summary>
            Replicates a Unity Transform's position and rotation states from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject to sync the position and rotation data.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            <remarks>
            Besides handling smooth interpolation of a target view transform, this behaviour also provides
            interpolated prediction error correction and special handling logic for teleports with controlled interpolation.
            </remarks>
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform._consecutiveInterp">
            <summary>
            Cached <see cref="T:Fusion.NetworkTransform.ConsecutiveStateInterp"/>.
            <see cref="F:Fusion.NetworkTransform._currInterpImpl"/> will point to this object if/when it
            is the interpolation implementation being used.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform.ConsecutiveStateInterp">
            <summary>
            Implements interpolation logic between two consecutive states, be them snapshots or not.
            This implementation does not perform smooth prediction error correction (see <see cref="T:Fusion.NetworkTransform.SmoothErrorCorrectionInterp"/>).
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.ConsecutiveStateInterp._nt">
            <summary>
            <see cref="T:Fusion.NetworkTransform"/> tracked by the implementation logic.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ConsecutiveStateInterp.Reset(Fusion.NetworkTransform)">
            <summary>
            Reset must be called to set or reset the tracked <see cref="T:Fusion.NetworkTransform"/>
            and/or to reset any cached state in the interpolation implementation, like when switching implementation.
            </summary>
            <param name="nt"></param>
        </member>
        <member name="T:Fusion.NetworkTransform.InterpolatedTransformParameters">
            <summary>
            Struct that provides relevant parameters when interpolating a
            view representation with position and rotation data between two
            known states, referred as 'From' and 'To'.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolationAlpha">
            <summary>
            Normalized factor that represents the exact point between From and To states
            at which the view should be displayed.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedPositionFrom">
            <summary>
            Position value at the From state.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedPositionTo">
            <summary>
            Position value at the To state.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedPosition">
            <summary>
            Position value interpolated between From (<see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedPositionFrom"/>)
            and To (<see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedPositionTo"/>) with factor <see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolationAlpha"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedPositionErrorCorrection">
            <summary>
            Computed value for smooth correction of prediction error.
            In order to apply it, add its value to the <see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedPosition"/>
            before setting the result to the view transform.
            The value will be <see cref="P:UnityEngine.Vector3.zero"/> if there is no prediction error
            or <see cref="F:Fusion.NetworkTransform.InterpolateErrorCorrection"/> is disabled.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedRotationFrom">
            <summary>
            Rotation value at the From state.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedRotationTo">
            <summary>
            Rotation value at the To state.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedRotation">
            <summary>
            Rotation value interpolated between From (<see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedRotationFrom"/>)
            and To (<see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.UninterpolatedRotationTo"/>) with factor <see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolationAlpha"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedRotationErrorCorrection">
            <summary>
            Computed value for smooth correction of prediction error.
            In order to apply it, multiply its value by the <see cref="F:Fusion.NetworkTransform.InterpolatedTransformParameters.InterpolatedRotation"/>
            before setting the result to the view transform.
            The value will be <see cref="P:UnityEngine.Quaternion.identity"/> if there is no prediction error
            or <see cref="F:Fusion.NetworkTransform.InterpolateErrorCorrection"/> is disabled.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform._currInterpImpl">
            <summary>
            Current <see cref="T:Fusion.NetworkTransform.IInterpolationImplementation"/> being used.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform._wasRenderedThisUpdate">
            <summary>
            If <see cref="M:Fusion.NetworkTransform.Render"/> was already called this update.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolationSpace">
            <summary>
            If the <see cref="F:Fusion.NetworkTransform.InterpolationTarget"/> should be interpolated in world space or in the local space of a networked parent.
            Interpolating in local space requires more computations, but gives more accurate visuals if/when a parent rotates. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolationTarget">
            <summary>
            The Transform object used for smooth view interpolation.
            Should be a non-physics GameObject, typically a child of this GameObject or a separate object without colliders.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransform.InvalidInterpolationTarget">
            <summary>
            If current interpolation target is considered invalid.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolateErrorCorrection">
            <summary>
            If the computed prediction error should be smoothly corrected on
            the <see cref="F:Fusion.NetworkTransform.InterpolationTarget">InterpolationTarget</see> according to
            the <see cref="F:Fusion.NetworkTransform.InterpolatedErrorCorrectionSettings">InterpolatedErrorCorrectionSettings</see>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.InterpolatedErrorCorrectionSettings">
            <summary>
            A set of parameters to tune the interpolated correction of prediction
            error to be applied on the <see cref="F:Fusion.NetworkTransform.InterpolationTarget">InterpolationTarget</see>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.UseLegacySharedModeInterpolation">
            <summary>
            If the legacy interpolation algorithm should be used in Shared Mode for this object.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.TargetInterpolationDelay">
            <summary>
            In shared mode, how much behind (in seconds) the remote client's interpolated
            view will try to stay from the latest snapshot available.
            The smaller the value, the snappier the interpolation will be and the higher
            the changes of extrapolations and eventual error corrections (interpolated). 
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.Spawned">
            <summary>
            Overrides <see cref="M:Fusion.NetworkBehaviour.Spawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.BeforeUpdate">
            <summary>
            Overrides <see cref="!:NetworkPositionRotation.BeforeUpdate"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.Render">
            <summary>
            Overrides <see cref="M:Fusion.SimulationBehaviour.Render"/>, computing the interpolated position and rotation values
            according to the <see cref="P:Fusion.NetworkBehaviour.InterpolationDataSource"/>, updating the prediction error correction
            and calling <see cref="M:Fusion.NetworkTransform.ApplyInterpolatedTransform(Fusion.NetworkTransform.InterpolatedTransformParameters@)"/> to apply the results to the <see cref="F:Fusion.NetworkTransform.InterpolationTarget"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.AfterTick">
            <summary>
            Implements <see cref="T:Fusion.IAfterTick"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ApplyInterpolatedTransform(Fusion.NetworkTransform.InterpolatedTransformParameters@)">
            <summary>
            Applies the interpolated position and rotation values and prediction error corrections
            computed on <see cref="M:Fusion.NetworkTransform.Render"/> to the <see cref="F:Fusion.NetworkTransform.InterpolationTarget"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.GetUninterpolatedWorldPositions(Fusion.InterpolationData@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Retrieves the world position values from the From and To states made
            available in the interpolation <paramref name="data"/>, setting them
            to <paramref name="posFrom"/> and <paramref name="posTo"/>, respectively.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.GetUninterpolatedWorldRotations(Fusion.InterpolationData@,UnityEngine.Quaternion@,UnityEngine.Quaternion@)">
            <summary>
            Retrieves the world rotation values from the From and To states made
            available in the interpolation <paramref name="data"/>, setting them
            to <paramref name="rotFrom"/> and <paramref name="rotTo"/>, respectively.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform._intermittentInterp">
            <summary>
            Cached <see cref="T:Fusion.NetworkTransform.IntermittentStateInterp"/>.
            <see cref="F:Fusion.NetworkTransform._currInterpImpl"/> will point to this object if/when it
            is the interpolation implementation being used.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform.IntermittentStateInterp">
            <summary>
            Implements interpolation logic between two snapshots that are not
            consecutive and/or are not consumed with a steady frequency.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.IntermittentStateInterp._nt">
            <summary>
            <see cref="T:Fusion.NetworkTransform"/> tracked by the implementation logic.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.IntermittentStateInterp.Reset(Fusion.NetworkTransform)">
            <summary>
            Reset must be called to set or reset the tracked <see cref="T:Fusion.NetworkTransform"/>
            and/or to reset any cached state in the interpolation implementation, like when switching implementation.
            </summary>
            <param name="nt"></param>
        </member>
        <member name="F:Fusion.NetworkTransform._legacyIntermittentInterp">
            <summary>
            Cached <see cref="T:Fusion.NetworkTransform.LegacyIntermittentStateInterp"/>.
            <see cref="F:Fusion.NetworkTransform._currInterpImpl"/> will point to this object if/when it
            is the interpolation implementation being used.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform.LegacyIntermittentStateInterp">
            <summary>
            Implements interpolation logic between two snapshots that are not
            consecutive and/or are not consumed with a steady frequency.
            This is a legacy implementation, check the latest and recommended
            intermittent interpolation logic on <see cref="T:Fusion.NetworkTransform.IntermittentStateInterp"/>/
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.LegacyIntermittentStateInterp._nt">
            <summary>
            <see cref="T:Fusion.NetworkTransform"/> tracked by the implementation logic.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.LegacyIntermittentStateInterp.Reset(Fusion.NetworkTransform)">
            <summary>
            Reset must be called to set or reset the tracked <see cref="T:Fusion.NetworkTransform"/>
            and/or to reset any cached state in the interpolation implementation, like when switching implementation.
            </summary>
            <param name="nt"></param>
        </member>
        <member name="F:Fusion.NetworkTransform._smoothErrorCorrectedInterp">
            <summary>
            Cached <see cref="T:Fusion.NetworkTransform.SmoothErrorCorrectionInterp"/>.
            <see cref="F:Fusion.NetworkTransform._currInterpImpl"/> will point to this object if/when it
            is the interpolation implementation being used.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransform.SmoothErrorCorrectionInterp">
            <summary>
            Uses a <see cref="T:Fusion.NetworkTransform.ConsecutiveStateInterp"/> instance to interpolate between two
            consecutive predicted states and performs smoothed prediction error correction.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransform.DefaultTeleportInterpolationVelocity">
            <summary>
            The interpolation velocity used when calling <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> and not specifying a value.
            By default, this value is <see cref="P:UnityEngine.Vector3.zero"/>.
            Some behaviours like <see cref="T:Fusion.NetworkRigidbody"/> and <see cref="T:Fusion.NetworkRigidbody2D"/> override
            this property to provide better default values, like the latest known velocity of the rigid body. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransform.DefaultTeleportInterpolationAngularVelocity">
            <summary>
            The interpolation angular velocity used when calling <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> and not specifying a value.
            By default, this value is <see cref="P:UnityEngine.Vector3.zero"/>.
            Some behaviours like <see cref="T:Fusion.NetworkRigidbody"/> and <see cref="T:Fusion.NetworkRigidbody2D"/> override
            this property to provide better default values, like the latest known angular velocity of the rigid body. 
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.AfterAllTicks(System.Boolean,System.Int32)">
            <inheritdoc cref="M:Fusion.NetworkRigidbodyBase.AfterAllTicks(System.Boolean,System.Int32)"/>
        </member>
        <member name="M:Fusion.NetworkTransform.CopyBackingFieldsToState(System.Boolean)">
            <inheritdoc cref="M:Fusion.NetworkRigidbodyBase.CopyBackingFieldsToState(System.Boolean)"/>
        </member>
        <member name="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Teleports the object to the provided position while making the networked state aware
            that the object was teleported and the view interpolation needs special handling.
            The <paramref name="position"/> is immediately set to the transform's position field
            and additional data is stored in order to interpolate the view object between the ticks.
            While interpolating the visual representation of the networked object TO a tick where a teleport happened,
            the object's latest state (tick when the teleport is performed) will not be used, as doing so would cause
            the interpolation target to visually interpolate along the teleported distance. Instead, the view will be
            interpolated between the FROM state (tick before the teleport) and an artificial position
            computed based on this FROM state and an interpolation velocity (see <paramref name="interpolationVel"/>),
            in order to emulate how the object would behave if the teleport had not been performed.
            </summary>
            <param name="position">The position which the object is being teleported to. </param>
            <param name="interpolationVel">
            The emulated velocity of the interpolation target while interpolating to a tick where a teleport happened.
            If null, the <see cref="P:Fusion.NetworkTransform.DefaultTeleportInterpolationVelocity"/> will be used.
            </param>
            <param name="interpolateBackwards">
            If the artificial position for teleport interpolation should be computed backwards (artificial From, based on the
            To state - the interpolation velocity) or forward (artificial To, based on the From state + interpolation velocity).
            </param>
        </member>
        <member name="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Teleports the object to the provided rotation while making the networked state aware
            that the object was teleported and the view interpolation needs special handling.
            The <paramref name="rotation"/> is immediately set to the transform's rotation field
            and additional data is stored in order to interpolate the view object between the ticks.
            While interpolating the visual representation of the networked object TO a tick where a teleport happened,
            the object's latest state (tick when the teleport is performed) will not be used, as doing so would cause
            the interpolation target to visually interpolate along the teleported rotation. Instead, the view will be
            interpolated between the FROM state (tick before the teleport) and an artificial rotation
            computed based on this FROM state and an interpolation angular velocity (see <paramref name="interpolationAngularVel"/>),
            in order to emulate how the object would behave if the teleport had not been performed.
            </summary>
            <param name="rotation">The rotation which the object is being teleported to. </param>
            <param name="interpolationAngularVel">
            The emulated angular velocity of the interpolation target while interpolating to a tick where a teleport happened.
            If null, the <see cref="P:Fusion.NetworkTransform.DefaultTeleportInterpolationAngularVelocity"/> will be used.
            </param>
            <param name="interpolateBackwards">
            If the artificial position for teleport interpolation should be computed backwards (artificial From, based on the
            To state - the interpolation velocity) or forward (artificial To, based on the From state + interpolation velocity).
            </param>
        </member>
        <member name="M:Fusion.NetworkTransform.TeleportToPositionRotation(UnityEngine.Vector3,UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Teleports the object to the provided position and rotation while making the networked state aware
            that the object was teleported and the view interpolation needs special handling.
            The <paramref name="rotation"/> is immediately set to the transform's rotation field
            and additional data is stored in order to interpolate the view object between the ticks.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> and <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more details about why and how
            the special interpolation handling is performed.
            </summary>
            <param name="position">The position which the object is being teleported to. </param>
            <param name="rotation">The rotation which the object is being teleported to. </param>
            <param name="interpolationVel">
            The emulated velocity of the interpolation target while interpolating to a tick where a teleport happened.
            If null, the <see cref="P:Fusion.NetworkTransform.DefaultTeleportInterpolationVelocity"/> will be used.
            </param>
            <param name="interpolationAngularVel">
            The emulated angular velocity of the interpolation target while interpolating to a tick where a teleport happened.
            If null, the <see cref="P:Fusion.NetworkTransform.DefaultTeleportInterpolationAngularVelocity"/> will be used.
            </param>
            <param name="interpolateBackwards">
            If the artificial position for teleport interpolation should be computed backwards (artificial From, based on the
            To state - the interpolation velocity) or forward (artificial To, based on the From state + interpolation velocity).
            </param>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnSpawned">
            <summary>
            Implements <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSpawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnUpdate">
            <summary>
            Implements <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnUpdate"/> and, by default, calls
            <see cref="M:Fusion.NetworkTransform.PredictedSpawnCacheTransformState"/>.
            Behaviours that change the Transform state of this predict-spawned object should either be ordered
            before NetworkTransform or call <see cref="M:Fusion.NetworkTransform.PredictedSpawnCacheTransformState"/> after doing so. 
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnRender">
            <summary>
            Implements <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSpawned"/>.
            If overriding this method in an inheritor, the base method should be called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnFailed">
            <summary>
            Implements <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnFailed"/> and does nothing by default.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnSuccess">
            <summary>
            Implements <see cref="M:Fusion.IPredictedSpawnBehaviour.PredictedSpawnSuccess"/> and does nothing by default.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.PredictedSpawnCacheTransformState">
            <summary>
            If this object is a predicted spawn, caches the current transform
            state for interpolated rendering and prediction error correction.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransform.WORD_COUNT_NT">
            <summary>
            Number of words used by a <see cref="T:Fusion.NetworkTransform"/> instance on its networked data,
            including all inherited fields.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransform.BaseWordCount">
            <inheritdoc cref="P:Fusion.NetworkPositionRotation.BaseWordCount"/>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationVelocity">
            <summary>
            Reads from this object's networked data field holding the interpolation velocity
            (used on position teleports) using the default Runner position read accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationVelocity(System.Int32*)">
            <summary>
            Reads from a field holding the interpolation velocity (used on position teleports)
            from the networked data pointed by <paramref name="ptr"/> using the default Runner position read accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from a field holding the interpolation velocity (used on position teleports)
            from the networked data pointed by <paramref name="ptr"/> with the defined <paramref name="readAccuracy"/>.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationAngularVelocity">
            <summary>
            Reads from this object's networked data field holding the interpolation angular velocity
            (used on position teleports) using the default Runner position read accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationAngularVelocity(System.Int32*)">
            <summary>
            Reads from a field holding the interpolation angular velocity (used on position teleports)
            from the networked data pointed by <paramref name="ptr"/> using the default Runner position read accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportInterpolationAngularVelocity(System.Int32*,Fusion.ReadAccuracy)">
            <summary>
            Reads from a field holding the interpolation angular velocity (used on position teleports)
            on the networked data pointed by <paramref name="ptr"/> with the defined <paramref name="readAccuracy"/>.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportPositionTick">
            <summary>
            Reads from this object's field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportPositionTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportRotationTick">
            <summary>
            Reads from this object's field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportRotationTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportPositionInterpolateBackwards">
            <summary>
            Reads from this object's field holding information about the last <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call
            and if should be interpolated forward (emulated To based on From state + interpolation) or backwards
            (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportPositionInterpolateBackwards(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/> a field holding information about the last
            <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call and if should be interpolated forward (emulated To based on From state + interpolation)
            or backwards (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportRotationInterpolateBackwards">
            <summary>
            Reads from this object's field holding information about the last <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call
            and if should be interpolated forward (emulated To based on From state + interpolation) or backwards
            (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadTeleportRotationInterpolateBackwards(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/> a field holding information about the last
            <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call and if should be interpolated forward (emulated To based on From state + interpolation)
            or backwards (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadPositionChangedTick">
            <summary>
            Reads from this object's field holding the tick number when the written position value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadPositionChangedTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number when the written position value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadRotationChangedTick">
            <summary>
            Reads from this object's field holding the tick number when the written rotation value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadRotationChangedTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number when the written rotation value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadPositionStoppedChangingTick">
            <summary>
            Reads from this object's field holding the tick number when the written position value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadPositionStoppedChangingTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number when the written position value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadRotationStoppedChangingTick">
            <summary>
            Reads from this object's field holding the tick number when the written rotation value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.ReadRotationStoppedChangingTick(System.Int32*)">
            <summary>
            Reads from the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number when the written rotation value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationVelocity(UnityEngine.Vector3)">
            <summary>
            Writes to this object's networked data field holding the interpolation velocity
            (used on position teleports) using the default Runner position write accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationVelocity(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to a field holding the interpolation velocity (used on position teleports)
            on the networked data pointed by <paramref name="ptr"/> using the default Runner position write accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationVelocity(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to a field holding the interpolation velocity (used on position teleports)
            from the networked data pointed by <paramref name="ptr"/> with the defined <paramref name="writeAccuracy"/>.
            See <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3)">
            <summary>
            Writes to this object's networked data field holding the interpolation angular velocity
            (used on position teleports) using the default Runner position write accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3,System.Int32*)">
            <summary>
            Writes to a field holding the interpolation angular velocity (used on position teleports)
            on the networked data pointed by <paramref name="ptr"/> using the default Runner position write accuracy.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3,System.Int32*,Fusion.WriteAccuracy)">
            <summary>
            Writes to a field holding the interpolation angular velocity (used on position teleports)
            from the networked data pointed by <paramref name="ptr"/> with the defined <paramref name="writeAccuracy"/>.
            See <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> for more information on how this value is used.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportPositionTick(System.Int32)">
            <summary>
            Writes this object's field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportPositionTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportRotationTick(System.Int32)">
            <summary>
            Writes this object's field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportRotationTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>
            a field holding the tick number where <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> was last called.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportPositionInterpolateBackwards(System.Boolean)">
            <summary>
            Writes to this object's field holding information about the last <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call
            and if should be interpolated forward (emulated To based on From state + interpolation) or backwards
            (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportPositionInterpolateBackwards(System.Int32*,System.Boolean)">
            <summary>
            Writes the networked data pointer by <paramref name="ptr"/>, on a field holding information about the last
            <see cref="M:Fusion.NetworkTransform.TeleportToPosition(UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call and if should be interpolated forward (emulated To based on From state + interpolation)
            or backwards (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportRotationInterpolateBackwards(System.Boolean)">
            <summary>
            Writes to this object's field holding information about the last <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call
            and if should be interpolated forward (emulated To based on From state + interpolation) or backwards
            (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteTeleportRotationInterpolateBackwards(System.Int32*,System.Boolean)">
            <summary>
            Writes to this object's field holding information about the last <see cref="M:Fusion.NetworkTransform.TeleportToRotation(UnityEngine.Quaternion,System.Nullable{UnityEngine.Vector3},System.Boolean)"/> call
            and if should be interpolated forward (emulated To based on From state + interpolation) or backwards
            (Emulated From based on To state - interpolation).
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WritePositionChangedTick(System.Int32)">
            <summary>
            Writes to this object's field holding the tick number when the written position value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WritePositionChangedTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>, on
            a field holding the tick number when the written position value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteRotationChangedTick(System.Int32)">
            <summary>
            Writes to this object's field holding the tick number when the written rotation value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteRotationChangedTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>, on
            a field holding the tick number when the written rotation value changed.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WritePositionStoppedChangingTick(System.Int32)">
            <summary>
            Writes to this object's field holding the tick number when the written position value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WritePositionStoppedChangingTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>, on
            a field holding the tick number when the written position value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteRotationStoppedChangingTick(System.Int32)">
            <summary>
            Writes to this object's field holding the tick number when the written rotation value stopped changing.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransform.WriteRotationStoppedChangingTick(System.Int32,System.Int32*)">
            <summary>
            Writes to the networked data pointer by <paramref name="ptr"/>, on
            a field holding the tick number when the written rotation value stopped changing.
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController">
            <summary>
            Provides custom API and state replication for collider-based character controller movement (not related to Unity's CharacterController type).
            Replicates both the internal state (Velocity, MaxSpeed, etc) and the Unity Transform data from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject to control movement and sync the position and/or rotation accurately, including client-side prediction.
            <para>Usage - For basic prototyping call the following methods:</para>
            <code>NetworkCharacterController.Move()<br/>
            NetworkCharacterController.Jump()</code>
            <para>For more advanced uses, call only the movement query to get full surface movement data (<see cref="T:Fusion.NetworkCharacterController.Movement"/>), 
            and implement bespoke Move/Steering:</para>
            <code>NetworkCharacterController.Jump()</code>
            <para>A <see cref="T:Fusion.NetworkObject"/> is required.
            Not to be combined with either <see cref="T:Fusion.NetworkTransformObsolete"/> nor <see cref="T:Fusion.NetworkRigidbodyObsolete"/>. These are mutually-exclusive options.</para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.ICallbacks">
            <summary>
            Collision and trigger callback interface that can optionally be passed to the movement query. 
            Common uses: bypass a contact, apply a contact force to the target (can also be achieved just by adding a kinematic Rigidbody to the Character Controller.
            </summary>
        </member>
        <member name="M:Fusion.NetworkCharacterController.ICallbacks.OnCharacterCollision3D(Fusion.NetworkCharacterController.Hit)">
            <summary>
            Called for all contacts with a non-trigger collider that penetrates more than <see cref="F:Fusion.NetworkCharacterController.Configuration.AllowedPenetration"/>. 
            <param name="other"><see cref="T:Fusion.NetworkCharacterController.Hit"/> data about the collision</param>
            </summary>
        </member>
        <member name="M:Fusion.NetworkCharacterController.ICallbacks.OnCharacterTrigger3D(Fusion.NetworkCharacterController.Hit)">
            <summary>
            Called for all contacts with a trigger collider. Not affected by <see cref="F:Fusion.NetworkCharacterController.Configuration.AllowedPenetration"/>.
            <param name="other"><see cref="T:Fusion.NetworkCharacterController.Hit"/> data about the trigger collision</param>
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.Hit">
            <summary>
            Hit data passed as parameters to <see cref="T:Fusion.NetworkCharacterController.ICallbacks"/> methods. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Hit.Collider">
            <summary>
            The other game object collider in touch with the Character Controller.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Hit.Normal">
            <summary>
            The normal direction of the collision.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Hit.Penetration">
            <summary>
            The penetration magnitude.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Hit.IsBump">
            <summary>
            True in case this collision is considered a bump (<see cref="F:Fusion.NetworkCharacterController.Configuration.BumpBehavior"/>).
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.BumpBehavior">
            <summary>
            What to do with collisions that are considered a bump.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.BumpBehavior.AlwaysContact">
            <summary>
            Collision always affects this Character Controller, no matter the movement situation.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.BumpBehavior.IgnoreOnStanding">
            <summary>
            Automatically ignore collisions when character is standing.
            (the Other NetworkCharacterController will still be affected and not allowed penetrate)
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.BumpBehavior.IgnoreOnBackside">
            <summary>
            (Not implemented yet!)
            Automatically ignore collisions when collision is from sides or back.
            (the Other NetworkCharacterController will still be affected and not allowed penetrate)
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.MovementType">
            <summary>
            Movement type computed by the movement query based on collisions and surface tangents.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.MovementType.None">
            <summary>
            No desired movement, and standing on a ground.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.MovementType.FreeFall">
            <summary>
            No ground or slope collisions (there may be a collision on the upper part).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.MovementType.SlopeFall">
            <summary>
            No collision qualifies as grounded (angle between up and normal is smaller or equals to max slope).
            At least one collision that qualifies as slope (angle between up and surface normal is larger than max slope).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.MovementType.Horizontal">
            <summary>
            There's a desired movement direction.
            At least one collision qualifies as grounded (angle between up and normal is smaller or equals to max slope).
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.Configuration">
            <summary>
            Configuration data used both by ComputeRawMovement and the prototype-grade Move and ComputeRawSteering methods.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.AllowedPenetration">
            <summary>
            Helps stabilize grounded state when walking over slightly bumpy geometry. Influences collision and trigger callbacks.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.PenetrationCorrection">
            <summary>
            How much penetration to correct each frame (used only by Move and ComputeRawSteering)
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.BumpBehavior">
            <summary>
            <see cref="F:Fusion.NetworkCharacterController.Configuration.BumpBehavior"/> for collisions with this Character Controller.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.LayerMask">
            <summary>
            Only colliders in this layermask will be considered by the movement query.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.TriggerInteraction">
            <summary>
            Whereas to also compute triggers or not.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.AirControl">
            <summary>
            Should player keep control when in FreeFall (used only by Move and ComputeRawSteering).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.Acceleration">
            <summary>
            When moving, velocity is incremented by this factor over time (used only by Move and ComputeRawSteering).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.Braking">
            <summary>
            When stopped moving, velocity is decremented by this factor over time (used only by Move and ComputeRawSteering).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.BaseJumpImpulse">
            <summary>
            Vertical impulse applied when Jump() is called without an overhauling impulse passed (used only by Jump()).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.MaxSpeed">
            <summary>
            Horizontal velocity is clamped by this magnitude (used only by Move and ComputeRawSteering).
            This will only be used to initialize the corresponding MaxSpeed networked property, which can be changed in runtime.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.MaxSlope">
            <summary>
            Horizontal velocity is clamped by this magnitude (used only by Move and ComputeRawSteering).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration.MaxSlopeSpeed">
            <summary>
            Slope-fall velocity is clamped by this magnitude (used only by Move and ComputeRawSteering).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Configuration._gravity">
            <summary>
            Non-networked gravity (used only by Move and ComputeRawSteering).
            In case variable gravity is required, the recommendation is to implement custom Move and RawSteering methods.
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.Configuration.Gravity">
            <summary>
            Non-networked gravity (used only by Move and ComputeRawSteering).
            In case variable gravity is required, the recommendation is to implement custom Move and RawSteering methods.
            </summary>
        </member>
        <member name="T:Fusion.NetworkCharacterController.Movement">
            <summary>
            Result of a movement query.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Type">
            <summary>
            Recommended type of movement based on found collisions.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.NearestNormal">
            <summary>
            Surface normal of the nearest collision.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.AvgNormal">
            <summary>
            Average normal of all collisions.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.GroundNormal">
            <summary>
            Surface normal of the closest collision that qualifies as ground, if any.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Tangent">
            <summary>
            Surface tangent (recommended movement direction) in case there's a desired direction passed.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.SlopeTangent">
            <summary>
            Surface tangent (recommended movement direction) in case of a slope (based on gravity).
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Correction">
            <summary>
            Full correction vector to move out of collisions.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Penetration">
            <summary>
            Magnitude of the penetration over the nearest normal.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Grounded">
            <summary>
            True if at least one collision (not necessarily closest) qualifies as ground.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Movement.Contacts">
            <summary>
            Total number of collisions found in this execution of the movement query.
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController._collider">
            <summary>
            The Collider object used for the movement query (to grab surface normals, penetration correction, etc).
            Recommended to be a child of this Character Controller.
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.PositionWordOffset">
            <summary>
            Internal use for automatic Area-of-Interest management. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.Grounded">
            <summary>
            Networked current grounded state (used only by Move and COmputeRawSteering) 
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.Jumped">
            <summary>
            Networked current jumped state (used only by Move and ComputeRawSteering to avoid clamping a jump speed when on the first subsequent query the collider still touches the ground) 
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.MaxSpeed">
            <summary>
            Networked current max speed (used only by Move and ComputeRawSteering to clamp horizontal components of Velocity) 
            </summary>
        </member>
        <member name="P:Fusion.NetworkCharacterController.Velocity">
            <summary>
            Networked current velocity (used only by Move and ComputeRawSteering to move the Character Controller) 
            </summary>
        </member>
        <member name="F:Fusion.NetworkCharacterController.Config">
            <summary>
            <see cref="T:Fusion.NetworkCharacterController.Configuration"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkCharacterController.Jump(System.Boolean,System.Nullable{System.Single})">
            <summary>
            Basic implementation of a jump impulse (immediately integrates a vertical component to Velocity).
            <param name="ignoreGrounded">Jump even if not in a grounded state.</param>
            <param name="impulse">Optional, if null Config.BaseImpulse will be used.</param>
            </summary>
        </member>
        <member name="M:Fusion.NetworkCharacterController.Move(UnityEngine.Vector3,Fusion.NetworkCharacterController.ICallbacks,System.Nullable{UnityEngine.LayerMask})">
            <summary>
            Basic implementation of a full Move.
            Performs a movement query, uses its result to compute new Velocity, then applies penetration corrections + velocity integration into the transform position.
            Does not change Rotation.
            <param name="direction">Intended movement direction, subject to movement query + acceleration.</param>
            <param name="callback">Optional custom callbacks object.</param>
            <param name="layerMask">Optional layermask. If not passed, the default one from Config will be used</param>
            </summary>
        </member>
        <member name="M:Fusion.NetworkCharacterController.ComputeRawMovement(UnityEngine.Vector3,Fusion.NetworkCharacterController.ICallbacks,System.Nullable{UnityEngine.LayerMask})">
            <summary>
            Static query for surface movement data.
            Does not modify any data on state (neither transform, nor self).
            <param name="direction">Intended movement direction. WIll be used to compute surface tangents.</param>
            <param name="callback">Optional custom callbacks object.</param>
            <param name="layerMask">Optional layermask. If not passed, the default one from Config will be used</param>
            <returns>The <see cref="T:Fusion.NetworkCharacterController.Movement"/> results</returns>
            </summary>
        </member>
        <member name="F:Fusion.NetworkRigidbodyBaseObsolete.SyncDragAndMass">
            <summary>
            Enables syncing of Drag, AngularDrag and Mass values.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbodyObsolete">
            <summary>
            Replicates a Unity Rigidbody state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject with a Rigidbody component.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbodyObsolete.Rigidbody">
            <summary>
            Reference of the Rigidbody associated with this <see cref="T:Fusion.NetworkRigidbodyObsolete"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyObsolete.ReadBufferAndConvertToWorldSpace(System.Int32)">
            <summary>
            Reads the TRS values from state buffer for this tick, and converts them to world space if using <see cref="F:Fusion.Spaces.Local"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRigidbodyObsolete2D">
            <summary>
            Replicates a Unity Rigidbody state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject with a Rigidbody component.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRigidbodyObsolete2D.Rigidbody">
            <summary>
            Reference of the Rigidbody associated with this <see cref="T:Fusion.NetworkRigidbodyObsolete"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRigidbodyObsolete2D.ReadBufferAndConvertToWorldSpace(System.Int32)">
            <summary>
            Reads the TRS values from state buffer for this tick, and converts them to world space if using <see cref="F:Fusion.Spaces.Local"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkTransformAnchor">
            <summary>
            Replicates Unity parenting. To network parent changes, the new parent must either be null or have a <see cref="T:Fusion.NetworkTransformAnchor"/> or class derived from that on the GameObject, 
            and the GameObject being re-parented also requires a <see cref="T:Fusion.NetworkTransformAnchor"/> based Component.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.PARENT_OFFSET">
            <summary>
            The Ptr offset for the memory position of the Parent info. The parenting info is 2 words (8 bytes).
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.TELE_PAR_OFFSET">
            <summary>
            The Ptr offset for the secondary teleport parent information. This parent is used by the lerp TO target leading up to the teleport. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.POSITION_OFFSET">
            <summary>
            Technically, an Anchor does NOT hold position data.
            However, NetworkAreaOfInterestBehaviour used to inherit from this class and this was problematic.
            Now, instead, it inherits from NetworkAreaOfInterestBehaviour, so we need to have a PositionWordOffset
            and leave space for a position field, even though it does not use it.
            It is possible for inheritors of this class (like NetworkTransform) to have a "negative" initial offset
            and overlap with this position field.
            This whole thing was necessary to not break backwards compatibility while the transform-related behaviors are refactored.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransformAnchor.PositionWordOffset">
            <summary>
            Gets the Ptr offset of the Position values in allocated memory.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.ANCHOR_WORD_COUNT">
            <summary>
            The total number of words used by <see cref="T:Fusion.NetworkTransformAnchor"/>. Derived classes using allocated memory should start their Ptr offsets using this value.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor._interpolationTarget">
            <summary>
            The Transform object used for interpolation.
            Should be a non-physics GameObject. Typically a child of this Rigidbody, or a separate object without colliders.
             The runner/simulation with State Authority will not interpolate if target is null or the same GameObject as the Rigidbody, 
             as this will conflict with the PhysX simulation.
            </summary>
            
        </member>
        <member name="P:Fusion.NetworkTransformAnchor.IsValidInterpolationTarget">
            <summary>
            Used by the inspector gui to determine if the supplied transform is acceptable. If false will show a warning box.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransformAnchor.InterpolationTarget">
            <summary>
            The Transform object used for interpolation.
            Should be a non-physics GameObject. Typically a child of this GameObject without colliders, or a separate GameObject without colliders.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.DetachInterpTarget">
            <summary>
            EXPERIMENTAL: To improve interpolation of scaling, the interpolation target is detached from its <see cref="T:Fusion.NetworkObject"/>.
            Only check this if you are syncing scaling. 
            When re-parenting, this component's <see cref="P:Fusion.NetworkTransformAnchor.InterpolationTarget"/> will re-parent to the parent's <see cref="P:Fusion.NetworkTransformAnchor.InterpolationTarget"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor.SyncParent">
            <summary>
            Indicates if Transform.parent will be synced. Parent syncing requires the parent of this object either be null or have a <see cref="T:Fusion.NetworkTransformAnchor"/> component.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformAnchor._transform">
            <summary>
            Cached GameObject.transform reference.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransformAnchor.Copy2EngineAnchorState">
            <summary>
            
            </summary>
            <returns>Returns true if the parent has changed.</returns>
        </member>
        <member name="M:Fusion.NetworkTransformAnchor.GetParentsForInterpolation(Fusion.NetworkTransformAnchor,Fusion.NetworkRunner,System.Boolean,Fusion.InterpolationData@,System.Boolean@,System.Boolean@)">
            <summary>
            If using local space, tries to get the To and From parents. 
            If valid parents are found, they are forced to run Render() - as parents should always interpolate before children.
            </summary>
            <param name="fromParentIsValid">If a parent value has been serialized. Invalid means unknown parent.</param>
            <param name="toParentIsValid">If a parent value has been serialized. Invalid means unknown parent.</param>
            <returns>(From Parent, To Parent)</returns>
        </member>
        <member name="T:Fusion.NetworkTransformObsolete">
            <summary>
            Replicates a Unity Transform state from the <see cref="P:Fusion.NetworkObject.StateAuthority"/> to all other peers.
            Add this component to a GameObject to sync the position and/or rotation.
            A <see cref="T:Fusion.NetworkObject"/> is required on this GameObject or a parent of this GameObject.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.POSITION_OFFSET">
            <summary>
            The Ptr offset location of the position values in allocated memory.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.ROTATION_OFFSET">
            <summary>
            The Ptr offset location of the rotation values in allocated memory.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.SCALE_OFFSET">
            <summary>
            The Ptr offset location of the local scale values in allocated memory.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.TELE_POS_OFFSET">
            <summary>
            The Ptr offset for the secondary teleport position information. This position is used as the lerp TO target leading up to the teleport. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.TELE_ROT_OFFSET">
            <summary>
            The Ptr offset for the secondary teleport rotation information. This rotation is used as the lerp TO target leading up to the teleport. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.TELE_SCL_OFFSET">
            <summary>
            The Ptr offset for the secondary teleport scale information. This scale is used as the lerp TO target leading up to the teleport. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.TELEPORT_OFFSET">
            <summary>
            The Ptr offset of the teleport increment value. Increases by one every tick a teleport occurs.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.BASE_WORD_COUNT">
            <summary>
            The total number of words used by <see cref="T:Fusion.NetworkTransformObsolete"/>. Derived classes using allocated memory should start their Ptr offsets using this value.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransformObsolete.PositionWordOffset">
            <summary>
            Gets the Ptr offset of the Position values in allocated memory.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.SyncScale">
            <summary>
            Indicates if Scale should be included in Transform sync and interpolation (when enabled).
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.Space">
            <summary>
            Select if the synced state uses World or Local position and rotation values.
            </summary>
        </member>
        <member name="P:Fusion.NetworkTransformObsolete.TeleportCounter">
            <summary>
            The frame of the next Teleport action.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete.LastInterpolatedAtTime">
            <summary>
            Stores the last UnityEngine.Time.time when interpolation was run for this component. Used to ensure interpolation is only run once per screen refresh.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransformObsolete.WriteReadVector3(UnityEngine.Vector3,Fusion.WriteAccuracy,Fusion.ReadAccuracy)">
            <summary>
            Emulates the accuracy loss when writing and reading a Vector3 to/from a buffer, according to the given accuracies.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransformObsolete.WriteReadQuaternion(UnityEngine.Quaternion,Fusion.WriteAccuracy,Fusion.ReadAccuracy)">
            <summary>
            Emulates the accuracy loss when writing and reading a Quaternion to/from a buffer, according to the given accuracies.
            </summary>
        </member>
        <member name="F:Fusion.NetworkTransformObsolete._queuedTeleport">
            <summary>
            Most recent unconsumed Teleport() command.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransformObsolete.Teleport(System.Nullable{UnityEngine.Vector3},System.Nullable{Fusion.Rotation},System.Nullable{UnityEngine.Vector3},System.Boolean,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})">
            <summary>
            Teleport indicates that objects should not interpolate from the previous state to this new state.
            </summary>
            <param name="position">Sets the position or rigidbody.position to this value prior to state sync.</param>
            <param name="rotation">If not null, Sets the position or rigidbody.rotation to this value prior to state sync. </param>
            <param name="localScale">If not null, Sets the localScale to this value prior to state sync. 
            Accepts a Quaternion, Euler (Vector3), or 2d Z value (float)</param>
            <param name="reset">Resets velocity, angular velocity, and controller states to default if applicable. 
            Typically set to true if teleport is used for a respawn.</param>
            <param name="velocity">Sets the velocity after teleport. Ignored if this is not a Rigidbody or CharacterController. Overrides reset.</param>
            <param name="angularVelocity">Sets the angular velocity after teleport. Ignored if this is not a Rigidbody. Overrides reset.</param>
        </member>
        <member name="M:Fusion.NetworkTransformObsolete.PreTeleport">
            <summary>
            Captures the current state as the interpolation lerp TO target leading up to a teleport, and flags the next tick as a teleport.
            Call this BEFORE making any TRS changes to the synced transform which represent the teleport.
            For continuously moving rigidbodies, it is preferable to call the explicit Teleport() method.
            </summary>
        </member>
        <member name="M:Fusion.NetworkTransformObsolete.ApplyQueuedTeleport">
            <summary>
            Applies the latest unconsumed Teleport() call after the Forward simulation is complete, and before the TRS state is captured.
            </summary>
        </member>
        <member name="T:Fusion.NestedComponentUtilities">
            <summary>
            Tools to replace GetComponent variants that respects nested objects.
            These are used to find components of a NetworkedObjects without also finding components that belong to parent or child NetworkedObjects.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetParentComponent``1(UnityEngine.Transform)">
            <summary>
            Find T on supplied transform or any parent. Unlike GetComponentInParent, GameObjects do not need to be active to be found.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInParents``1(UnityEngine.Transform,System.Collections.Generic.List{``0})">
            <summary>
            Returns all T found between the child transform and its root. Order in List from child to parent, with the root/parent most being last.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentInParent``2(UnityEngine.Transform)">
            <summary>
            Same as GetComponentInParent, but will always include inactive objects in search. 
            Will also stop recursing up the hierarchy when the StopOnT is found.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentInParents``2(UnityEngine.Transform)">
            <summary>
            UNTESTED
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInParents``2(UnityEngine.Transform,System.Collections.Generic.List{``0})">
            <summary>
            Finds components of type T on supplied transform, and every parent above that node, inclusively stopping on node StopT component.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``2(UnityEngine.Transform,System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with component of the StopT type.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``1(UnityEngine.Transform,System.Collections.Generic.List{``0},System.Boolean,System.Type[])">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with any component of the types in the stopOn array. 
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.GetNestedComponentsInChildren``3(UnityEngine.Transform,System.Boolean,System.Collections.Generic.List{``0})">
            <summary>
            Same as GetComponentsInChildren, but will not recurse into children with component of the StopT type.
            </summary>
            <typeparam name="T">Cast found components to this type. Typically Component, but any other class/interface will work as long as they are assignable from SearchT.</typeparam>
            <typeparam name="SearchT">Find components of this class or interface type.</typeparam>
            <typeparam name="StopT">When this component is found, no further recursing will be performed on that node.</typeparam>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``1(UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation, and does produce garbage collection.
            </summary>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``1(UnityEngine.SceneManagement.Scene,System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation which should not be run every update.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scene"></param>
            <param name="list">Supplied list that will be populated by this find.</param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``2(UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slow operation, and does produce garbage collection.
            </summary>
            <typeparam name="T">The type being searched for.</typeparam>
            <typeparam name="CastT">Casts all found objects to this type, and returns collection of this type. Objects that fail cast are excluded.</typeparam>
            <param name="scene"></param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="M:Fusion.NestedComponentUtilities.FindObjectsOfTypeInOrder``2(UnityEngine.SceneManagement.Scene,System.Collections.Generic.List{``1},System.Boolean)">
            <summary>
            Find All instances of Component type in a scene. Attempts to respect the hierarchy of the scene objects to produce a more deterministic order.
            This is a slower operation and should not be run every update.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="CastT"></typeparam>
            <param name="scene"></param>
            <param name="list">Supplied list that will be filled with found objects.</param>
            <param name="includeInactive">Whether results should include inactive components.</param>
        </member>
        <member name="T:Fusion.INetworkInput">
            <summary>
            Flag interface for custom NetworkInput structs.
            </summary>
        </member>
        <member name="T:Fusion.NetworkInput">
            <summary>
            Translates <see cref="T:Fusion.INetworkInput"/> structs and represents them in Fusions's unsafe allocated memory.
            </summary>
        </member>
        <member name="P:Fusion.NetworkInput.Data">
            <summary>
            Returns pointer to the <see cref="T:Fusion.INetworkInput"/> struct data in memory.
            </summary>
        </member>
        <member name="M:Fusion.NetworkInput.TryGet``1(``0@)">
            <summary>
            Tries to export data as the indicated T <see cref="T:Fusion.INetworkInput"/> struct.
            </summary>
        </member>
        <member name="M:Fusion.NetworkInput.TrySet``1(``0)">
            <summary>
            Tries to import data from a <see cref="T:Fusion.INetworkInput"/> struct.
            </summary>
        </member>
        <member name="F:Fusion.BVH._sweepNodes">
            <summary>
            Call this to batch-optimize any object-changes notified through 
            ssBVHNode.refit_ObjectChanged(..). For example, in a game-loop, 
            call this once per frame.
            </summary>
        </member>
        <member name="M:Fusion.BVH.BoundsFromSphere(UnityEngine.Vector3,System.Single)">
            <summary>
            Call this when you wish to update an object. This does not update straight away, but marks it for update when Optimize() is called
            </summary>
            <param name="toUpdate"></param>
        </member>
        <member name="M:Fusion.BVH.#ctor(Fusion.Mapper,System.Int32,System.Collections.Generic.List{Fusion.HitboxRoot},System.Single)">
            <summary>
            initializes a BVH with a given nodeAdaptor, and object list.
            </summary>
        </member>
        <member name="M:Fusion.BVHNode.TryRotate(Fusion.BVH)">
            <summary>
            tryRotate looks at all candidate rotations, and executes the rotation with the best resulting SAH (if any)
            </summary>
            <param name="bvh"></param>
        </member>
        <member name="T:Fusion.Hitbox">
            <summary>
            Represents a single lag-compensated collider.
            Multiple component instances can be added anywhere in the hierarchy of a <see cref="T:Fusion.NetworkObject"/> which includes a <see cref="T:Fusion.HitboxRoot"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Type">
            <summary>
            The collision geometry type for this <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.SphereRadius">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Sphere"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.BoxExtents">
            <summary>
            When <see cref="F:Fusion.Hitbox.Type"/> is set to <see cref="F:Fusion.HitboxTypes.Box"/>, this defines the local-space geometry for narrow-phase checks.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Offset">
            <summary>
            This <see cref="T:Fusion.Hitbox"/>'s local-space offset from its GameObject position.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.Root">
            <summary>
            Reference to the top-level <see cref="T:Fusion.HitboxRoot"/> component for this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxIndex">
            <summary>
            The index of this hitbox in the <see cref="F:Fusion.HitboxRoot.Hitboxes"/> array on <see cref="F:Fusion.Hitbox.Root"/>.
            The value is set by the root when initializing the nested hitboxes with <see cref="M:Fusion.HitboxRoot.InitHitboxes"/>.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxMask">
            <summary>
            Mask to access the state of this hitbox on the root.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.HitboxActive">
            <summary>
            Get or set the state of this Hitbox.
            If a hitbox or its HitboxRoot are not active, it will not be hit by lag-compensated queries.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.ColliderIndex">
            <summary>
            Index assigned to the collider of this hitbox on the lag-compensated snapshots.
            </summary>
        </member>
        <member name="P:Fusion.Hitbox.Position">
            <summary>
            World-space position (includes Offset) of this <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.Hitbox.GizmosColor">
            <summary>
            Color used when drawing gizmos for this hitbox.
            </summary>
        </member>
        <member name="M:Fusion.Hitbox.OnDrawGizmos">
            <summary>
            Draws this hitbox gizmo on Unity editor.
            </summary>
        </member>
        <member name="T:Fusion.HitOptions">
            <summary>
            Per-query options for lag compensation (both raycast and overlap).
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.None">
            <summary>
            Default, no extra options.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.IncludePhysX">
            <summary>
            Add this to include checks against PhysX colliders.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.SubtickAccuracy">
            <summary>
            Subtick accuracy query (exactly like seen by player).
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.DetailedHit">
            <summary>
            Compute surface normal and distance of raycast hit.
            </summary>
        </member>
        <member name="F:Fusion.HitOptions.IgnoreInputAuthority">
            <summary>
            If the <see cref="T:Fusion.HitboxRoot"/> objects which the player performing the query
            (if specified) has input authority over should be ignored by the query.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensationSettings">
            <summary>
            Settings for lag compensation history.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.HitboxBufferSize">
            <summary>
            Hitbox snapshot history size in ticks.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.HitboxCapacity">
            <summary>
            Hitbox capacity per snapshot.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.ExpansionFactor">
            <summary>
            Broadphase BVH node expansion factor (default 20%) for leaf nodes, so updates are not too frequent.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.Optimize">
            <summary>
            Optional: tries to optimize broadphase BVH every update. May be removed in the future.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.DebugBroadphase">
            <summary>
            Enable gizmos for current BVH nodes.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.DebugHistory">
            <summary>
            Enable gizmos for hitbox history.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.DebugColor">
            <summary>
            Server editor gizmo color for BVH nodes.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.ClientDebugColor">
            <summary>
            Client editor gizmo color for BVH nodes.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensationSettings.HistoryDebugColor">
            <summary>
            Editor gizmo color for history representations.
            </summary>
        </member>
        <member name="T:Fusion.HitboxManager">
            <summary>
            Entry point for lag compensated <see cref="T:Fusion.Hitbox"/> queries, which
            maintains a history buffer, and provides lag compensated raycast and overlap methods.
            Singleton instance is accessible through the property Runner.LagCompensation.
            <para>Usage - Call any of the following methods:</para>
            <code>HitboxManager.Raycast()<br></br>
            HitboxManager.RaycastAll()<br></br>
            HitboxManager.PositionRotation()<br></br>
            HitboxManager.OverlapSphere()</code>
            <para>These methods use the history buffer to perform a <see cref="T:Fusion.Hitbox"/> query against a state consistent with how the indicated <see cref="T:Fusion.PlayerRef"/> perceived them locally.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.BVHDepth">
            <summary>
            Debug data from Broadphase BVH (tree depth).
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.BVHNodes">
            <summary>
            Debug data from Broadphase BVH (total nodes count).
            </summary>
        </member>
        <member name="F:Fusion.HitboxManager.TotalHitboxes">
            <summary>
            Debug data from lag compensation history (registered <see cref="T:Fusion.Hitbox"/> count).
            </summary>
        </member>
        <member name="M:Fusion.HitboxManager.ResolveQuery(Fusion.LagCompensation.Query@,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Boolean)">
            <summary>
            Performs a raycast, raycast-all, sphere- or box-overlap query.
            Use the <see cref="M:Fusion.LagCompensation.RaycastQuery.CreateQuery(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,Fusion.PlayerRef,System.Int32,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            CreateQuery</see> method of <see cref="T:Fusion.LagCompensation.RaycastQuery"/>, <see cref="T:Fusion.LagCompensation.SphereOverlapQuery"/> or <see cref="T:Fusion.LagCompensation.BoxOverlapQuery"/>, respectively, to create a query.
            </summary>
            <param name="query">The lag-compensated query to be performed.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <returns>The number of hits found by the query.</returns>
            <exception cref="T:System.ArgumentException">If the query type is not supported by this method.</exception>
            <code>
            var query = Fusion.LagCompensation.SphereOverlapQuery.CreateQuery(center, radius, Object.InputAuthority);
            var hitCount = Runner.LagCompensation.Query(ref query, hits);
            </code>
        </member>
        <member name="M:Fusion.HitboxManager.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,Fusion.PlayerRef,Fusion.LagCompensatedHit@,System.Int32,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="player">Player who "owns" this raycast. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hit">Raycast results will be filled in here.</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>True if something is hit</returns>
        </member>
        <member name="M:Fusion.HitboxManager.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},Fusion.LagCompensatedHit@,System.Int32,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="tick">Simulation tick number to use as the time reference for the lag compensation (use this for server AI, and similar).</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hit">Raycast results will be filled in here.</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>True if something is hit</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,System.Boolean,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            Important: results are NOT sorted by distance.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="player">Player who "owns" this raycast. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,System.Boolean,Fusion.HitOptions,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated raycast query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            Important: results are NOT sorted by distance.
            </summary>
            <param name="origin">Raycast origin, in world-space</param>
            <param name="direction">Raycast direction, in world-space</param>
            <param name="length">Raycast length</param>
            <param name="tick">Simulation tick number to use as the time reference for the lag compensation (use this for server AI, and similar).</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapSphere(UnityEngine.Vector3,System.Single,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated overlap sphere query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Sphere center, in world-space</param>
            <param name="radius">Sphere radius</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapSphere(UnityEngine.Vector3,System.Single,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated overlap sphere query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="origin">Sphere center, in world-space</param>
            <param name="radius">Sphere radius</param>
            <param name="tick">The tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>total number of hits</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapBox(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,Fusion.PlayerRef,System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated box overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="center">Center of the box in world space.</param>
            <param name="extents">Half of the size of the box in each dimension.</param>
            <param name="orientation">Rotation of the box.</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.OverlapBox(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Single},System.Collections.Generic.List{Fusion.LagCompensatedHit},System.Int32,Fusion.HitOptions,System.Boolean,UnityEngine.QueryTriggerInteraction,Fusion.LagCompensation.PreProcessingDelegate)">
            <summary>
            Performs a lag-compensated box overlap query against all registered hitboxes.
            If the <see cref="F:Fusion.HitOptions.IncludePhysX"/> flag is indicated, query will also include PhysX colliders, 
            PhysX colliders are recommended for static geometry, rather than Hitboxes.
            </summary>
            <param name="center">Center of the box in world space.</param>
            <param name="extents">Half of the size of the box in each dimension.</param>
            <param name="orientation">Rotation of the box.</param>
            <param name="tick">The exact tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <see cref="F:Fusion.HitOptions.SubtickAccuracy"/> is included on <paramref name="options"/>, this query will be resolved against hitbox colliders interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="hits">List to be filled with hits (both hitboxes and/or PhysX colliders, if included).</param>
            <param name="layerMask">Only objects with matching layers will be checked against.</param>
            <param name="options">Opt-in flags to compute with sub-tick accuracy (<see cref="F:Fusion.HitOptions.SubtickAccuracy"/>) and/or to include PhysX (<see cref="F:Fusion.HitOptions.IncludePhysX"/>).</param>
            <param name="clearHits">Clear list of hits before filling with new ones (defaults to true).</param>
            <param name="queryTriggerInteraction">Trigger interaction behavior when also querying PhysX.</param>
            <param name="preProcessRoots">
            Delegate to pre-process <see cref="T:Fusion.HitboxRoot">HitboxRoots</see> found in the broad-phase resolution of the query.
            Roots removed from the list will not be processed any further.
            Roots that remain on the candidates collection will be normally processed and fitting colliders will be evaluated in
            the query narrow-phase resolution.
            Hitbox collider indices added to the processed set will be evaluated in the narrow-phase regardless of further root
            processing steps (e.g. layer mask match).
            </param>
            <returns>The total number of hits found.</returns>
        </member>
        <member name="M:Fusion.HitboxManager.PositionRotation(Fusion.Hitbox,System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Single})">
            <summary>
            Performs a lag-compensated query for a specific Hitbox position and rotation.
            </summary>
            <param name="hitbox">The target hitbox to be queried in the past</param>
            <param name="tick">The tick to be queried</param>
            <param name="tickTo">
            Simulation tick number to use as the time reference for the lag compensation.
            If provided, must be combined with the <paramref name="alpha"/> parameter for interpolation between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <paramref name="subtickAccuracy"/> is requested, the query will return the hitbox state interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded value of <paramref name="alpha"/>.
            </param>
            <param name="alpha">
            Interpolation value when querying between <paramref name="tick"/> and <paramref name="tickTo"/>.
            If <paramref name="subtickAccuracy"/> is requested, the query will return the hitbox state interpolated between the specified ticks.
            Otherwise, only one of the two ticks will be considered, according to the rounded alpha value.
            </param>
            <param name="position">Will be filled with the hitbox position at the time of the tick</param>
            <param name="rotation">Will be filled with the hitbox rotation at the time of the tick</param>
            <param name="subtickAccuracy">If the query should interpolate between ticks to reflect exactly what was seen on the client.</param>
        </member>
        <member name="M:Fusion.HitboxManager.PositionRotation(Fusion.Hitbox,Fusion.PlayerRef,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean)">
            <summary>
            Performs a lag-compensated query for a specific Hitbox position and rotation.
            </summary>
            <param name="hitbox">The target hitbox to be queried in the past</param>
            <param name="player">Player who "owns" this overlap. Used by the server to find the exact hitbox snapshots to check against.</param>
            <param name="position">Will be filled with the hitbox position at the time of the tick</param>
            <param name="rotation">Will be filled with the hitbox rotation at the time of the tick</param>
            <param name="subTickAccuracy">If the query should interpolate between ticks to reflect exactly what was seen on the client.</param>
        </member>
        <member name="M:Fusion.HitboxManager.FixedUpdateNetwork">
            <summary>
            Internal use. Inserts (new ones) and updates all registered hitboxes into lag compensation history.
            </summary>
        </member>
        <member name="M:Fusion.HitboxManager.OnDrawGizmos">
            <summary>
            Unity Gizmos.
            </summary>
        </member>
        <member name="T:Fusion.HitboxRoot">
            <summary>
            Root <see cref="T:Fusion.Hitbox"/> group container. Manages registering/unregistering hitboxes with the group, and defines the broadphase geometry for the group.
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="T:Fusion.HitboxRoot.ConfigFlags">
            <summary>
            Set of configuration options for a Hitbox Root behaviour.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.ReinitializeHitboxesBeforeRegistration">
            <summary>
            If the collection of hitboxes under a given root should be re-initialized before the Root is registered
            in a hitbox snapshot. If disabled, the hitboxes will be used as configured in edit-time.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.IncludeInactiveHitboxes">
            <summary>
            If Hitboxes on inactive Game Objects should be registered under this root upon initialization.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.Legacy">
            <summary>
            Set of configuration flags that replicate the behaviour as it was before the flag options were added.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.ConfigFlags.Default">
            <summary>
            Ser of configuration flags with the default behaviour, suitable for most use-cases.
            </summary>
        </member>
        <member name="P:Fusion.HitboxRoot.HitboxRootActive">
            <summary>
            Get or set the state of this HitboxRoot.
            For a hitbox to be hit by lag-compensated queries, both it and its HitboxRoot must be active.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.MAX_HITBOXES">
            <summary>
            The max number of hitboxes allowed under the same root.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Config">
            <summary>
            Set of configuration options for this Hitbox Root behaviour.
            Check the API documentation for more details on what each flag represents.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.BroadRadius">
            <summary>
            The radius of the broadphase bounding sphere for this <see cref="T:Fusion.Hitbox"/> group. 
            Used by <see cref="T:Fusion.HitboxManager"/> to insert/update lag compensated NetworkObjects into its BVH (bounding volume hierarchy) data structure.
            Be sure this radius encompasses all children <see cref="T:Fusion.Hitbox"/> components (including their full ranges of animation motion).
            We plan to offer an option to dynamically compute the bounding volume, but the performance trade of will still favor a hand-crafted radius.
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Offset">
            <summary>
            Local-space offset of the broadphase bounding sphere from its transform position.
            <para>Adjust the <see cref="F:Fusion.HitboxRoot.BroadRadius"/> and <see cref="F:Fusion.HitboxRoot.Offset"/> until the sphere gizmo (shown in the Unity Scene window) 
            encompasses all children <see cref="T:Fusion.Hitbox"/> components (including their full ranges of animation motion).</para>
            <para><b><i>Broadphase</i></b> is the initial rough query used by raycasts/overlaps/etc to find potential hit candidates, 
            which are then used in the final <b><i>narrowphase</i></b> query.</para>
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.GizmosColor">
            <summary>
            Color used when drawing gizmos for this hitbox.
            </summary>
        </member>
        <member name="F:Fusion.HitboxRoot.Hitboxes">
            <summary>
            All Hitbox instances in hierarchy. Auto-filled at Spawned.
            </summary>
        </member>
        <member name="P:Fusion.HitboxRoot.Manager">
            <summary>
            Reference to associated hitbox manager (from which lag compensated queries can be performed).
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.InitHitboxes">
            <summary>
            Finds child <see cref="T:Fusion.Hitbox"/> components, and adds them to the <see cref="F:Fusion.HitboxRoot.Hitboxes"/> collection.
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.SetMinBoundingRadius">
            <summary>
            Sets <see cref="F:Fusion.HitboxRoot.BroadRadius"/> to a rough value which encompasses all <see cref="F:Fusion.HitboxRoot.Hitboxes"/> in their current positions.
            </summary>
        </member>
        <member name="M:Fusion.HitboxRoot.SetHitboxActive(Fusion.Hitbox,System.Boolean)">
            <summary>
            Sets the state of a Hitbox instance under this root.
            Both the hitbox and its root must be active in order for it to be hit by lag-compensated queries.
            </summary>
            <param name="hitbox">A hitbox instance under the hierarchy of this root.</param>
            <param name="setActive">If the hitbox should be activated or deactivated.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:Fusion.Hitbox.HitboxIndex"/> of the <paramref name="hitbox"/> is outside the valid range.</exception>
            <exception cref="T:Fusion.AssertException">In Debug configuration, if the <paramref name="hitbox"/> is not part of this root.</exception>
        </member>
        <member name="M:Fusion.HitboxRoot.IsHitboxActive(Fusion.Hitbox)">
            <summary>
            Checks the state of a Hitbox instance under this root.
            Both the hitbox and its root must be active in order for it to be hit by lag-compensated queries.
            </summary>
            <param name="hitbox">A hitbox instance under the hierarchy of this root.</param>
            <returns>True if the <paramref name="hitbox"/> is part of this root and is active.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:Fusion.Hitbox.HitboxIndex"/> of the <paramref name="hitbox"/> is outside the valid range.</exception>
            <exception cref="T:Fusion.AssertException">In Debug configuration, if the <paramref name="hitbox"/> is not part of this root.</exception>
        </member>
        <member name="T:Fusion.HitType">
            <summary>
            Queries can hit either fusion's custom <see cref="F:Fusion.HitType.Hitbox"/> or Unity's standard Physx colliders.
            </summary>
        </member>
        <member name="F:Fusion.HitType.None">
            <summary>
            Used when a raycast does not hit anything. Not used on overlaps.
            </summary>
        </member>
        <member name="F:Fusion.HitType.Hitbox">
            <summary>
            <see cref="T:Fusion.LagCompensatedHit"/> is a Fusion <see cref="F:Fusion.HitType.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.HitType.PhysX">
            <summary>
            <see cref="T:Fusion.LagCompensatedHit"/> is a Unity PhysX Collider.
            </summary>
        </member>
        <member name="T:Fusion.HitboxTypes">
            <summary>
            Defines the collision geometry type of a <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.None">
            <summary>
            [Future Use] to represent a disabled <see cref="T:Fusion.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.Box">
            <summary>
            Geometry is a box, fill in Extents and (optional) Offset.
            </summary>
        </member>
        <member name="F:Fusion.HitboxTypes.Sphere">
            <summary>
            Geometry is a sphere, fill in Radius and (optional) Offset.
            </summary>
        </member>
        <member name="T:Fusion.LagCompensatedHit">
            <summary>
            Defines a lag compensated query hit result.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Type">
            <summary>
            Hit object source (PhysX or Fusion Hitboxes).
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.GameObject">
            <summary>
            The Unity Game Object that was hit. Its data is not lag compensated.
            This is either the <see cref="F:Fusion.LagCompensatedHit.Hitbox"/>'s or the <see cref="F:Fusion.LagCompensatedHit.Collider"/>'s gameObject,
            depending on the object hit being a lag-compensated Hitbox or a regular Unity collider, respectively.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Normal">
            <summary>
            Surface normal (if requested) of the hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Point">
            <summary>
            Point of impact of the hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Distance">
            <summary>
            Distance (if requested) to hit, at the lag compensated time.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Hitbox">
            <summary>
            Fusion's <see cref="F:Fusion.LagCompensatedHit.Hitbox"/>. Null in case the hit was on PhysX.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit.Collider">
            <summary>
            PhysX collider hit. Null in case hit is a Fusion <see cref="F:Fusion.LagCompensatedHit.Hitbox"/>.
            </summary>
        </member>
        <member name="F:Fusion.LagCompensatedHit._sortAux">
            <summary>
            Auxiliary field used when sorting hits in a collection.
            </summary>
        </member>
        <member name="M:Fusion.LagCompensatedHit.op_Explicit(UnityEngine.RaycastHit)~Fusion.LagCompensatedHit">
            <summary>
            Creates a <see cref="T:Fusion.LagCompensatedHit"/> structure from the information on a Unity <see cref="T:UnityEngine.RaycastHit"/>.
            </summary>
            <param name="raycastHit">The <see cref="T:UnityEngine.RaycastHit"/> used as source.</param>
            <returns>The built LagCompensatedHit structure.</returns>
        </member>
        <member name="M:Fusion.LagCompensatedExt.SortReference(System.Collections.Generic.List{Fusion.LagCompensatedHit},UnityEngine.Vector3)">
            <summary>
            Sorts all <paramref name="hits"/> in ascending order of distance
            from <see cref="F:Fusion.LagCompensatedHit.Point"/> to the <paramref name="reference"/> point.
            </summary>
            <param name="hits">List containing hits to be sorted.</param>
            <param name="reference">Used as reference point to compute distance from hit points.</param>
            <exception cref="T:System.NullReferenceException"> If <paramref name="hits"/> are null.</exception>
        </member>
        <member name="M:Fusion.LagCompensatedExt.SortDistance(System.Collections.Generic.List{Fusion.LagCompensatedHit})">
            <summary>
            Sorts all <paramref name="hits"/> in ascending order of <see cref="F:Fusion.LagCompensatedHit.Distance"/>.
            </summary>
            <param name="hits">List containing hits to be sorted.</param>
            <exception cref="T:System.NullReferenceException"> If <paramref name="hits"/> are null.</exception>
        </member>
        <member name="T:Fusion.HitboxBuffer">
            <summary>
            HitboxBuffer will store all snapshots of the colliders into a circular buffer
            </summary>
        </member>
        <member name="T:Fusion.HitboxBuffer.HitboxSnapshot">
            <summary>
            HitboxContainer represents 1 snapshot of all containers in a given Tick
            </summary>
        </member>
        <member name="T:Fusion.Angle">
            <summary>
            A Networked fusion type for degrees. This can be used with the <see cref="T:Fusion.NetworkedAttribute"/>, in RPCs, or in <see cref="T:Fusion.NetworkInput"/> structs.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Clamp(Fusion.Angle,Fusion.Angle)">
            <summary>
            Clamps the current value to the supplied min-max range.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Min(Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns the smaller of two supplied angles.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Max(Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns the larger of two supplied angles.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Lerp(Fusion.Angle,Fusion.Angle,System.Single)">
            <summary>
            Lerps between two angle values.
            </summary>
        </member>
        <member name="M:Fusion.Angle.Clamp(Fusion.Angle,Fusion.Angle,Fusion.Angle)">
            <summary>
            Returns a the value, clamped to the min-max range.
            </summary>
        </member>
        <member name="T:Fusion.Behaviour">
            <summary>
            Alternative base class to Unity's MonoBehaviour. 
            This allows for components that work both in Unity, as well as the Photon relays.
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.AddBehaviour``1">
            <summary>
            Wrapper for Unity's GameObject.AddComponent()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.TryGetBehaviour``1(``0@)">
            <summary>
            Wrapper for Unity's GameObject.TryGetComponent()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.GetBehaviour``1">
            <summary>
            Wrapper for Unity's GameObject.GetComponentInChildren()
            </summary>
        </member>
        <member name="M:Fusion.Behaviour.DestroyBehaviour(Fusion.Behaviour)">
            <summary>
            Wrapper for Unity's GameObject.Destroy()
            </summary>
        </member>
        <member name="T:Fusion.ChangedDelegate`1">
            <summary>
            Delegate definition for changed callbacks.
            </summary>
        </member>
        <member name="T:Fusion.Changed`1">
            <summary>
            Wrapping struct around changed behaviours which allows you to load old and new values.
            </summary>
        </member>
        <member name="P:Fusion.Changed`1.Behaviour">
            <summary>
            The wrapped changed behaviour instance. The behaviour will have the new networked values. 
            Previous values can be obtained by calling changed.Behaviour.LoadOld(), then accessing the networked properties of changed.behaviour.
            </summary>
        </member>
        <member name="M:Fusion.Changed`1.Rescan">
            <summary>
            Tells the OnChanged callback system that this object needs to be re-scanned for changes after the current change scan is completed.
            Call this is you are changing data inside an OnChange callback and can't wait for the next tick to execute until the callback is triggered.
            </summary>
        </member>
        <member name="M:Fusion.Changed`1.LoadOld">
            <summary>
            Sets the changed behaviour to represent the previous state before the triggering change occurred.
            To get previous values, call this before getting networked properties of <see cref="P:Fusion.Changed`1.Behaviour"/>.
            </summary>
        </member>
        <member name="M:Fusion.Changed`1.LoadNew">
            <summary>
            Sets the <see cref="P:Fusion.Changed`1.Behaviour"/> to represent the changed state after the triggering change occurred.
            This is the already default state of the behaviour when an OnChanged callback occurs, 
            and only needs to be called to revert from a previous <see cref="M:Fusion.Changed`1.LoadOld"/> call in your changed callback handler.
            </summary>
        </member>
        <member name="T:Fusion.EditorHeaderIcon">
            <summary>
            Icon to be rendered on the component graphic header in the Unity inspector.
            </summary>
        </member>
        <member name="T:Fusion.EditorHeaderBackColor">
            <summary>
            Color of the component graphic header in the Unity inspector. None indicates no header graphic should be used.
            </summary>
        </member>
        <member name="M:Fusion.HashCodeUtilities.GetHashDeterministic(System.String,System.Int32)">
            <summary>
            This may only be deterministic on 64 bit systems.
            </summary>
            <param name="str"></param>
            <param name="initialHash"></param>
            <returns></returns>
            
        </member>
        <member name="T:Fusion.InterpolatedErrorCorrectionSettings">
            <summary>
            A set of parameters that tune the interpolated correction of prediction error on transform data.
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">
            <summary>
            <para>
            A factor with dimension of 1/s (Hz) that works as a lower limit for how much
            of the accumulated prediction error is corrected every frame.
            This factor affects both the position and the rotation correction.
            Suggested values are greater than zero and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            <para>
            E.g.: MinRate = 3, rendering delta time = (1/60)s: at least 5% (3 * 1/60) of the accumulated error
            will be corrected on this rendered frame. 
            </para>
            <para>
            This threshold might not be respected if the resultant correction magnitude is
            below the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see>
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>, for the position error,
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>, for the rotation error.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">
            <summary>
            <para>
            A factor with dimension of 1/s (Hz) that works as a upper limit for how much
            of the accumulated prediction error is corrected every frame.
            This factor affects both the position and the rotation correction.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and smaller than half of a target rendering rate.
            </para>
            <para>
            E.g.: MaxRate = 15, rendering delta time = (1/60)s: at maximum 25% (15 * 1/60) of the accumulated error
            will be corrected on this rendered frame. 
            </para>
            <para>
            This threshold might not be respected if the resultant correction magnitude is
            below the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see> or
            above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>, for the position error,
            or above the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>, for the rotation error.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">
            <summary>
            <para>
            The reference for the magnitude of the accumulated position error, in meters,
            at which the position error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">PosMinCorrection</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or smaller than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            If, instead, the magnitude is between this threshold and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">
            <summary>
            <para>
            The reference for the magnitude of the accumulated position error, in meters,
            at which the position error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">PosTeleportDistance</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or greater than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            If, instead, the magnitude is between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see> and this threshold,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosMinCorrection">
            <summary>
            <para>
            The value, in meters, that represents the minimum magnitude of the accumulated position error
            that will be corrected in a single frame, until it is fully corrected.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            Suggested values are greater than zero and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendStart">PosBlendStart</see>.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.PosTeleportDistance">
            <summary>
            <para>
            The value, in meters, that represents the magnitude of the accumulated
            position error above which the error will be instantaneously corrected,
            effectively teleporting the rendered object to its correct position.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.PosBlendEnd">PosBlendEnd</see>.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            </para>
            <para>
            Note: as the factor is expressed in distance units (meters), it might need to be scaled
            proportionally to the overall scale of objects in the scene and speeds at which they move,
            which are factors that affect the expected magnitude of prediction errors.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">
            <summary>
            <para>
            The reference for the magnitude of the accumulated rotation error, in radians,
            at which the rotation error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            Suggested values are smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or smaller than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            If, instead, the magnitude is between this threshold and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">
            <summary>
            <para>
            The reference for the magnitude of the accumulated rotation error, in radians,
            at which the rotation error will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see>
            and smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">RotTeleportRadians</see>.
            </para>
            <para>
            In other words, if the magnitude of the accumulated error is equal to or greater than this threshold,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>.
            If, instead, the magnitude is between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see> and this threshold,
            the error is corrected at a rate between <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>
            and <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MaxRate">MaxRate</see>, proportionally.
            If it is equal to or smaller than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendStart">RotBlendStart</see>,
            it will be corrected at the <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.MinRate">MinRate</see>.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.InterpolatedErrorCorrectionSettings.RotTeleportRadians">
            <summary>
            <para>
            The value, in radians, that represents the magnitude of the accumulated
            rotation error above which the error will be instantaneously corrected,
            effectively teleporting the rendered object to its correct orientation.
            Suggested values are greater than <see cref="F:Fusion.InterpolatedErrorCorrectionSettings.RotBlendEnd">RotBlendEnd</see>.
            </para>
            <para>
            This setting has priority over the resultant correction rate, i.e. the restriction
            will be respected even if it makes the effective correction rate be different than
            the one computed according to the min/max rates and start/end blend values.
            </para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkArray`1">
            <summary>
            Fusion type for networking arrays. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            <para>Typical Usage:
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkArray&lt;float&gt; syncedArray => default;
            </code></para>
            <para>Optional usage (for NetworkBehaviours ONLY - this is not legal in INetworkStructs):
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkArray&lt;int&gt; syncedArray { get; } = MakeInitializer(new int[] { 1, 2, 3, 4 });<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            array.Set(123);
            array[0] = 456;
            </code></para>
            </summary>
            <typeparam name="T">T can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkArray`1.Length">
            <summary>
            The fixed size of the array.
            </summary>
        </member>
        <member name="P:Fusion.NetworkArray`1.Item(System.Int32)">
            <summary>
            Indexer of array elements.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.#ctor(System.Byte*,System.Int32,Fusion.IElementReaderWriter{`0})">
            <summary>
            NetworkArray constructor.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.Get(System.Int32)">
            <summary>
            Returns the array value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.Set(System.Int32,`0)">
            <summary>
            Sets the array value at the supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.ToArray">
            <summary>
            Allocates a new array and copies values from this array. For a non-alloc alternative use <see cref="M:Fusion.NetworkArray`1.CopyTo(System.Collections.Generic.List{`0})"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyTo(System.Collections.Generic.List{`0})">
            <summary>
            Adds each value to the supplied List. This does not clear the list, so values will be appended to the existing list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyTo(`0[],System.Boolean)">
            <summary>
            Copies values to the supplied array.
            </summary>
            <param name="array"></param>
            <param name="throwIfOverflow">If true, this method will throw an error if the supplied array is smaller than this <see cref="T:Fusion.NetworkArray`1"/>. If false, will only copy as many elements as the target array can hold.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyFrom(`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source array.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.CopyFrom(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Copies a range of values in from a supplied source list.
            </summary>
            <param name="sourceOffset">Starting index of elements in source.</param>
            <param name="sourceCount">Number of sequential source elements to copy in.</param>
        </member>
        <member name="M:Fusion.NetworkArray`1.ToListString">
            <summary>
            Returns the elements of this array as a string, with value separated by \n characters. Specifically for use in the Unity inspector.
            This is private and only is found by NetworkBehaviourEditor using reflection, so do not rename this method.
            </summary>
        </member>
        <member name="T:Fusion.NetworkDictionary`2">
            <summary>
            Fusion type for networking Dictionaries. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            <para>Typical Usage:
            <code>
            [Networked, Capacity(10)]<br></br>
            NetworkDictionary&lt;int, float&gt; syncedDict => default;<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            var dict = syncedDict;
            dict.Add(5, 123);
            dict[5] = 456;
            dict.Remove(5);
            </code></para>
            </summary>
            <typeparam name="K">Key can be a primitive, or an INetworkStruct.</typeparam>
            <typeparam name="V">Value can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Count">
            <summary>
            Current number of key/value entries in the Dictionary.
            </summary>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Capacity">
            <summary>
            The maximum number of entries this dictionary may contain.
            </summary>
        </member>
        <member name="P:Fusion.NetworkDictionary`2.Item(`0)">
            <summary>
            Key indexer. Gets/Sets value for specified key.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Clear">
            <summary>
            Remove all entries from the Dictionary, and clear backing memory.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the Dictionary contains an entry for the given key.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Returns true if the Dictionary contains an entry value which compares as equal to given value.
            </summary>
            <param name="value">The value to compare against.</param>
            <param name="equalityComparer">Specify custom IEqualityComparer to be used for compare.</param>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Get(`0)">
            <summary>
            Returns the value for the given key. Will throw an error if the key is not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Set(`0,`1)">
            <summary>
            Sets the value for the given key. Will add a new key if the key does not already exist.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new key value pair to the Dictionary. If the key already exists, will return false.
            </summary>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get the value for a given key. If found, returns true.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">Returns value of removed item. Returns default value if key did not exist.</param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Remove(`0)">
            <summary>
            Remove entry from Dictionary.
            </summary>
            <param name="key"></param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="M:Fusion.NetworkDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes entry from Dictionary. If successful (key existed), returns true and the value of removed item.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">Returns value of removed item. Returns default value if key did not exist.</param>
            <returns>Returns true if key was found.</returns>
        </member>
        <member name="T:Fusion.NetworkLinkedList`1">
            <summary>
            Fusion type for networking LinkedLists. 
            Maximum capacity is fixed, and is set with the <see cref="T:Fusion.CapacityAttribute"/>.<br></br><br></br>
            Typical Usage:
            <para><code>
            [Networked, Capacity(10)]<br></br>
            NetworkLinkedList&lt;int&gt; syncedLinkedList => default;
            </code></para>
            <para>Optional usage (for NetworkBehaviours ONLY - this is not legal in INetworkStructs):
            <code>
            [Networked, Capacity(4)]<br></br>
            NetworkLinkedList&lt;int&gt; syncedLinkedList { get; } = MakeInitializer(new int[] { 1, 2, 3, 4 });<br></br>
            </code></para>
            <para>Usage for modifying data:
            <code>
            var list = syncedLinkedList;
            list.Add(123);
            list[0] = 456;
            list.Remove(0);
            </code></para>
            </summary>
            <typeparam name="T">T can be a primitive, or an INetworkStruct.</typeparam>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Count">
            <summary>
            Returns the current element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Capacity">
            <summary>
            Returns the max element count.
            </summary>
        </member>
        <member name="P:Fusion.NetworkLinkedList`1.Item(System.Int32)">
            <summary>
            Element indexer.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Clear">
            <summary>
            Removes and clears all list elements.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Contains(`0)">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns true if the value already exists in the list.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Set(System.Int32,`0)">
            <summary>
            Sets the value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Get(System.Int32)">
            <summary>
            Returns the value at supplied index.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.IndexOf(`0)">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns the index with this value. Returns -1 if not found.
            </summary>
            <param name="equalityComparer">Specify custom IEqualityComparer to be used for compare.</param>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Remove(`0)">
            <summary>
            Removes the first found element with indicated value.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first found element with indicated value.
            </summary>
        </member>
        <member name="M:Fusion.NetworkLinkedList`1.Add(`0)">
            <summary>
            Adds a value to the end of the list.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Fusion.NetworkRNG">
            <summary>
            PCG32 random generator, 16 bytes in size.
            <a href="http://www.pcg-random.org">http://www.pcg-random.org</a>
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_32_32_ToUnitDoubleInclusive">
            <summary>
            0x1.00000001p-32 aka 0x3df0000000100000
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_32_32_ToUnitDoubleExclusive">
            <summary>
            0x1p-32 aka 0x3df0000000000000
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_8_24_ToUnitSingleInclusive">
            <summary>
            0x1.000002p-24 aka 0x33800001
            </summary>
        </member>
        <member name="F:Fusion.NetworkRNG.FP_8_24_ToUnitSingleExclusive">
            <summary>
            0x1p-24 aka 0x33800000
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.Next">
            <summary>
            Returns a random Double within [0, 1] (range is inclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextExclusive">
            <summary>
            Returns a random Double within [0, 1) (range is exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextSingle">
            <summary>
            Returns a random Single within [0, 1] (range is inclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextSingleExclusive">
            <summary>
            [0, 1)
            Returns a random Single within [0, 1) (range is exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextInt32">
            <summary>
            [int.MinValue, int.MaxValue]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.NextUInt32">
            <summary>
            [0, uint.MaxValue]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Double,System.Double)">
            <summary>
            Returns a random Double within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Single,System.Single)">
            <summary>
            Returns a random Single within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeExclusive(System.Int32,System.Int32)">
            <summary>
            Returns a random Int32 within [minInclusive, maxExclusive) (range is exclusive).
            If minInclusive and maxExclusive are equal, then the "exclusive rule" is ignored and minInclusive will be returned.
            If minInclusive is greater than maxExclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.Int32,System.Int32)">
            <summary>
            Returns a random Int32 within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeExclusive(System.UInt32,System.UInt32)">
            <summary>
            Returns a random UInt32 within [minInclusive, maxExclusive) (range is exclusive).
            If minInclusive and maxExclusive are equal, then the "exclusive rule" is ignored and minInclusive will be returned.
            If minInclusive is greater than maxExclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRNG.RangeInclusive(System.UInt32,System.UInt32)">
            <summary>
            Returns a random UInt32 within [minInclusive, maxInclusive] (range is inclusive).
            If minInclusive is greater than maxInclusive, then the numbers are automatically swapped.
            </summary>
        </member>
        <member name="T:Fusion.NetworkString`1">
            <summary>
            Fixed-size UTF32 string. All operations are alloc-free, except for converting to <see cref="T:System.String"/>.
            </summary>
            <typeparam name="Size"></typeparam>
        </member>
        <member name="P:Fusion.NetworkString`1.Capacity">
            <summary>
            Maximum UTF32 string length.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Value">
            <summary>
            Converts to/from regular UTF16 string. Setter is alloc-free. Use <see cref="!:Get(ref string, bool)"/>
            to get possibly alloc-free conversion.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Length">
            <summary>
            Number of UTF32 scalars. It is equal or less than <see cref="M:Fusion.NetworkString`1.GetCharCount"/> or the length
            of <see cref="P:Fusion.NetworkString`1.Value"/>, because those use UTF16 encoding, which needs two characters to encode
            some values.
            </summary>
        </member>
        <member name="P:Fusion.NetworkString`1.Item(System.Int32)">
            <summary>
            Returns UTF32 scalar at <paramref name="index"/> position. To iterate over characters,
            use <see cref="M:Fusion.NetworkString`1.GetEnumerator"/>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkString`1.Get(System.String@)">
            <summary>
            Checks if <paramref name="cache"/> is equivalent and if not converts to UTF16 and
            stores the result in <paramref name="cache"/>.
            </summary>
            <param name="cache"></param>
            <param name="ignoreCase"></param>
            <returns>False if no conversion was performed, true otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkString`1.Set(System.String)">
            <summary>
            Converts <paramref name="value"/> to UTF32 string and stores it internally.
            </summary>
            <param name="value"></param>
            <returns>False if <paramref name="value"/> was too long to fit and had to be trimmed.</returns>
        </member>
        <member name="M:Fusion.NetworkString`1.GetCharCount">
            <summary>
            Calculates the length of the equivalent UTF16 string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.PlayerRef">
            <summary>
            Represents a Fusion player.
            </summary>
            <para>The PlayerRef, in contrast to the player index, is 1-based. The reason is that default(PlayerRef) will return a "null/invalid" player ref struct for convenience. There are automatic cast operators that can cast an int into a PlayerRef.</para>
            <example><code>
            default(PlayerRef), internally a 0, means NOBODY
            PlayerRef, internally 1, is the same as player index 0
            PlayerRef, internally 2, is the same as player index 1
            </code></example>
        </member>
        <member name="P:Fusion.PlayerRef.None">
            <summary>
            None player
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.IsValid">
            <summary>
            If this player index is valid
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.RawEncoded">
            <summary>
            Raw encoded value 
            </summary>
        </member>
        <member name="P:Fusion.PlayerRef.PlayerId">
            <summary>
            Player id this player ref represents
            </summary>
        </member>
        <member name="M:Fusion.Collections.RingArray`1.#ctor(System.Int32)">
            <summary>
            Note: You are passing the bitcount of the length, not the length. Normal values will be in the 5-8 range (32 - 256).
            This RingArray is meant to be fast, so it only uses counts of 2^x.
            </summary>
            <param name="countBits">Element count will be 2 to this power.</param>
        </member>
        <member name="P:Fusion.Collections.RingArray`1.Item(System.Int32)">
            <summary>
            Indexer. Runs a fast mod on the frameId to make it conform to the ring array.
            </summary>
            <param name="frameId"></param>
        </member>
        <member name="T:Fusion.Rotation">
            <summary>
            Wrapper class which unifies rotation handling of Quaternion, Euler or Z-only (used by 2D).
            Can store a Quaternion, Euler or Z-axis (for 2d rotation), and implicitly casts between those types.
            </summary>
        </member>
        <member name="F:Fusion.Rotation.Type">
            <summary>
            Indicates of the stored rotation is a Quaternion or Euler type.
            </summary>
        </member>
        <member name="P:Fusion.Rotation.AsQuaternion">
            <summary>
            Returns the rotation as a Quaternion. If original type was a Euler or Rotation Z-axis only, that is converted to a Quaternion.
            </summary>
        </member>
        <member name="P:Fusion.Rotation.AsEuler">
            <summary>
            Returns the rotation as a Euler. If original type was Quaternion, that is converted to a Euler.
            </summary>
        </member>
        <member name="P:Fusion.Rotation.AsFloatZ">
            <summary>
            Returns the z-axis value of the rotation. If original type was Quaternion, first converts to a Euler then returns the z value of that Euler.
            </summary>
        </member>
        <member name="P:Fusion.SceneRef.None">
            <summary>
            None scene
            </summary>
        </member>
        <member name="P:Fusion.SceneRef.IsValid">
            <summary>
            If this scene index is valid
            </summary>
        </member>
        <member name="T:Fusion.NetworkId">
            <summary>
            The unique identifier for a network entity.
            </summary>
        </member>
        <member name="F:Fusion.NetworkId.PREDICTED_BIT">
            <summary>
            Offset for the bitflag that indicates of this tick is predicted or final.
            </summary>
        </member>
        <member name="F:Fusion.NetworkId.Raw">
             <summary>
            
             </summary>
        </member>
        <member name="P:Fusion.NetworkId.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fusion.NetworkId.ToNamePrefixString">
            <summary>
            String conversion specifically for use in prefixing names of GameObjects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.NetworkObject">
            <summary>
            The primary Fusion component for networked GameObject entities. 
            This stores the object's network identity and manages the object's state and input authority. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.Id">
            <summary>
            The unique identifier for this network entity. 
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.IsResume">
            <summary>
            Signal that this <see cref="T:Fusion.NetworkObject"/> comes from a Resume Spawn
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.Runner">
            <summary>
            The <see cref="T:Fusion.NetworkRunner"/> this entity is associated with.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.ObjectInterest">
            <summary>
            How Object Interest is determined for this object. 
            Only applicable to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/> mode, and if <see cref="F:Fusion.SimulationConfig.ObjectInterest"/> is enabled.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.DefaultInterestGroups">
            <summary>
            All players will start with these Interest Groups explicitly enabled for this object. 
            Use <see cref="M:Fusion.NetworkRunner.SetInterestGroup(Fusion.NetworkObject,Fusion.PlayerRef,System.String,System.Boolean)"/> on the server 
            to explicitly add or remove a player's interest in groups for this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.DestroyWhenStateAuthorityLeaves">
            <summary>
            If the player with State Authority for this Object leaves the room, this Object will automatically be destroyed on the network.
            Only applicable to Shared Mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.AllowStateAuthorityOverride">
            <summary>
            When enabled, State Authority over this Object can be taken by a player, without the current State Authority player first releasing authority.
            If disabled, <see cref="M:Fusion.NetworkObject.RequestStateAuthority"/> will fail if another player currently has State Authority, and has not called <see cref="M:Fusion.NetworkObject.ReleaseStateAuthority"/>.
            Only applicable to Shared Mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.AoiPositionSource">
            <summary>
            Specifies the <see cref="T:Fusion.NetworkAreaOfInterestBehaviour"/> component used to determine this players position for Area Of Interest checks.
            If left null, will use the first found root/child instance of <see cref="T:Fusion.NetworkAreaOfInterestBehaviour"/> on the Object.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.LastReceiveTick">
            <summary>
            Last tick this object received an update. Only available for <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.Flags">
            <summary>
            Flags used for network object prefabs and similar 
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NetworkGuid">
            <summary>
            The GUID for this prefab or scene object, which is set at development time. Used to reference this as a spawnable object. 
            All spawned instances of this object will retain this GUID. Use <see cref="T:Fusion.NetworkId"/> for the unique ID of network entries.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.PredictedSpawn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NestedObjects">
            <summary>
            Array of initial child nested <see cref="T:Fusion.NetworkObject"/> entities, that are children of this Object.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.NetworkedBehaviours">
            <summary>
            Array of all <see cref="T:Fusion.NetworkBehaviour"/>s associated with this network entity.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObject.SimulationBehaviours">
            <summary>
            Array of all <see cref="T:Fusion.SimulationBehaviour"/>s associated with this network entity. 
            This does not include <see cref="T:Fusion.NetworkBehaviour"/> derived classes, as they are stored in <see cref="F:Fusion.NetworkObject.NetworkedBehaviours"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.Name">
            <summary>
            The ID + Unity GameObject name for this entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSceneObject">
            <summary>
            Returns true if this network entity existed as part of a scene, rather than having been dynamically spawned.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnedPrefabRoot">
            <summary>
            Returns true if this network entity is a spawned prefab's root, rather than being a scene object or a nested prefab object.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnedPrefabNestedObject">
            <summary>
            Returns true if this network entity is a spawned prefab's nested object, rather than being a scene object or a root prefab object.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsValid">
            <summary>
            Returns if this network entity is associated with its <see cref="T:Fusion.NetworkRunner"/>, and that runner is not null.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsPredictedSpawn">
            <summary>
            If this is a predicted spawned object
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsPredictedDespawn">
            <summary>
            If this is a predicted spawned object
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsInSimulation">
            <summary>
            If this object is inserted into the simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.InputAuthority">
            <summary>
            Returns the <see cref="T:Fusion.PlayerRef"/> that has Input Authority over this network entity.
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.StateAuthority">
            <summary>
            Returns the <see cref="T:Fusion.PlayerRef"/> that has State Authority over this network entity.
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.AreaOfInterestLayerMask">
            <summary>
            The layers this object exists in for area of interest queries. This is an integer bitmask not a layer index.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.HasInputAuthority">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is the designated Input Authority for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.HasStateAuthority">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is the designated State Authority for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsProxy">
            <summary>
            Returns if <see cref="P:Fusion.Simulation.LocalPlayer"/> is neither the Input nor State Authority for this network entity.
            </summary>
        </member>
        <member name="P:Fusion.NetworkObject.IsSpawnable">
            <summary>
            Toggles if this NetworkObject is included in the <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>, which will include the prefab in builds as a Spawnable object.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.GetLocalAuthorityMask">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the current local authority over this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.GetRpcSourceAuthorityMask(Fusion.PlayerRef)">
            <summary>
            Gets a bitmask of <see cref="T:Fusion.AuthorityMasks"/> flags, representing the supplied <see cref="T:Fusion.PlayerRef"/> RPC authority for this <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.AssignInputAuthority(Fusion.PlayerRef)">
            <summary>
            Sets which <see cref="T:Fusion.PlayerRef"/> has Input Authority for this Object.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.RemoveInputAuthority">
            <summary>
            Removes input authority from whichever player has it for this object. Only valid when called on a Host or Server peer.
            </summary>
        </member>
        <member name="M:Fusion.NetworkObject.SetPlayerAlwaysInterested(Fusion.PlayerRef,System.Boolean)">
            <summary>
            Add or remove specific player interest in this NetworkObject.
            <para>
            <see cref="F:Fusion.SimulationConfig.ReplicationMode"/> must be set to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </para>
            </summary>
            <param name="player"></param>
            <param name="alwaysInterested"></param>
        </member>
        <member name="M:Fusion.NetworkObject.CopyStateFrom(Fusion.NetworkObject)">
            <summary>
            Copies the entire State from another <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <param name="source"><see cref="T:Fusion.NetworkObject"/> to copy the State from</param>
        </member>
        <member name="M:Fusion.NetworkObject.CopyStateFromSceneObject(Fusion.NetworkObjectHeaderPtr)">
            <summary>
            Copies the entire State from another Scene <see cref="T:Fusion.NetworkObject"/>.
            They must have the same Scene Guid.
            </summary>
            <param name="source">Scene <see cref="T:Fusion.NetworkObject"/> to copy the State from.</param>
        </member>
        <member name="M:Fusion.NetworkObject.SetInterestGroup(Fusion.PlayerRef,System.String,System.Boolean)">
            <summary>
            Add or remove Player's interest in a specific named Interest Group for this <see cref="T:Fusion.NetworkObject"/>.
            <para>
            <see cref="F:Fusion.SimulationConfig.ReplicationMode"/> must be set to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </para>
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabRef">
            <summary>
            A decoupled <see cref="T:Fusion.NetworkObject"/> prefab reference. Internally stored as a GUID.
            </summary>
        </member>
        <member name="T:Fusion.NetworkObjectHeader">
            <summary>
            Network meta information for a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkObjectHeader.NestingRoot">
            <summary>
            The id of the root most <see cref="T:Fusion.NetworkObject"/>, if this <see cref="T:Fusion.NetworkObject"/> is nested.
            </summary>
        </member>
        <member name="T:Fusion.INetworkObjectPool">
            <summary>
            Interface which defines the handlers for <see cref="T:Fusion.NetworkRunner"/> Spawn() and Despawn() actions. 
            Passing an instance of this interface to <see cref="M:Fusion.NetworkRunner.StartGame(Fusion.StartGameArgs)"/> 
            as the <see cref="F:Fusion.StartGameArgs.ObjectPool"/> argument value will assign that instance 
            as the handler for runner Spawn() and Despawn() actions.
            By default (if <see cref="F:Fusion.StartGameArgs.ObjectPool"/> == null) actions will use Instantiate(), and Despawn() actions will use Destroy().
            </summary>
        </member>
        <member name="M:Fusion.INetworkObjectPool.AcquireInstance(Fusion.NetworkRunner,Fusion.NetworkPrefabInfo)">
            <summary>
            The pooling implementation used for Spawn() actions.
            </summary>
            <param name="runner">The <see cref="T:Fusion.NetworkRunner"/> which Spawn() is being called from.</param>
            <param name="info">Meta data about the prefab being spawned. Typical usage:
            <code>
            | NetworkObject AcquireInstance(NetworkRunner runner, NetworkPrefabInfo info)
            | {
            |   if(runner.Config.PrefabTable.TryGetPrefab(info.Prefab, out NetworkObject prefab)){
            |     // Instantiate or Get Prefab prefab from your custom pool.
            |   }
            | }
            </code>
            </param>
            <returns></returns>
        </member>
        <member name="M:Fusion.INetworkObjectPool.ReleaseInstance(Fusion.NetworkRunner,Fusion.NetworkObject,System.Boolean)">
            <summary>
            The pooling handler implementation for Despawn() actions.
            </summary>
            <param name="runner">The <see cref="T:Fusion.NetworkRunner"/> which Despawn() is being called from.</param>
            <param name="instance">The  <see cref="T:Fusion.NetworkObject"/> being released. Disable or Destroy this object as needed.</param>
            <param name="isSceneObject">Indicates if this <see cref="T:UnityEngine.GameObject"/> was created by a Spawn action, 
            or if it originated as an object in a loaded scene. Scene objects may need special handling, 
            such as being returned to the scene disabled, rather than being returned to the general pool.</param>
        </member>
        <member name="T:Fusion.NetworkPrefabAsset">
            <summary>
            Represents a base class for "prefab assets" - assets that point to a prefab and provide a way to load them.
            </summary> 
        </member>
        <member name="F:Fusion.NetworkPrefabAsset.AssetGuid">
            <summary>
            Actual Unity prefab guid. If out of sync with the prefab's, it will be updated at first opportunity.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabAssetMissing">
            <summary>
            Placeholder kept after a prefab is removed or made not spawnable. If the prefab is restored/made spawnable again,
            the type of this asset will change to <see cref="T:Fusion.NetworkPrefabAsset"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabId">
            <summary>
            ID for a <see cref="T:Fusion.NetworkObject"/> Prefab which has been cataloged in a <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkPrefabInfo">
            <summary>
            Meta data for a <see cref="T:Fusion.NetworkObject"/> prefab which has been cataloged in a <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabInfo.Prefab">
            <summary>
            Prefab ID.
            Use <see cref="M:Fusion.NetworkPrefabTable.TryAdd(Fusion.NetworkObjectGuid,Fusion.INetworkPrefabSource,Fusion.NetworkPrefabId@)"/> 
            to look up the actual prefab reference in the <see cref="F:Fusion.NetworkProjectConfig.PrefabTable"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkPrefabInfo.Header">
            <summary>
            Header data for the <see cref="T:Fusion.NetworkObject"/> prefab.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabInfo.HasHeader">
            <summary>
            If the Header is not null.
            </summary>
        </member>
        <member name="P:Fusion.NetworkPrefabInfo.Data">
            <summary>
            Data pointer to the first word of this <see cref="T:Fusion.NetworkObject"/>'s data block.
            </summary>
        </member>
        <member name="M:Fusion.NetworkPrefabTable.TryAdd(Fusion.NetworkObjectGuid,Fusion.INetworkPrefabSource,Fusion.NetworkPrefabId@)">
            <summary>
            Adds prefab to the table and assigns it an id.
            </summary>
            <param name="source"></param>
            <param name="id">The id assigned to the prefab (if returns true) or id of the prefab with the same guid that has already been added.</param>
            <returns>True if the prefab prefab had unique guid and was added.</returns>
        </member>
        <member name="T:Fusion.AuthorityMasks">
            <summary>
            Flag constants for input and state authority.
            </summary>
        </member>
        <member name="T:Fusion.RpcAttribute">
            <summary>
            Flags a method as being a networked Remote Procedure Call.
            Only usable in a NetworkBehaviour. 
            Calls to this method (from the indicated allowed <see cref="T:Fusion.RpcSources"/>) will generate a network message,
            which will execute the method remotely on the indicated <see cref="T:Fusion.RpcTargets"/>.
            The RPC method can include an empty <see cref="T:Fusion.RpcInfo"/> argument, that will include meta information about the RPC on the receiving peer.
            <para>Example:</para>
            <code>
            | [Rpc(RpcSources.All, RpcTargets.All, InvokeLocal = false, InvokeResim = false, Channel = RpcChannel.Reliable, TickAligned = true)]<br></br>
            | public void RPC_Configure(NetworkObject no, string name, Color color, RpcInfo info = default) { }
            </code>
            To target a specific Player, use the <see cref="T:Fusion.RpcTargetAttribute"/>:
            <code>
            | [Rpc]
            | public void RpcFoo([RpcTarget] PlayerRef targetPlayer) {}
            </code>
            Use <see cref="T:Fusion.RpcInvokeInfo"/> as a return value to access meta information about the RPC send attempt, such as failure to send reasons, message size, etc.
            <para>
            Non-static RPCs are only valid on a <see cref="T:Fusion.NetworkBehaviour"/>.
            Static RPCs can be implemented on <see cref="T:Fusion.SimulationBehaviour"/>s, and do not require a <see cref="T:Fusion.NetworkObject"/> instance.
            Static RPC require the first argument to be NetworkRunner.
            </para>
            Static RPC Example:
            <code>
            | [Rpc]
            | public static void RPC_Configure(NetworkRunner runner) { }
            </code>
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Sources">
            <summary>
            The legal <see cref="T:Fusion.RpcSources"/> types that can trigger this Rpc. Cast to int.
            Default value is (int)<see cref="F:Fusion.RpcSources.All"/>.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Targets">
            <summary>
            The <see cref="T:Fusion.RpcTargets"/> types that will receive and invoke this method. Cast to int.
            Default value is (int)<see cref="F:Fusion.RpcTargets.All"/>.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.InvokeLocal">
            <summary>
            Indicates if the method should be called locally (on the RPC caller). This happens immediately.
            Default value is true.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.InvokeResim">
            <summary>
            Indicates if this RPC will execute during resims, or only once on the first execution of the associated tick.
            Default value is false.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.Channel">
            <summary>
            Specifies which RpcChannel to use. 
            Default value is <see cref="F:Fusion.RpcChannel.Reliable"/>
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.TickAligned">
            <summary>
            Indicates if this RPC's execution will be postponed until the local simulation catches up with the sender's Tick number.
            Even if set to false, the order of Rpcs is always preserved. Rpcs are deferred until all preceding Rpcs have
            executed.
            Default value is true.
            </summary>
        </member>
        <member name="P:Fusion.RpcAttribute.HostMode">
            <summary>
            Options for when the game is run in <see cref="F:Fusion.SimulationModes.Host"/> mode and RPC is invoked by the host.
            </summary>
        </member>
        <member name="M:Fusion.RpcAttribute.#ctor">
            <summary>
            Constructor for RpcAttributes.
            </summary>
        </member>
        <member name="M:Fusion.RpcAttribute.#ctor(Fusion.RpcSources,Fusion.RpcTargets)">
            <summary>
            Constructor for RpcAttributes.
            </summary>
            <param name="sources">The legal <see cref="T:Fusion.RpcSources"/> types that can trigger this Rpc. Default is <see cref="F:Fusion.RpcSources.All"/></param>
            <param name="targets">The <see cref="T:Fusion.RpcTargets"/> types that will receive and invoke this method. Default is <see cref="F:Fusion.RpcTargets.All"/></param>
        </member>
        <member name="F:Fusion.RpcChannel.Reliable">
            <summary>
            Rpc order preserved, delivery verified, resend in case of a failed delivery. 
            </summary>
        </member>
        <member name="F:Fusion.RpcChannel.Unreliable">
            <summary>
            Rpc order preserved, delivery not verified, no resend attempts.
            </summary>
        </member>
        <member name="T:Fusion.RpcHostMode">
            <summary>
            Options for when the game is run in <see cref="F:Fusion.SimulationModes.Host"/> mode and RPC is invoked by the host.
            </summary>
        </member>
        <member name="F:Fusion.RpcHostMode.SourceIsServer">
            <summary>
            If host invokes RPC <see cref="F:Fusion.RpcInfo.Source"/> will be set to <see cref="P:Fusion.PlayerRef.None"/> (default).
            </summary>
        </member>
        <member name="F:Fusion.RpcHostMode.SourceIsHostPlayer">
            <summary>
            If host invokes RPC <see cref="F:Fusion.RpcInfo.Source"/> will be set to the host's local player.
            </summary>
        </member>
        <member name="T:Fusion.RpcInvokeInfo">
            <summary>
            May be used as an optional <see cref="T:Fusion.RpcAttribute"/> return value. Contains meta data about the RPC send, such as failure to send reasons, culling, message size, etc.
            <para>Example:</para>
            <code>
            | [Rpc]
            | public RpcInvokeInfo RpcFoo(int value) {
            |  return default;
            | }
            |
            | public override void FixedUpdateNetwork() {
            |   var info = RpcFoo();
            |   Debug.Log(info);
            | }
            </code>
            </summary>
        </member>
        <member name="T:Fusion.RpcLocalInvokeResult">
            <summary>
            Results for the local RPC Invocation of the RPC method.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.Invoked">
            <summary>
            RPC has been invoked locally.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.NotInvokableLocally">
            <summary>
            Not invoked locally because <see cref="P:Fusion.RpcAttribute.InvokeLocal"/> is false.
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.NotInvokableDuringResim">
            <summary>
            Not invoked locally because <see cref="P:Fusion.RpcAttribute.InvokeResim"/> is false and simulation stage is <see cref="F:Fusion.SimulationStages.Resimulate"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.InsufficientSourceAuthority">
            <summary>
            Not invoked because source <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Sources"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.InsufficientTargetAuthority">
            <summary>
            Not invoked because target player is local and this <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Targets"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcLocalInvokeResult.TagetPlayerIsNotLocal">
            <summary>
            Not invoked because target player is not local.
            </summary>
        </member>
        <member name="T:Fusion.RpcSendCullResult">
            <summary>
            Results for the RPC message send operation. Note: Some individual targets may be culled even if the send operation succeeds.
            Information about culled targets can be found in <see cref="F:Fusion.RpcInvokeInfo.SendResult"/>.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NotCulled">
            <summary>
            RPC has been sent. Check <see cref="F:Fusion.RpcInvokeInfo.SendResult"/> for details.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NotInvokableDuringResim">
            <summary>
            Send culled because <see cref = "P:Fusion.RpcAttribute.InvokeLocal" /> is false.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.InsufficientSourceAuthority">
            <summary>
            Send culled because source <see cref="T:Fusion.NetworkObject"/> current authority does not match flags set in <see cref="P:Fusion.RpcAttribute.Sources"/>
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.NoActiveConnections">
            <summary>
            Send culled because there are no active connections.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.TargetPlayerUnreachable">
            <summary>
            Send culled because target player does not exist.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendCullResult.TargetPlayerIsLocalButRpcIsNotInvokableLocally">
            <summary>
            Send culled because target player is local and <see cref="P:Fusion.RpcAttribute.InvokeLocal"/> is false.
            </summary>
        </member>
        <member name="T:Fusion.RpcSendResult">
            <summary>
            RPC send operation result information.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.Result">
            <summary>
            Result flags for the RPC send operation.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.MessageSize">
            <summary>
            The size of the RPC message.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.Receivers">
            <summary>
            Collection of the <see cref="T:Fusion.PlayerRef"/> targets which were sent this RPC message.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendResult.CulledReceivers">
            <summary>
            Collection of the <see cref="T:Fusion.PlayerRef"/> targets which were failed to be sent this RPC message. 
            Reason for failure can be found in the <see cref="F:Fusion.RpcSendResult.Result"/> flags.
            </summary>
        </member>
        <member name="T:Fusion.RpcTargetAttribute">
            <summary>
            RPC attribute used to indicate a specific target player for an RPC when sending from one player to another. 
            RPC is sent to the server, and then is forwarded to the specified player.
            Usage:
            <code>
            |  [Rpc]
            |  public void RpcFoo([RpcTarget] PlayerRef targetPlayer) { }
            </code>
            </summary>
        </member>
        <member name="T:Fusion.NetworkEvents">
            <summary>
            Companion component for <see cref="T:Fusion.NetworkRunner"/>. Exposes <see cref="T:Fusion.INetworkRunnerCallbacks"/> as UnityEvents,
            which can be wired up to other components in the inspector.
            
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig">
            <summary>
            The core Fusion config file that is shared with all peers at startup.
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.PeerModes">
            <summary>
            Options for running one or multiple peers in one Unity instance. 
            Multiple is useful for testing multiple players/clients inside of the Unity editor without needing to build executables.
            Each peer is assigned its own independent physics scene and <see cref="T:Fusion.NetworkRunner"/> instance.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerModes.Single">
            <summary>
            This is the normal use case, where every build and the editor run a single server, host or client peer.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerModes.Multiple">
            <summary>
            This is the optional use case, which allows running multiple peers in the Unity editor, or in a build.
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.PhysicsEngines">
            <summary>
            Options for which Physics engines Fusion will use for simulations.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsEngines.Physics3D">
            <summary>
            The Unity PhysX simulation is used, but auto-simulation is disabled and simulations are controlled by Fusion.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsEngines.Physics2D">
            <summary>
            The Unity Box2D simulation is used, but auto-simulation is disabled and simulations are controlled by Fusion.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsEngines.None">
            <summary>
            Fusion preforms no Physics Simulate() calls.
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.PhysicsModes">
            <summary>
            Options for how physics is simulated on clients.
            <para>
            <see cref="F:Fusion.NetworkProjectConfig.PhysicsModes.ServerOnly"/> - Clients do not predict remote objects, and render in their remote time frame (relative past).<br/>
            <see cref="F:Fusion.NetworkProjectConfig.PhysicsModes.ClientPrediction"/> - Clients predict remote objects and have options for rendering them in local and/or remote time frames.
            </para>
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsModes.ServerOnly">
            <summary>
            The server simulates and sends states to all clients. Clients do not attempt prediction and will render remote objects in the server (relative past) time frame.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsModes.ClientPrediction">
            <summary>
            The server simulates and sends states to all clients. Clients simulate remote states forward into the local time frame (prediction).
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.SceneLoadSpawnModes">
            <summary>
            Spawn Modes while Scene is being loaded
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.SceneLoadSpawnModes.NotAllowed">
            <summary>
            Block all Spawns
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.SceneLoadSpawnModes.Allowed">
            <summary>
            Allow all Spawns
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.SceneLoadSpawnModes.Queued">
            <summary>
            Queue spawn for when Scene is fully loaded
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.DeltaCompressors">
            <summary>
            Delta Compression Implementations
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DeltaCompressors.Managed">
            <summary>
            Default Implementation.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DeltaCompressors.Burst">
            <summary>
            Burst Implementation.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DeltaCompressors.DebugUncompressed">
            <summary>
            Debug Implementation without compression. NOT FOR GENERAL USE.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DefaultResourceName">
            <summary>
            Default file name for the <see cref="T:Fusion.NetworkProjectConfig"/> asset
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.AssetLoadingDelegate">
            <summary>
            <see cref="E:Fusion.NetworkProjectConfig.GlobalAssetLoading"/>
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfig.AssetUndloadingDelegate">
            <summary>
            <see cref="E:Fusion.NetworkProjectConfig.GlobalAssetUnloading"/>
            </summary>
        </member>
        <member name="E:Fusion.NetworkProjectConfig.GlobalAssetLoading">
            <summary>
            Invoked when a config is a about to be loaded from a default location (a Resource <see cref="F:Fusion.NetworkProjectConfig.DefaultResourceName"/>).
            If the event returns a non-null value, it will accepted as the config source and no attempt
            to load the default asset will be made.
            </summary>
        </member>
        <member name="E:Fusion.NetworkProjectConfig.GlobalAssetUnloading">
            <summary>
            Invoked when a config is about to be unloaded (due to <see cref="M:Fusion.NetworkProjectConfig.UnloadGlobal"/>).
            </summary>
        </member>
        <member name="P:Fusion.NetworkProjectConfig.Global">
            <summary>
            Reference for the default <see cref="T:Fusion.NetworkProjectConfig"/>
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.UnloadGlobal">
            <summary>
            Unloads <see cref="P:Fusion.NetworkProjectConfig.Global"/>, if already loaded. If loading <see cref="P:Fusion.NetworkProjectConfig.Global"/> has faulted, resets the state
            and next call to the <see cref="P:Fusion.NetworkProjectConfig.Global"/> accessor will attempt to load the config again.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CurrentTypeId">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> Type ID
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CurrentVersion">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> version
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Version">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> version
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.TypeId">
            <summary>
            Current <see cref="T:Fusion.NetworkProjectConfig"/> Type ID
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PeerMode">
            <summary>
            Setting for whether multiple peers can run per Unity instance (typically to allow easy testing of multiple peers inside of the editor).
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PhysicsEngine">
            <summary>
            Setting for which physics engine Fusion will simulate with.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.ServerPhysicsMode">
            <summary>
            Setting for which <see cref="F:Fusion.NetworkProjectConfig.ServerPhysicsMode"/> Fusion will use in server or host mode. Not used in shared mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.UseLagCompensation">
            <summary>
            Use lag compensation. Not used in shared mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.LagCompensation">
            <summary>
            Advanced lag compensation buffer settings.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.SceneLoadSpawnMode">
            <summary>
            Current <see cref="F:Fusion.NetworkProjectConfig.SceneLoadSpawnMode"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.DeltaCompressor">
            <summary>
            Current <see cref="F:Fusion.NetworkProjectConfig.DeltaCompressor"/> type.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.InvokeRenderInBatchMode">
            <summary>
            Signal if the <see cref="M:Fusion.SimulationBehaviour.Render"/> callbacks should be invoked in Batch Mode.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.MaxNetworkedObjectCount">
            <summary>
            Max number of allowed <see cref="T:Fusion.NetworkObject"/>s in a room.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NetworkIdIsObjectName">
            <summary>
            Signal if the <see cref="T:Fusion.NetworkId"/> of the <see cref="T:Fusion.NetworkObject"/> should be included on the name of the <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.HideNetworkObjectInactivityGuard">
            <summary>
            Inactive <see cref="T:Fusion.NetworkObject"/> need special handling in case they get destroyed without ever being activated. This is achieved
            with adding a nested GameObject called "NetworkObjectInactivityGuard" that tracks the OnDestroy message. <see cref="F:Fusion.NetworkProjectConfig.HideNetworkObjectInactivityGuard"/>
            can be used to control whether these guards are visible in the hierarchy or not.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.EnableHostMigration">
            <summary>
            Enable support for Host Migration.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.HostMigrationSnapshotInterval">
            <summary>
            Delay in seconds between each time the Host sends a Snapshot
            of the current Simulation State, for use in Host Migration.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.PrefabTable">
            <summary>
            Reference to the <see cref="T:Fusion.NetworkPrefabTable"/> instance for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Simulation">
            <summary>
            Reference to <see cref="T:Fusion.SimulationConfig"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Interpolation">
            <summary>
            Reference to <see cref="T:Fusion.InterpolationConfiguration"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Network">
            <summary>
            Reference to <see cref="T:Fusion.NetworkConfiguration"/> settings for this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NetworkConditions">
            <summary>
            Settings for simulating network conditions of latency and loss.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.Heap">
            <summary>
            Heap Settings
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.AccuracyDefaults">
            <summary>
            The named global accuracies used by this project.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.AssembliesToWeave">
            <summary>
            Names of assemblies Fusion is going to weave. Not case sensitive.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.UseSerializableDictionary">
            <summary>
            Use Fusion.SerializableDictionary to store [Networked] dictionary properties initial value. If unchecked,
            the weaver will emit System.Generic.Dictionary instead - a type that's not Unity-serializable, but custom
            serializers (e.g. Odin) may support it.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.NullChecksForNetworkedProperties">
            <summary>
            If set, the weaver will add a check to all [Networked] properties on each <see cref="T:Fusion.NetworkBehaviour"/>
            to verify if owing <see cref="T:Fusion.NetworkObject"/> has been attached to.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CheckRpcAttributeUsage">
            <summary>
            If set, the weaver will check if <see cref="T:Fusion.RpcAttribute"/> is used in types that do not support it. This requires
            all types to be scanned and can increase weaving duration.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfig.CheckNetworkedPropertiesBeingEmpty">
            <summary>
            If set, the weaver will check if <see cref="T:Fusion.NetworkedAttribute"/> properties getters and setters are empty.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Copy">
            <summary>
            Make a copy of the <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.ToString">
            <summary>
            ToString() implementation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkProjectConfig.FusionVersionInfo">
            <summary>
            Get the version information for the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Serialize(Fusion.NetworkProjectConfig)">
            <summary>
            Serialize a <see cref="T:Fusion.NetworkProjectConfig"/> into a JSON string.
            </summary>
            <param name="config">NetworkProjectConfig reference</param>
            <returns>JSON String</returns>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.Deserialize(System.String)">
            <summary>
            De-serialize a <see cref="T:Fusion.NetworkProjectConfig"/> from a JSON string (typically sent by the Room's Creator).
            </summary>
            <param name="data">JSON string of a serialized NetworkProjectConfig</param>
            <returns>NetworkProjectConfig reference de-serialized from JSON string</returns>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.SerializeMinimal(Fusion.NetworkProjectConfig)">
            <summary>
            Remove unnecessary data from serialized version of <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkProjectConfig.ConvertPhysicsMode(Fusion.NetworkProjectConfig.PhysicsEngines)">
            <summary>
            Convert between <see cref="T:Fusion.NetworkProjectConfig.PhysicsEngines"/> to <see cref="T:UnityEngine.SceneManagement.LocalPhysicsMode"/>
            </summary>
        </member>
        <member name="T:Fusion.NetworkProjectConfigAsset">
            <summary>
            Manages and references the current instance of <see cref="T:Fusion.NetworkProjectConfig"/>
            </summary>
        </member>
        <member name="P:Fusion.NetworkProjectConfigAsset.FusionVersionInfo">
            <summary>
            Get the version information for the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfigAsset.PrefabAssetsContainerPath">
            <summary>
            Path to <see cref="T:Fusion.NetworkPrefabAssetCollection"/> asset (created on demand if non-existent), which will serve as a host
            for lightweight <see cref="T:Fusion.NetworkPrefabAsset"/> assets. They can be used to reference prefabs
            alternatively to <see cref="T:Fusion.NetworkPrefabRef"/> and regular <see cref="T:Fusion.NetworkObject"/> references,
            offering the best of two worlds: decoupling and Find References support.
            <br/>
            Suggested path: Assets/Photon/Fusion/User/NetworkPrefabAssetCollection.asset
            </summary>
        </member>
        <member name="F:Fusion.NetworkProjectConfigAsset.Prefabs">
            <summary>
            An auto-generated list containing source information (e.g. Resource path, address, static reference) for all the prefabs that can be spawned, i.e. the ones with <see cref="T:Fusion.NetworkObject"/>
            component and <see cref="P:Fusion.NetworkObject.IsSpawnable"/> enabled.
            <br/>
            Additional prefabs can registered at runtime with <see cref="M:Fusion.NetworkPrefabTable.TryAdd(Fusion.NetworkObjectGuid,Fusion.INetworkPrefabSource,Fusion.NetworkPrefabId@)"/>.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner">
            <summary>
            Represents a Server or Client Simulation.
            </summary>
            <summary>
            Host Migration related code in order to get a copy of the Simulation State
            </summary>
            <summary>
            All Scene related API and fields
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.BuildTypes">
            <summary>
            Enumeration of Fusion.Runtime.dll options.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.BuildTypes.Debug">
            <summary>
            Use the Debug version of the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.BuildTypes.Release">
            <summary>
            Use the Debug version of the Fusion.Runntime.dll.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.States">
            <summary>
            Initialization stages of Fusion
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Starting">
            <summary>
            Runner is about to start
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Running">
            <summary>
            Runner is running
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.States.Shutdown">
            <summary>
            Runner is shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.BuildType">
            <summary>
            Get Fusion.Runtime.dll build type.
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.OnBeforeSpawned">
            <summary>
            Delegate type for on before spawned callback
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.DeferredShutdownParams">
            <summary>
            Stores the Shutdown parameters used when requesting a Shutdown from inside a Runner Callback
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSimulationUpdating">
            <summary>
            Is the runner updating the simulation.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._initializeOperation">
            <summary>
            Completion Source for the startup Photon Cloud Operations
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsInitialized">
            <summary>
            Check if the Runner was properly Initialized
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsVisible">
            <summary>
            Change the visibility of this NetworkRunner when running in Multiple Peer Mode
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ProvideInput">
            <summary>
            Indicates if this <see cref="T:Fusion.NetworkRunner"/> is collecting <see cref="T:Fusion.PlayerRef"/> <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Topology">
            <summary>
            The current topology used
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Simulation">
            <summary>
            Returns the <see cref="T:Fusion.Simulation"/> for this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Mode">
            <summary>
            Returns the <see cref="T:Fusion.SimulationModes"/> flags for The type of network peer the associated <see cref="T:Fusion.Simulation"/> represents.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Stage">
            <summary>
            Returns the current <see cref="T:Fusion.SimulationStages"/> stage of this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.DeltaTime">
            <summary>
            Returns the fixed tick time interval. Derived from the <see cref="F:Fusion.SimulationConfig.TickRate"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SimulationTime">
            <summary>
            The time the current State <see cref="T:Fusion.SimulationSnapshot"/> represents (the most recent FixedUpdateNetwork simulation). 
            Use as an equivalent to Unity's Time.fixedTime.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SimulationRenderTime">
            <summary>
            The current time (current State.Time + Simulation.DeltaTime) for predicted objects (objects in the local time frame). 
            Use as an equivalent to Unity's Time.time.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.InterpolationRenderTime">
            <summary>
            The current time (current State.Time + Simulation.DeltaTime) for non-predicted objects (objects in a remote time frame). 
            Use as an equivalent to Unity's Time.time.
            Time is relative to Tick 0 (which represents Time 0f).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsRunning">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> is valid and running.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsShutdown">
            <summary>
            If the runner is shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsRegularShutdown">
            <summary>
            Are we dealing with a regular, planned shutdown.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsStarting">
            <summary>
            If the runner is pending to start
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsClient">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> represents a Client connection.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsConnectedToServer">
            <summary>
            Returns if this Client is currently connected to a Remote Server
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsServer">
            <summary>
            Returns if this <see cref="T:Fusion.Simulation"/> represents a Server connection.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsPlayer">
            <summary>
            Returns true if this runner represents a Client or Host. Dedicated servers have no local player and will return false.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSinglePlayer">
            <summary>
            Returns true if this runner was started as single player (Started as <see cref="F:Fusion.SimulationModes.Host"/> with <see cref="F:Fusion.SimulationConfig.DefaultPlayers"/> = 1).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsLastTick">
            <summary>
            If this is the last tick that is being executed this update
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsFirstTick">
            <summary>
            If this is the first tick that executes this update or re-simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsForward">
            <summary>
            If this is not a re-simulation but a new forward tick
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsResimulation">
            <summary>
            If we are currently executing a client side prediction re-simulation.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.State">
            <summary>
            The current state of the runner, if it's Starting, Running, Shutdown
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LocalPlayer">
            <summary>
            Returns a <see cref="T:Fusion.PlayerRef"/> for the local simulation. For a dedicated server <see cref="P:Fusion.PlayerRef.IsValid"/> will equal false. 
            PlayerRefs are assigned in order from 0 to MaxPlayers-1 and are re-used as players join and leave.
            The only caveat is that the server player (if one exists), always gets the last index no matter how many clients are connected.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Tick">
            <summary>
            The tick associated with the current state of networked objects, or the current simulation tick being processed (when evaluated during FixedUpdateNetwork).
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.Config">
            <summary>
            Returns the <see cref="T:Fusion.NetworkProjectConfig"/> reference.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.TicksExecuted">
            <summary>
            Returns how many ticks we executed last update.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ActivePlayers">
            <summary>
            Returns the collection of <see cref="T:Fusion.PlayerRef"/> objects for this NetworkRunner's <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SceneManager">
            <summary>
            Returns the <see cref="T:Fusion.INetworkSceneManager"/> instance.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.ObjectPool">
            <summary>
            Returns the <see cref="T:Fusion.INetworkObjectPool"/> instance.
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner.OperationsCancellationTokenSource">
            <summary>
            Global CancellationTokenSource for this NetworkRunner Instance
            Used to control all async operations along the life cycle of the Runner
            Should be used in conjunction with <see cref="T:Fusion.Async.TaskManager"/>
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.OperationsCancellationToken">
            <summary>
            Global copy of the Cancellation Token for this NetworkRunner Instance
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LagCompensation">
            <summary>
            Returns the global instance of a lag compensation buffer <see cref="T:Fusion.HitboxManager"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Disconnect(Fusion.PlayerRef)">
            <summary>
            Disconnect a player from the server
            </summary>
            <param name="player">Player to disconnect</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Disconnect(Fusion.Sockets.NetAddress)">
            <summary>
            Disconnect a client based on its NetAddress
            </summary>
            <param name="address">NetAddress of the client</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Connect(Fusion.Sockets.NetAddress,System.Byte[],System.Byte[])">
            <summary>
            Connect this <see cref="T:Fusion.NetworkRunner"/> as a client to a Server.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Shutdown(System.Boolean,Fusion.ShutdownReason,System.Boolean)">
            <summary>
            Initiates a <see cref="M:Fusion.Simulation.Dispose"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Initialize(Fusion.NetworkRunnerInitializeArgs)">
            <summary>
            Starts <see cref="T:Fusion.NetworkRunner"/> using the supplied arguments.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerPause">
            <summary>
            Pauses the game in single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerContinue">
            <summary>
            Continues a paused game in single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SinglePlayerPause(System.Boolean)">
            <summary>
            Sets the paused state in a single player
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SetInterestGroup(Fusion.NetworkObject,Fusion.PlayerRef,System.String,System.Boolean)">
            <summary>
            Add or remove Player's interest in a specific named Interest Group for a specific <see cref="T:Fusion.NetworkObject"/>.  
            <see cref="F:Fusion.SimulationConfig.ReplicationMode"/> must be set to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerActorId(Fusion.PlayerRef)">
            <summary>
            Gets Player's Actor Number (ID).
            
            If used in Shared Mode, every client can get this information.
            If used in Client Server Mode, only the Server is able to get this information.
            </summary>
            <param name="player">PlayerRef to get the Actor Number (ID)</param>
            <returns>Actor Number associated with the PlayerRef, otherwise null.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerUserId(Fusion.PlayerRef)">
            <summary>
            Gets Player's UserID.
            
            If used in Shared Mode, every client can get this information.
            If used in Client Server Mode, only the Server is able to get this information.
            </summary>
            <param name="player">PlayerRef to get the UserID. If no PlayerRef is passed, the UserID of the local client is returned instead.</param>
            <returns>UserID if valid player found, otherwise null.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SetPlayerObject(Fusion.PlayerRef,Fusion.NetworkObject)">
            <summary>
            Sets the network object associated with this player
            </summary>
            <param name="player"></param>
            <param name="networkObject"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerObject(Fusion.PlayerRef)">
            <summary>
            Gets the network object associated with a specific player
            </summary>
            <param name="player"></param>
            <returns>Network object if one is associated with the player</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerRtt(Fusion.PlayerRef)">
            <summary>
            Returns the player round trip time (ping) in seconds
            </summary>
            <param name="playerRef">The player you want the round trip time for</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendRpc(Fusion.SimulationMessage*)">
            <summary>
            Sends RPC message. Not meant to be used directly, ILWeaver calls this.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendRpc(Fusion.SimulationMessage*,Fusion.RpcSendResult@)">
            <summary>
            Sends RPC message. Not meant to be used directly, ILWeaver calls this.
            </summary>
            <param name="message"></param>
            <param name="info"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.IsPlayerValid(Fusion.PlayerRef)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.IsPlayerActive(Fusion.PlayerRef)">
            <summary>
            
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerConnectionToken(Fusion.PlayerRef)">
            <summary>
            Returns a copy of the Connection Token used by a Player when connecting to this Server.
            Only available on Server. It will return null if running on a Client or the Connection token is missing
            </summary>
            <param name="player">PlayerRef to check for a Connection Token</param>
            <returns>Copy of the Connection Token</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPlayerConnectionType(Fusion.PlayerRef)">
            <summary>
            Return the <see cref="T:Fusion.ConnectionType"/> with a Remote <see cref="T:Fusion.PlayerRef"/>.
            Valid only when invoked from a Server (<see cref="P:Fusion.NetworkRunner.IsServer"/>)
            </summary>
            <param name="player">Remote Player to check the <see cref="T:Fusion.ConnectionType"/></param>
            <returns><see cref="T:Fusion.ConnectionType"/> with a <see cref="T:Fusion.PlayerRef"/></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetAllBehaviours(System.Type)">
            <summary>
            Returns array of all <see cref="T:Fusion.SimulationBehaviour"/> registered with this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.AddCallbacks(Fusion.INetworkRunnerCallbacks[])">
            <summary>
            Register an <see cref="T:Fusion.INetworkRunnerCallbacks"/> instance for callbacks from this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="callbacks"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveCallbacks(Fusion.INetworkRunnerCallbacks[])">
            <summary>
            Unregister an <see cref="T:Fusion.INetworkRunnerCallbacks"/> instance for callbacks from this <see cref="T:Fusion.NetworkRunner"/>.
            </summary>
            <param name="callbacks"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendReliableDataToPlayer(Fusion.PlayerRef,System.Byte[])">
            <summary>
            Send an arbitrary data buffer to a target Player
            </summary>
            <param name="player">Player that should receive the buffer</param>
            <param name="data">Buffer to be sent</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SendReliableDataToServer(System.Byte[])">
            <summary>
            Send an arbitrary data buffer to the Server
            </summary>
            <param name="data">Buffer to be sent</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SetPlayerAlwaysInterested(Fusion.PlayerRef,Fusion.NetworkObject,System.Boolean)">
            <summary>
            Flags this player as always interested in this object. Means it does not have to be in a players area of interest to be replicated.
            </summary>
            <param name="player">The player</param>
            <param name="networkObject">The object</param>
            <param name="alwaysInterested">If he's always interested, or not.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.AddPlayerAreaOfInterest(Fusion.PlayerRef,UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Adds an area of interest region for a specific player. A player can have multiple areas of interest regions added. 
            These are cleared every tick, so this needs to be called every <see cref="M:Fusion.NetworkBehaviour.FixedUpdateNetwork"/>.
            </summary>
            <param name="player">The player</param>
            <param name="position">Center position of the area of interest</param>
            <param name="extent">The extents of the area of interest.</param>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInputForPlayer``1(Fusion.PlayerRef)">
            <summary>
            Returns the <see cref="T:Fusion.NetworkInput"/> data from player, converted to the indicated <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRawInputForPlayer(Fusion.PlayerRef)">
            <summary>
            Returns the unconverted unsafe <see cref="T:Fusion.NetworkInput"/> for the indicated player.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetInputForPlayer``1(Fusion.PlayerRef,``0@)">
            <summary>
            Outputs the <see cref="T:Fusion.NetworkInput"/> from player, translated to the indicated <see cref="T:Fusion.INetworkInput"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.FindObject(Fusion.NetworkId)">
            <summary>
            Get the <see cref="T:Fusion.NetworkObject"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="oref"></param>
            <returns>null if object cannot be found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindObject(Fusion.NetworkId,Fusion.NetworkObject@)">
            <summary>
            Get the <see cref="T:Fusion.NetworkObject"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkId"/>.
            </summary>
            <param name="oref"></param>
            <param name="obj"></param>
            <returns>True if object was found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryFindBehaviour(Fusion.NetworkBehaviourId,Fusion.NetworkBehaviour@)">
            <summary>
            Get the <see cref="T:Fusion.NetworkBehaviour"/> instance for this <see cref="T:Fusion.NetworkRunner"/> from a <see cref="T:Fusion.NetworkBehaviourId"/>.
            </summary>
            <param name="bref"></param>
            <param name="behaviour"></param>
            <returns>True if object was found.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInterpolationData(Fusion.NetworkBehaviour,System.Boolean,Fusion.InterpolationData@)">
            <summary>
            Gets the <see cref="T:Fusion.InterpolationData"/> for the current <see cref="T:Fusion.SimulationStages"/> stage. For use in the <see cref="T:Fusion.NetworkBehaviour"/>.Render() callback.
            </summary>
            <param name="behaviour"></param>
            <param name="predicted">Indicate if the start and end ticks should represent predicted, or state snapshots.</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryGetNetworkedBehaviourFromNetworkedObjectRef``1(Fusion.NetworkId)">
            <summary>
            Tries to return the first instance of T found on the root of a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns>Returns the found component. Null if the <see cref="T:Fusion.NetworkObject"/> cannot be found, or if T cannot be found on the GameObject.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.SetSimulationState(Fusion.NetworkObject,System.Boolean)">
            <summary>
            Sets the simulation state for this object, if it takes part in the NetworkFixedUpdate, etc.
            </summary>
            <param name="obj">the object to change state for</param>
            <param name="simulate">true if it should be simulated, false if otherwise</param>
            <returns>true if the state of the object changed, false otherwise</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Exists(Fusion.NetworkObject)">
            <summary>
            Returns if the <see cref="T:Fusion.Simulation"/> contains a reference to a <see cref="T:Fusion.NetworkObject"/> in the current State <see cref="T:Fusion.SimulationSnapshot"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Exists(Fusion.NetworkId)">
            <summary>
            Returns if the <see cref="T:Fusion.Simulation"/> contains a <see cref="T:Fusion.NetworkObject"/> with given <paramref name="id"/> in the current State <see cref="T:Fusion.SimulationSnapshot"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.ExistsIn(Fusion.NetworkObject,Fusion.SimulationSnapshot)">
            <summary>
            Returns if the <see cref="T:Fusion.Simulation"/> contains a reference to a <see cref="T:Fusion.NetworkObject"/> in the specified State <see cref="T:Fusion.SimulationSnapshot"/>.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn``1(``0,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a Component type that is part of a <see cref="T:Fusion.NetworkObject"/>
            </summary>
            <typeparam name="T">Must be a Type derived from <see cref="T:Fusion.SimulationBehaviour"/></typeparam>
            <param name="prefab"><see cref="T:Fusion.SimulationBehaviour"/> used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(UnityEngine.GameObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a GameObject. The supplied GameObject must have a <see cref="T:Fusion.NetworkObject"/> component.
            </summary>
            <param name="prefab">A GameObject with a <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkObject,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObject"/> prefab.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefab">Prefab used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkPrefabRef,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey})">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabRef"/>.
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabRef">Prefab Ref used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkPrefabAsset,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey})">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabAsset"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabAsset">Prefab Asset used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkObjectGuid,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkObjectGuid"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabGuid">Object Guid used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Spawn(Fusion.NetworkPrefabId,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},Fusion.NetworkRunner.OnBeforeSpawned,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean,Fusion.NetworkObject)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabId">Prefab ID used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <param name="resumeNO">Used as reference when re-creating the NetworkObject from a old simulation. Accepted only when resuming from a Host Migration.</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.Despawn(Fusion.NetworkObject,System.Boolean)">
            <summary>
            Destroys a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
            <param name="networkObject"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.AddOrGetGlobal``1">
            <summary>
            Ensures that a specific <see cref="T:Fusion.SimulationBehaviour"/> component exists on this <see cref="T:Fusion.NetworkRunner"/> gameobject. 
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveGlobal``1">
            <summary>
            Removes a specific <see cref="T:Fusion.SimulationBehaviour"/> from this <see cref="T:Fusion.NetworkRunner"/> gameobject, if it exists.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.AddSimulationBehaviour(Fusion.SimulationBehaviour,Fusion.NetworkObject)">
            <summary>
            Register a <see cref="T:Fusion.SimulationBehaviour"/> instance with the <see cref="T:Fusion.SimulationBehaviourUpdater"/>. 
            Invalid if NetworkRunner has not been started and initialized.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.RemoveSimulationBehavior(Fusion.SimulationBehaviour)">
            <summary>
            Unregister a <see cref="T:Fusion.SimulationBehaviour"/> instance from the <see cref="T:Fusion.SimulationBehaviourUpdater"/> callbacks. 
            Invalid if NetworkRunner has not been started and initialized.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.Attach(Fusion.NetworkObject,System.Nullable{Fusion.PlayerRef})">
            <summary>
            Attaches a user created network object to the network 
            </summary>
            <param name="networkObject">The object to attach</param>
            <param name="inputAuthority">If assigned who is the default input authority for this object</param>
        </member>
        <member name="M:Fusion.NetworkRunner.SpawnInternal(Fusion.NetworkPrefabId,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{Fusion.PlayerRef},System.Object,System.Nullable{Fusion.NetworkObjectPredictionKey},System.Boolean,Fusion.NetworkObject)">
            <summary>
            Attempts to network instantiate a <see cref="T:Fusion.NetworkObject"/> using a <see cref="T:Fusion.NetworkPrefabId"/>
            Note: position and rotation values are only used locally for the instantiation of the object, and are not inherently networked.
            Use <see cref="T:Fusion.NetworkPositionRotation"/>, or any of its derived classes such as <see cref="T:Fusion.NetworkTransform"/> to replicate the initial transform state.
            </summary>
            <param name="prefabId">Prefab ID used to spawn the <see cref="T:Fusion.NetworkObject"/></param>
            <param name="position">Spawn Position</param>
            <param name="rotation">Spawn Rotation</param>
            <param name="inputAuthority">Player Input Authority</param>
            <param name="onBeforeSpawned"><see cref="T:Fusion.NetworkRunner.OnBeforeSpawned"/> reference</param>
            <param name="predictionKey"><see cref="T:Fusion.NetworkObjectPredictionKey"/> reference</param>
            <param name="syncPhysics">
            If <see cref="M:UnityEngine.Physics.SyncTransforms"/> and <see cref="M:UnityEngine.Physics2D.SyncTransforms"/> should be called after
            setting the network object <paramref name="position"/> and/or <paramref name="rotation"/>, if provided.
            </param>
            <param name="resumeNO">Used as reference when re-creating the NetworkObject from a old simulation. Accepted only when resuming from a Host Migration.</param>
            <returns><see cref="T:Fusion.NetworkObject"/> reference, or null if it was not able to spawn the object</returns>
        </member>
        <member name="P:Fusion.NetworkRunner.IsHostMigrationEnabled">
            <summary>
            Signal if Fusion was initilized with Host Migration system enabled
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsResume">
            <summary>
            if this instance is a resume (host migration)
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.PushHostMigrationSnapshot">
            <summary>
            Compute and send a Host Migration Snapshot to the Photon Cloud
            </summary>
            <returns>Task with the result of the operation. True if it was successful, false otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetResumeSnapshotNetworkObjects">
            <summary>
            Iterate over the old NetworkObjects from the Resume Snapshot
            </summary>
            <returns>Iterable list of <see cref="T:Fusion.NetworkObject"/></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetResumeSnapshotNetworkSceneObjects">
            <summary>
            Iterate over the Scene NetworkObjects from the Resume Snapshot while giving the reference of the old 
            Snapshot data associated with that particular Scene Object
            </summary>
            <returns>Iterable list of Scene <see cref="T:Fusion.NetworkObject"/> and Scene Object Header</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.CleanHostMigrationSnapshots">
            <summary>
            Clean all Snapshot references
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetResumeNetworkId">
            <summary>
            Get the next NetworkID used while resuming the simulation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetNetworkObjectFromResumeSnapshot(Fusion.NetworkObjectHeaderPtr,System.Collections.Generic.Dictionary{Fusion.NetworkId,Fusion.NetworkObjectHeaderPtr},System.Collections.Generic.Dictionary{Fusion.NetworkId,System.Collections.Generic.List{Fusion.NetworkId}})">
            <summary>
            Gets a temporary representation of a <see cref="T:Fusion.NetworkObject"/> from the old Server Snapshot
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetSceneNetworkObjectFromResumeSnapshot(Fusion.NetworkObjectHeaderPtr)">
            <summary>
            Get the reference of a specific Scene Object associated with a NO Header from the old Server Snapshot
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SetupHostMigration(Fusion.Protocol.HostMigration)">
            <summary>
            Setup Host Migration information
            </summary>
            <param name="hostMigration"></param>
        </member>
        <member name="M:Fusion.NetworkRunner.StartHostMigration(Fusion.Protocol.Snapshot)">
            <summary>
            Start the Host Migration process
            </summary>
            <param name="snapshot">Base Snapshot to be used when restarting the Host</param>
        </member>
        <member name="M:Fusion.NetworkRunner.Service_HostSnapshot">
            <summary>
            Recurring Service method that will check if the Job responsible for computing 
            the Server Snapshot has finished the process and will push the result for later use
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetServerSnapshot">
            <summary>
            Start the Snapshot build using an async process
            This will return a Task that can be awaited witht the result of the operation
            </summary>
            <returns>Await Task that will complete with the Snapshot computation</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.BuildCompressHostSnapshotJob">
            <summary>
            Creates a Job to build the Server Simulation Snapshot
            </summary>
            <returns>Ready to use <see cref="T:Fusion.NetworkRunner.HostSnapshotCompressionJob"/></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeHostMigration(Fusion.HostMigrationToken)">
            <summary>
            Signal the Host Migration process has started
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunner.HostSnapshotCompressionJob">
            <summary>
            Unity Job responsible for computing a Server Snapshot
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetInstancesEnumerator">
            <summary>
            Get enumerator for the collection of all <see cref="T:Fusion.NetworkRunner"/>s. Allows
            to enumerate alloc-free.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fusion.NetworkRunner.Instances">
            <summary>
            A list of all <see cref="T:Fusion.NetworkRunner"/>s.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsCloudReady">
            <summary>
            Signal if the Local Peer is connected to Photon Cloud and is able to Create/Join Room but also receive Lobby Updates
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.UserId">
            <summary>
            Photon Client UserID
            </summary>
            <remarks>Returns null if Peer is not connected to Photon Cloud</remarks>
        </member>
        <member name="P:Fusion.NetworkRunner.AuthenticationValues">
            <summary>
            <see cref="P:Fusion.NetworkRunner.AuthenticationValues"/> used by this Runner to Authenticate the local peer.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.GameMode">
            <summary>
            Current Game Mode active on the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SessionInfo">
            <summary>
            Stores information about the current running session
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.LobbyInfo">
            <summary>
            Signal if the local peer is already inside a Lobby
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.CurrentConnectionType">
            <summary>
            Check the current Connection Type with the Remote Server
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.NATType">
            <summary>
            Exposes the current NAT Type from the local Peer
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsSharedModeMasterClient">
            <summary>
            Signal if the Local Peer is in a Room and is the Room Master Client
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._cloudOperation">
            <summary>
            Completion Source for the startup Photon Cloud Operations
            </summary>
        </member>
        <member name="F:Fusion.NetworkRunner._cloudServices">
            <summary>
            Responsible to manage the Photon Cloud related Services
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.JoinSessionLobby(Fusion.SessionLobby,System.String,Fusion.Photon.Realtime.AuthenticationValues,Fusion.Photon.Realtime.AppSettings)">
            <summary>
            Join the Peer to a specific Lobby, either a prebuild or a custom one.
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
            <param name="sessionLobby">Lobby Type to Join</param>
            <param name="lobbyID">Lobby ID</param>
            <param name="authentication">Authentication Values used to authenticate this peer</param>
            <param name="customAppSettings">Custom Photon Application Settings</param>
            <returns>Async Task to Join a Session Lobby. Can be used to wait for the process to be finished.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGame(Fusion.StartGameArgs)">
            <summary>
            Starts the local Fusion Runner and takes care of all major setup necessary
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
            <param name="args">Custom arguments used to setup the Fusion Simulation</param>
            <returns>Task that can be awaited to chain actions</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.ConnectToCloud(Fusion.Photon.Realtime.AuthenticationValues,Fusion.Photon.Realtime.AppSettings,Fusion.CloudCommunicator)">
            <summary>
            Connect the local peer to Photon Cloud using an async process.
            </summary>
            <param name="authentication">Authentication Values used to authenticate this peer</param>
            <param name="customAppSettings">Custom Photon Application Settings</param>
            <param name="externalCommunicator">External Communicator that will be reused on restart</param>
            <returns>Async Task of the connect to Photon Cloud process. Can be used to wait for the process to be finished.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.DisconnectFromCloud">
            <summary>
            Disconnect the Peer from Photon Cloud
            
            If the Cloud Services were not initialized, it just returns immediately
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGameModeSinglePlayer(Fusion.StartGameArgs)">
            <summary>
            Start Fusion in Single Player Mode
            </summary>
            <param name="args">Initialization Arguments</param>
            <returns>A running Task of the initialization process</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.StartGameModeCloud(Fusion.StartGameArgs)">
            <summary>
            Start Fusion in one of the Cloud Game Modes
            </summary>
            <param name="args">Initialization Arguments</param>
            <returns>A running Task of the initialization process</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.ShutdownWithException(System.Exception)">
            <summary>
            Shutdown the Fusion Runner based on a arbitrary Exception
            </summary>
            <param name="e">Exception used as base for the Shutdown procedure</param>
            <returns>Awaitable Task of the Shutdown procedure</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSessionListUpdated(System.Collections.Generic.List{Fusion.SessionInfo})">
            <summary>
            Signal an update on the list of <see cref="P:Fusion.NetworkRunner.SessionInfo"/>
            </summary>
            <param name="sessionList">New Session Info</param>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeCustomAuthenticationResponse(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Signal an update on the list of <see cref="P:Fusion.NetworkRunner.SessionInfo"/>
            </summary>
            <param name="data">Custom Authentication Response</param>
        </member>
        <member name="P:Fusion.NetworkRunner.CurrentScene">
            <summary>
            Returns the current loaded network scene.
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.SimulationUnityScene">
            <summary>
            Returns the Unity scene for this <see cref="T:Fusion.NetworkRunner"/>. With <see cref="F:Fusion.NetworkProjectConfig.PeerModes.Multiple"/>, multiple physics scenes may exist, and this getter should be used in place of SceneManager.GetActiveScene(). 
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.MultiplePeerUnityScene">
            <summary>
            A scene used when run in <see cref="F:Fusion.NetworkProjectConfig.PeerModes.Multiple"/> mode. 
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunner.IsMultiplePeerSceneTemp">
            <summary>
            Signal if this Runner is already in a Temp Physics Scene
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.SetActiveScene(Fusion.SceneRef)">
            <summary>
            Update the current Active Scene
            </summary>
            <param name="scene"><see cref="T:Fusion.SceneRef"/> to be activated</param>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSceneLoadStart">
            <summary>
            Invoke <see cref="M:Fusion.INetworkRunnerCallbacks.OnSceneLoadStart(Fusion.NetworkRunner)"/> on all implementations
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InvokeSceneLoadDone">
            <summary>
            Invoke <see cref="M:Fusion.INetworkRunnerCallbacks.OnSceneLoadDone(Fusion.NetworkRunner)"/> on all implementations
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRunnerForGameObject(UnityEngine.GameObject)">
            <summary>
            Get the <see cref="T:Fusion.NetworkRunner"/> a GameObject instance belongs to.
            </summary>
            <param name="gameObject">GameObject to check for a <see cref="T:Fusion.NetworkRunner"/></param>
            <returns><see cref="T:Fusion.NetworkRunner"/> reference, or null if not found</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRunnerForScene(UnityEngine.SceneManagement.Scene)">
            <summary>
            Get the <see cref="T:Fusion.NetworkRunner"/> from a specific Scene
            </summary>
            <param name="scene">Scene to check for a <see cref="T:Fusion.NetworkRunner"/></param>
            <returns><see cref="T:Fusion.NetworkRunner"/> reference, or null if not found</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.TryMultiplePeerAssignTempScene">
            <summary>
            Try to create a temp empty scene for PhysicsScene
            </summary>
            <returns>false if the runner was on the temp scene already, true otherwise.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPhysicsScene">
            <summary>
            Get the 3D Physics scene being used by this Runner.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.GetPhysicsScene2D">
            <summary>
            Get the 2D Physics scene being used by this Runner.
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene(UnityEngine.GameObject)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene``1(``0)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.InstantiateInRunnerScene``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates an object in the scene of this runner
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunner.MoveToRunnerScene``1(``0)">
            <summary>
            Moves an object to the scene of this runner
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component">Component of object to move</param>
        </member>
        <member name="M:Fusion.NetworkRunner.MoveToRunnerScene(UnityEngine.GameObject)">
            <summary>
            Moves an object to the scene of this runner
            </summary>
            <param name="go">Object to move</param>
        </member>
        <member name="M:Fusion.NetworkRunner.EnsureRunnerSceneIsActive(UnityEngine.SceneManagement.Scene@)">
            <summary>
            If running in <see cref="F:Fusion.NetworkProjectConfig.PeerModes.Multiple"/> peer mode and the current active 
            scene is different than <see cref="P:Fusion.NetworkRunner.MultiplePeerUnityScene"/>, switches active scene to <see cref="P:Fusion.NetworkRunner.MultiplePeerUnityScene"/>,
            stores the previous active scene in <paramref name="previousActiveScene"/> and returns true.
            Returns false otherwise.
            </summary>
            <param name="previousActiveScene"></param>
            <returns>True if an actual change occurred.</returns>
        </member>
        <member name="M:Fusion.NetworkRunner.GetRunnerForScene(System.Int32)">
            <summary>
            Retrieve the associated <see cref="T:Fusion.NetworkRunner"/> with an specific Scene
            </summary>
            <param name="sceneHandle">Scene handler to check</param>
            <returns><see cref="T:Fusion.NetworkRunner"/> reference, or null if not found</returns>
        </member>
        <member name="T:Fusion.HostMigrationToken">
            <summary>
            Transitory Holder with all necessary information to restart the Fusion Runner
            after the Host Migration has completed
            </summary>
        </member>
        <member name="P:Fusion.HostMigrationToken.GameMode">
            <summary>
            New GameMode the local peer will assume after the Host Migration
            </summary>
        </member>
        <member name="T:Fusion.StartGameArgs">
            <summary>
            Fusion Start Arguments, used to configure the simulation mode and other settings
            
            More about matchmaking:
            https://doc.photonengine.com/en-us/fusion/current/manual/matchmaking
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.GameMode">
            <summary>
            <see cref="T:Fusion.GameMode"/> in which this peer will start
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SessionName">
            <summary>
            Photon Cloud Session Name used either to Create or Join a Session.
            
            Default: null (random session matching)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Address">
            <summary>
            Peer Binding Address
            
            Default: <see cref="M:Fusion.Sockets.NetAddress.Any(System.UInt16)"/>
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomPublicAddress">
            <summary>
            Custom Public Reflexive Address
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.ObjectPool">
            <summary>
            Object pool to use
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SceneManager">
            <summary>
            See <see cref="T:Fusion.INetworkSceneManager"/>.
            
            Default: null
            
            More about Scene Loading:
            https://doc.photonengine.com/en-us/fusion/current/manual/scene-loading
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Config">
            <summary>
            Custom <see cref="T:Fusion.NetworkProjectConfig"/> used to start the simulation
            
            Default: Global NetworkProjectConfig
            
            More about NetworkProjectConfig:
            https://doc.photonengine.com/en-us/fusion/current/manual/network-project-config
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.PlayerCount">
            <summary>
            Number of players allowed to connect to this peer, when running in Server/Host Mode
            
            Default: DefaultPlayers from the Global NetworkProjectConfig
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Scene">
            <summary>
            Scene that will be set as the starting Scene when running in Server/Host Mode
            
            Default: null (no scene set)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.Initialized">
            <summary>
            Callback that is invoked when the Fusion has fully started
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.DisableNATPunchthrough">
            <summary>
            Flag to disable the NAT Punchthrough implementation and connect only via Relay
            
            Default: false
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomCallbackInterfaces">
            <summary>
            User defined callback interfaces we will provide O(1) constant time lookup for
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.ConnectionToken">
            <summary>
            Connection token sent by client to server. Not used in shared mode.
            
            Default: null (empty connection token)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.SessionProperties">
            <summary>
            Custom Session Properties.
            This dictionary can be used to either setup the initial Session Properties when creating a Session
            but also to set the matchmaking filters when joining a Random Session.
            
            Default: null (empty custom properties)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.IsOpen">
            <summary>
            Session should be created Open or Closed to accept joins
            
            Default: true
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.IsVisible">
            <summary>
            Session should be Visible or not in the Session Lobby list
            
            Default: true
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomLobbyName">
            <summary>
            Session Custom Lobby to be published in
            
            Default: null (default Lobby for each Session Type, LobbyClientServer or LobbyShared)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomSTUNServer">
            <summary>
            Specify a Custom STUN Server used to Resolve the peer Reflexive Addresses
            
            Default: null (no custom STUN Server)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.AuthValues">
            <summary>
            Custom Authentication Data
            
            Default: null (default authentication values)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.CustomPhotonAppSettings">
            <summary>
            Custom Photon Application Settings
            
            Default: null (Global PhotonAppSettings)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.DisableClientSessionCreation">
            <summary>
            Disables the Session creation when starting a Client with an specific Session Name
            
            Default: false (clients *can* create new Sessions)
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.HostMigrationToken">
            <summary>
            Host Migration Token used when restarting the Fusion Simulation
            
            Default: null
            </summary>
        </member>
        <member name="F:Fusion.StartGameArgs.HostMigrationResume">
            <summary>
            Callback invoked when the new Host is migrating from the old Host state
            
            Default: null
            </summary>
        </member>
        <member name="M:Fusion.StartGameArgs.ToString">
            <summary>
            StartGameArgs ToString()
            </summary>
        </member>
        <member name="T:Fusion.GameMode">
            <summary>
            Fusion Game Mode.
            
            Used to select how the local simulation will act.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Single">
            <summary>
            Single Player Mode: it works very similar to <see cref="F:Fusion.GameMode.Host"/> Mode, but don't accept any connections.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Shared">
            <summary>
            Shared Mode: starts a Game Client, which will connect to a Game Server running in the Photon Cloud using the Fusion Plugin.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Server">
            <summary>
            Server Mode: starts a Dedicated Game Server with no local player.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Host">
            <summary>
            Host Mode: starts a Game Server and allows a local player.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.Client">
            <summary>
            Client Mode: starts a Game Client, which will connect to a peer in either <see cref="F:Fusion.GameMode.Server"/> or <see cref="F:Fusion.GameMode.Host"/> Modes.
            </summary>
        </member>
        <member name="F:Fusion.GameMode.AutoHostOrClient">
            <summary>
            Automatically start as Host or Client. The first peer to connect to a room will be started as a Host, all others will connect as clients.
            </summary>
        </member>
        <member name="T:Fusion.ConnectionType">
            <summary>
            Defines the type of the current connection with the Remote Peer,
            either the Server or a Client
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.None">
            <summary>
            No connection is currently active
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.Relayed">
            <summary>
            Connection was accomplished using the Photon Relay Services
            </summary>
        </member>
        <member name="F:Fusion.ConnectionType.Direct">
            <summary>
            Connection was accomplished directly with the remote peer
            </summary>
        </member>
        <member name="T:Fusion.SessionLobby">
            <summary>
            Session Lobby Type
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Invalid">
            <summary>
            Invalid Session Lobby Type
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.ClientServer">
            <summary>
            ClientServer Lobby
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Shared">
            <summary>
            Shared Lobby
            </summary>
        </member>
        <member name="F:Fusion.SessionLobby.Custom">
            <summary>
            Custom Lobby - works in conjuction with a Lobby Name/ID
            </summary>
        </member>
        <member name="T:Fusion.LobbyInfo">
            <summary>
            Holds information about a Lobby
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.IsValid">
            <summary>
            Flag to signal if the <see cref="T:Fusion.LobbyInfo"/> is ready for use.
            This is only true if the peer is currently connected to a Lobby.
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.Name">
            <summary>
            Lobby Name
            </summary>
        </member>
        <member name="P:Fusion.LobbyInfo.Region">
            <summary>
            Stores the current connected Region
            </summary>
        </member>
        <member name="T:Fusion.SessionInfo">
            <summary>
            Holds information about the Game Session
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsValid">
            <summary>
            Flag to signal if the <see cref="T:Fusion.SessionInfo"/> is ready for use
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Name">
            <summary>
            Stores the current Room Name
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Region">
            <summary>
            Stores the current connected Region
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsVisible">
            <summary>
            Signal if the current connected Room is visible
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.IsOpen">
            <summary>
            Signal if the current connected Room is open
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.Properties">
            <summary>
            Room Custom Properties
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.PlayerCount">
            <summary>
            Current number of peers inside this Session, this includes the Server/Host and Clients
            </summary>
        </member>
        <member name="P:Fusion.SessionInfo.MaxPlayers">
            <summary>
            Max number of peer that can join this Session, this value always include an extra slot for the Server/Host
            </summary>
        </member>
        <member name="M:Fusion.SessionInfo.op_Implicit(Fusion.SessionInfo)~System.Boolean">
            <summary>
            Check if the <see cref="T:Fusion.SessionInfo"/> reference is not Null and is Valid.
            </summary>
            <param name="sessionInfo"></param>
        </member>
        <member name="M:Fusion.SessionInfo.UpdateCustomProperties(System.Collections.Generic.Dictionary{System.String,Fusion.SessionProperty})">
            <summary>
            Update or change the Custom Properties of the current joined Room
            </summary>
            <param name="customProperties">New custom properties</param>
        </member>
        <member name="M:Fusion.SessionInfo.ToString">
            <summary>
            String representation of a <see cref="T:Fusion.SessionInfo"/>
            </summary>
            <returns>Formatted <see cref="T:Fusion.SessionInfo"/></returns>
        </member>
        <member name="F:Fusion.SessionInfo.SessionUpdateState.DONE">
            <summary>
            Session is ready to be used
            </summary>
        </member>
        <member name="F:Fusion.SessionInfo.SessionUpdateState.WAIT_FOR_UPDATE">
            <summary>
            There is a pending refresh to be done
            </summary>
        </member>
        <member name="F:Fusion.SessionInfo.SessionUpdateState.TRIGGER_UPDATE">
            <summary>
            Signal the Session data must be updated
            </summary>
        </member>
        <member name="T:Fusion.StartGameResult">
            <summary>
            Represents the result of starting the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.Ok">
            <summary>
            Signal if the Start was OK
            </summary>
        </member>
        <member name="P:Fusion.StartGameResult.ShutdownReason">
            <summary>
            Start Game Shutdown Reason
            </summary>
        </member>
        <member name="M:Fusion.StartGameResult.ToString">
            <summary>
            StartGameResult to String
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusion.StartGameException">
            <summary>
            Describe an Exception that Occurred while starting the Fusion Simulation
            </summary>
        </member>
        <member name="P:Fusion.StartGameException.ShutdownReason">
            <summary>
            ShutdownReason that caused this exception
            </summary>
        </member>
        <member name="M:Fusion.StartGameException.ToString">
            <summary>
            StartGameException to String
            </summary>
        </member>
        <member name="M:Fusion.StartGameException.Convert(System.Exception)">
            <summary>
            Convert arbitrary Exceptions into a StartGameException to public use
            </summary>
            <param name="e">Exception to be converted</param>
            <returns>Reference to a StartGameException holding a ShutdownReason</returns>
        </member>
        <member name="T:Fusion.NetworkRunnerCallbackArgs">
            <summary>
            Stores data types used on the <see cref="T:Fusion.INetworkRunnerCallbacks"/> interface
            </summary>
        </member>
        <member name="T:Fusion.NetworkRunnerCallbackArgs.ConnectRequest">
            <summary>
            Data holder of a Connection Request from a remote client
            </summary>
        </member>
        <member name="P:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.RemoteAddress">
            <summary>
            Address of the remote client
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.Accept">
            <summary>
            Accepts the Request
            </summary>
        </member>
        <member name="M:Fusion.NetworkRunnerCallbackArgs.ConnectRequest.Refuse">
            <summary>
            Refuses the Request
            </summary>
        </member>
        <member name="T:Fusion.ShutdownReason">
            <summary>
            Describes a list of Reason why the Fusion Runner was Shutdown
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.Ok">
            <summary>
            OK Reason means Fusion was Shutdown by request
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.Error">
            <summary>
            Shutdown was caused by some internal error
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.IncompatibleConfiguration">
            <summary>
            Raised when the peer tries to Join a Room with a mismatching type between ClientServer Mode and Shared Mode.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ServerInRoom">
            <summary>
            Raised when the local peer started as a Server and tried to join a Room that already has a Server peer.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.DisconnectedByPluginLogic">
            <summary>
            Raised when the Peer is disconnected or kicked by a Plugin Logic.
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameClosed">
            <summary>
            Raised when the Game the Peer is trying to Join is Closed
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameNotFound">
            <summary>
            Raised when the Game the Peer is trying to Join does not exist
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.MaxCcuReached">
            <summary>
            Raised when all CCU available for the Photon Application are in use
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidRegion">
            <summary>
            Raised when the peer is trying to connect to an unavailable or non-existent Region
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameIdAlreadyExists">
            <summary>
            Raised when a Session with the same name was already created
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.GameIsFull">
            <summary>
            Raised when a peer is trying to join a Room with already the max capacity of players
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidAuthentication">
            <summary>
            Raised when the Authentication Values are invalid
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.CustomAuthenticationFailed">
            <summary>
            Raised when the Custom Authentication has failed for some other reason
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.AuthenticationTicketExpired">
            <summary>
            Raised when the Authentication Ticket has expired
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.PhotonCloudTimeout">
            <summary>
            Timeout on the Connection with the Photon Cloud
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.AlreadyRunning">
            <summary>
            Raised when Fusion is already running and the StartGame is invoked again
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.InvalidArguments">
            <summary>
            Raised when any of the StartGame arguments does not meet the requirements
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.HostMigration">
            <summary>
            Signal this Runner is shutting down because of a Host Migration is about to happen
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ConnectionTimeout">
            <summary>
            Connection with a remote server failed by timeout
            </summary>
        </member>
        <member name="F:Fusion.ShutdownReason.ConnectionRefused">
            <summary>
            Connection with a remote server failed because it was refused
            </summary>
        </member>
        <member name="T:Fusion.INetworkRunnerCallbacks">
            <summary>
            Interface for <see cref="T:Fusion.NetworkRunner"/> callbacks.
            Register a class/struct instance which implements this interface with <see cref="M:Fusion.NetworkRunner.AddCallbacks(Fusion.INetworkRunnerCallbacks[])"/>.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnPlayerJoined(Fusion.NetworkRunner,Fusion.PlayerRef)">
            <summary>
            Callback from a <see cref="T:Fusion.NetworkRunner"/> when a new player has joined.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnPlayerLeft(Fusion.NetworkRunner,Fusion.PlayerRef)">
            <summary>
            Callback from a <see cref="T:Fusion.NetworkRunner"/> when a player has disconnected.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnInput(Fusion.NetworkRunner,Fusion.NetworkInput)">
            <summary>
            Callback from <see cref="T:Fusion.NetworkRunner"/> that polls for user inputs.
            The <see cref="T:Fusion.NetworkInput"/> that is supplied expects:
            <code> 
            input.Set(new CustomINetworkInput() { /* your values */ });
            </code>
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnInputMissing(Fusion.NetworkRunner,Fusion.PlayerRef,Fusion.NetworkInput)">
            <summary>
            
            </summary>
            <param name="runner"></param>
            <param name="input"></param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnShutdown(Fusion.NetworkRunner,Fusion.ShutdownReason)">
            <summary>
            Called when the runner is shutdown
            </summary>
            <param name="runner">The runner being shutdown</param>
            <param name="shutdownReason">Describes the reason Fusion was Shutdown</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectedToServer(Fusion.NetworkRunner)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> successfully connects to a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer(Fusion.NetworkRunner)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> disconnects from a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectRequest(Fusion.NetworkRunner,Fusion.NetworkRunnerCallbackArgs.ConnectRequest,System.Byte[])">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> receives a Connection Request from a Remote Client
            </summary>
            <param name="runner">Local NetworkRunner</param>
            <param name="request">Request information</param>
            <param name="token">Request Token</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnConnectFailed(Fusion.NetworkRunner,Fusion.Sockets.NetAddress,Fusion.Sockets.NetConnectFailedReason)">
            <summary>
            Callback when <see cref="T:Fusion.NetworkRunner"/> fails to connect to a server or host.
            </summary>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage(Fusion.NetworkRunner,Fusion.SimulationMessagePtr)">
            <summary>
            This callback is invoked when a manually dispatched simulation message is received from a remote peer
            </summary>
            <param name="runner">The runner this message is for</param>
            <param name="message">The message pointer</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnSessionListUpdated(Fusion.NetworkRunner,System.Collections.Generic.List{Fusion.SessionInfo})">
            <summary>
            This callback is invoked when a new List of Sessions is received from Photon Cloud
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="sessionList">Updated list of Session</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse(Fusion.NetworkRunner,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Callback is invoked when the Authentication procedure returns a response from the Authentication Server
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="data">Custom Authentication Reply Values</param>
        </member>
        <member name="M:Fusion.INetworkRunnerCallbacks.OnHostMigration(Fusion.NetworkRunner,Fusion.HostMigrationToken)">
            <summary>
            Callback is invoked when the Host Migration process has started
            </summary>
            <param name="runner">The runner this object exists on</param>
            <param name="hostMigrationToken">Migration Token that stores all necessary information to restart the Fusion Runner</param>
        </member>
        <member name="T:Fusion.AccuracyDefaults">
            <summary>
            Class that contains global accuracy information. 
            Built-in named defaults can be edited, or custom named defaults can be created.
            These defaults allow you to change accuracy settings across an entire project.
            <para>These values can be changed in the <see cref="T:Fusion.NetworkProjectConfig"/>.</para>
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.UNCOMPRESSED">
            <summary>
            The named built-in default for Uncompressed. This cannot be changed and will always have a value of 0.
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.DEFAULT">
            <summary>
            The named built-in general default. 
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.POSITION">
            <summary>
            The named built-in default for Position. 
            This value is used by built-in components like <see cref="T:Fusion.NetworkTransform"/> and <see cref="T:Fusion.NetworkRigidbody"/>, 
            but may be used for your own components as well.
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.ROTATION">
            <summary>
            The named built-in default for Rotation. 
            This value is used by built-in components like <see cref="T:Fusion.NetworkTransform"/> and <see cref="T:Fusion.NetworkRigidbody"/>, 
            but may be used for your own components as well.
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.NORMALIZED_TIME">
            <summary>
            The named built-in default for NormalizedTime. 
            This value is used by built-in components like <see cref="T:Fusion.NetworkMecanimAnimator"/>, 
            but may be used for your own components as well.
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.DEFAULT_ACCURACY">
            <summary>
            The standard default fall back value for Accuracy.
            </summary>
        </member>
        <member name="F:Fusion.AccuracyDefaults.DEFAULT_UNCOMPRESSED_VALUE">
            <summary>
            The fixed value that represents uncompressed.
            </summary>
        </member>
        <member name="P:Fusion.AccuracyDefaults.ZeroHashRemap">
            <summary>
            Which hash should a hash value of zero (the struct default value) remap to.
            </summary>
        </member>
        <member name="P:Fusion.AccuracyDefaults.ZeroHashNameRemap">
            <summary>
            Which tag name should a zero hash (the struct default value) remap to.
            </summary>
        </member>
        <member name="P:Fusion.AccuracyDefaults.ZeroHashAccuracyRemap">
            <summary>
            Which accuracy value should a zero hash (the struct default value) remap to.
            </summary>
        </member>
        <member name="M:Fusion.AccuracyDefaults.TryGetAccuracy(System.Int32,Fusion.Accuracy@)">
            <summary>
            Attempts to get an accuracy from a hash value.
            </summary>
            <returns>Returns false if the hash is invalid (hash 0 is considered valid, and remaps to <see cref="P:Fusion.AccuracyDefaults.ZeroHashAccuracyRemap"/>)</returns>
        </member>
        <member name="T:Fusion.Simulation">
            <summary>
            Main simulation class
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsResimulation">
            <summary>
            Use inside of FixedUpdateNetwork to determine if the tick currently being simulated has previously been simulated locally.
            Resimulation occurs in client prediction when new states arrive from the StateAuthority. 
            Networked objects are set to the most current authority state tick, and simulations are repeated from that tick to the local current tick.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsLastTick">
            <summary>
            Use in conjunction with IsResimulation/IsForward inside of FixedUpdateNetwork to determine if the current tick being simulated 
            is the last tick of the resimulation or forward phase of the simulation loop.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsFirstTick">
            <summary>
            Use in conjunction with IsResimulation/IsForward inside of FixedUpdateNetwork to determine if the current tick being simulated 
            is the first tick of the resimulation or forward phase of the simulation loop.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsForward">
            <summary>
            Use inside of FixedUpdateNetwork to determine if the tick currently being simulated has NOT previously been simulated locally.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsLocalPlayerFirstExecution">
            <summary>
            True if the current stage of the simulation loop is Forward. False during resimulations.
            <para>
            'Resimulation' describes simulating a tick that has been previously been simulated.<br></br> 
            'Forward' describes simulating a tick that is being simulated for the first time locally.<br></br>
            'Prediction' describes simulating ticks higher than the most current known StateAuthority snapshot tick.
            </para>
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Tick">
            <summary>
            The tick associated with the current state of networked objects, or the current simulation tick being processed (when evaluated during FixedUpdateNetwork).
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Topology">
            <summary>
            Indicates if a Server/Client or Shared Mode (relay server) topology is being used.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Mode">
            <summary>
            Gets the <see cref="T:Fusion.SimulationModes"/> flags for The type of network peer this simulation represents.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Stage">
            <summary>
            Gets the current <see cref="T:Fusion.SimulationStages"/> value.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.Config">
            <summary>
            The <see cref="T:Fusion.SimulationConfig"/> file used by this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.ProjectConfig">
            <summary>
            The <see cref="T:Fusion.NetworkProjectConfig"/> file used by this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.DeltaTime">
            <summary>
            Gets the fixed tick time interval. Derived from the <see cref="F:Fusion.SimulationConfig.TickRate"/>.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsClient">
            <summary>
            If this peer is a client. True for client peers in Server/Client topologies, and true for all peers in Shared Mode.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsServer">
            <summary>
            If this peer is the server. True for the Server or Host peer in Server/Client topologies, and always false for all peers in Shared Mode (the relay is the server). 
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsPlayer">
            <summary>
            True for any peer that represents a human player. This is true for all peers except a dedicated server.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsSinglePlayer">
            <summary>
            Indicates that this simulation is operating in Single Player mode, which is a Host that accepts no connections.
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsMasterClient">
            <summary>
            Only valid in Shared Mode. Indicates if this peer is flagged as the MasterClient, which means it is default StateAuthority
            </summary>
        </member>
        <member name="P:Fusion.Simulation.ActivePlayers">
            <summary>
            List of Active players in the Simulation
            </summary>
        </member>
        <member name="P:Fusion.Simulation.IsRunning">
            <summary>
            Signal if the Simulation is currently running
            </summary>
        </member>
        <member name="P:Fusion.Simulation.LocalAddress">
            <summary>
            Bound Address of the internal socket
            </summary>
        </member>
        <member name="M:Fusion.Simulation.SetPlayerAlwaysInterested(Fusion.PlayerRef,Fusion.NetworkId,System.Boolean)">
            <summary>
            Add or remove specific player interest in a NetworkObject.
            <para>
            <see cref="F:Fusion.SimulationConfig.ReplicationMode"/> must be set to <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/>.
            </para>
            </summary>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerConnectionToken(Fusion.PlayerRef)">
            <summary>
            Return a copy if a Player's Connection Token
            </summary>
            <param name="player">Player to check for the Connection Token</param>
            <returns>Connection Token Copy</returns>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerAddress(Fusion.PlayerRef)">
            <summary>
            Return the Address of a remote Player
            </summary>
            <param name="player">Player to check for the NetAddress</param>
            <returns>NetAddress of a specific player</returns>
        </member>
        <member name="M:Fusion.Simulation.GetPlayerUniqueId(Fusion.PlayerRef)">
            <summary>
            Return the UniqueId as a long from a specific Player
            </summary>
            <param name="player">Player to check for the UniqueId</param>
            <returns>UniqueId of a specific Player</returns>
        </member>
        <member name="M:Fusion.Simulation.Update(System.Double)">
            <summary>
            Forwards the Simulation based on the Delta Time
            </summary>
            <param name="dt">Delta Time used to forward the simulation</param>
            <returns>How many Ticks executed on this Update</returns>
        </member>
        <member name="M:Fusion.Simulation.Server.Disconnect(Fusion.Sockets.NetAddress)">
            <summary>
            Disconnect a client based on it's NetAddress
            </summary>
            <param name="address">Client Adress to Disconnect</param>
        </member>
        <member name="T:Fusion.Simulation.Statistics.StatSourceTypes">
            <summary>
            Engine sources for <see cref="T:Fusion.IStatsBuffer"/> statistics.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.NetStats">
            <summary>
            <see cref="T:Fusion.IStatsBuffer"/> telemetry available for the sockets layer.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.NetStatFlags">
            <summary>
            <see cref="T:Fusion.Simulation.Statistics.NetStats"/> as Flags.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.ObjStats">
            <summary>
            <see cref="T:Fusion.IStatsBuffer"/> telemetry available for a <see cref="T:Fusion.NetworkObject"/>.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.ObjStatFlags">
            <summary>
            <see cref="T:Fusion.Simulation.Statistics.ObjStats"/> as Flags.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.SimStats">
            <summary>
            <see cref="T:Fusion.IStatsBuffer"/> telemetry available for <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="T:Fusion.Simulation.Statistics.SimStatFlags">
            <summary>
            <see cref="T:Fusion.Simulation.Statistics.SimStats"/> as Flags.
            </summary>
        </member>
        <member name="M:Fusion.Simulation.Statistics.GetStatBuffer(Fusion.Simulation.Statistics.SimStats)">
            <summary>
            Returns the requested <see cref="T:Fusion.Simulation.Statistics.FloatStatsBuffer"/> associated with this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="M:Fusion.Simulation.Statistics.GetStatBuffer(Fusion.Simulation.Statistics.NetStats,Fusion.NetworkRunner)">
            <summary>
            Returns the requested <see cref="T:Fusion.IStatsBuffer"/> associated with this <see cref="T:Fusion.Simulation"/>.
            </summary>
        </member>
        <member name="T:Fusion.RpcSendMessageResult">
            <summary>
            Result flags for the RPC message send operation.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentToServerForForwarding">
            <summary>
            Client sent to the server, server will send to the target client.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentToTargetClient">
            <summary>
            Server sent to a specific client (a targeted message).
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.SentBroadcast">
            <summary>
            Server attempted to send to all the clients and at least one succeeded.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetObjectNotConfirmed">
            <summary>
            Target object not confirmed on the client.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetObjectNotInPlayerInterest">
            <summary>
            Target object not in client's interest. Likely due to being outside of player's AOI region, or needs to be explicitly set as always interested.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentTargetClientNotAvailable">
            <summary>
            Target client not connected (a targeted message).
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentBroadcastNoActiveConnections">
            <summary>
            Server attempted to send to all the clients, but none was connected.
            </summary>
        </member>
        <member name="F:Fusion.RpcSendMessageResult.NotSentBroadcastNoConfirmedNorInterestedClients">
            <summary>
            Server attempted to send to all the clients, but the target object is not confirmed/not in Object Interest for all target clients.
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig">
            <summary>
            Project configuration settings specific to how the Simulation class behaves.
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig.Topologies">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.Topologies.ClientServer">
            <summary>
            Classic server and client model
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.Topologies.Shared">
            <summary>
            Relay based shared world model
            </summary>
        </member>
        <member name="T:Fusion.SimulationConfig.StateReplicationModes">
            <summary>
            Enumerates the types of state replication available.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.StateReplicationModes.DeltaSnapshots">
            <summary>
            Server Authoritative, Delta Snapshots send the complete world state from every network tick. This produces the highest accuracy simulation replication,
            but may not be suitable for higher object and player counts.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency">
            <summary>
            Server Authoritative, Eventual Consistency allows for partial/culled state transmission, which may be necessary for implementing Area of Interest,
            high networked object counts, or high player counts.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.InputDataWordCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.TickRate">
            <summary>
            The update rate of the simulation in Hz (ticks per second).
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.MaxPrediction">
            <summary>
            The max amount of predicted ticks on a client in server or host mode, if this is overstepped on client a hard reset will be done on client to bring it down to correct prediction .
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.DefaultPlayers">
            <summary>
            The default number of players allowed to join a game instance. Can also be changed in code when starting Fusion.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ReplicationMode">
            <summary>
            Determines which <see cref="T:Fusion.SimulationConfig.StateReplicationModes"/> mode will be used.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.Topology">
            <summary>
            The topology used
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.HostMigration">
            <summary>
            If, in host mode, we should allow host migration if the current host leaves.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ObjectInterest">
            <summary>
            Selects if Object Interest should be used when running in <see cref="F:Fusion.SimulationConfig.StateReplicationModes.EventualConsistency"/> mode.
            When enabled, clients will only receive updates for objects which they have interest in. 
            How interest is determined for each <see cref="T:Fusion.NetworkObject"/> is based on its <see cref="F:Fusion.NetworkObject.ObjectInterest"/> mode setting.
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.InputTotalWordCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.ServerTickMultiplier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.DeltaTime">
            <summary>
            Returns the inverse of TickRate. The time (in seconds) between simulation ticks.
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.ServerDeltaTime">
            <summary>
            Returns (<see cref="P:Fusion.SimulationConfig.DeltaTime"/> * <see cref="P:Fusion.SimulationConfig.ServerTickMultiplier"/>).
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ServerPacketInterval">
            <summary>
            This value times <see cref="F:Fusion.SimulationConfig.TickRate">TickRate</see> determines the network send rate for the server.
            A value of 1 instructs the server to send state updates to clients every simulation tick. 
            Values greater than 1 will send a input/state updates every N ticks.
            Higher values reduce data usage, in exchange for increased latency and reduced state sync accuracy.
            </summary>
        </member>
        <member name="F:Fusion.SimulationConfig.ClientPacketInterval">
            <summary>
            This value times <see cref="F:Fusion.SimulationConfig.TickRate">TickRate</see> determines the network send rate for clients.
            A value of 1 instructs clients to send input/state updates to the server every simulation tick. 
            Values greater than 1 will send an update every N ticks.
            Higher values reduce data usage, in exchange for increased latency and reduced state sync accuracy.
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.ServerPacketDeltaTime">
            <summary>
            Returns (<see cref="F:Fusion.SimulationConfig.ServerPacketInterval"/> * <see cref="P:Fusion.SimulationConfig.ServerDeltaTime"/>). This is the effective time interval (in seconds) between server tick updates to clients.
            </summary>
        </member>
        <member name="P:Fusion.SimulationConfig.ClientPacketDeltaTime">
            <summary>
            Returns (<see cref="F:Fusion.SimulationConfig.ClientPacketInterval"/> * <see cref="P:Fusion.SimulationConfig.DeltaTime"/>). This is the effective time interval (in seconds) between client input/state updates from the client.
            </summary>
        </member>
        <member name="M:Fusion.SimulationConfig.Init(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fusion.HeapConfiguration">
            <summary>
            Memory Heap Settings
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.PageShift">
            <summary>
            Default size of each Heap Page
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.PageCount">
            <summary>
            Default number of Heap Pages
            </summary>
        </member>
        <member name="F:Fusion.HeapConfiguration.GlobalsSize">
            <summary>
            Heap Global Size
            </summary>
        </member>
        <member name="M:Fusion.HeapConfiguration.Init(System.Int32)">
            <summary>
            Initializes and creates a new <see cref="T:Fusion.HeapConfiguration"/> based on the Global Size
            </summary>
        </member>
        <member name="M:Fusion.HeapConfiguration.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="F:Fusion.InterpolationConfiguration.DeltaAdjustment">
             <summary>
             How much the delta time is modulated up/down to adjust interpolation time
             when the client has ended up behind or ahead of the server. Common values
             are 1% to 3%, the lower the tick rate the higher this should be.
            
             Default value is 1%.
             </summary>
        </member>
        <member name="F:Fusion.InterpolationConfiguration.AllowedJitter">
             <summary>
             How much the actual interpolation time is allowed to drift up/down from the calculated optimal time
             before adjustments to the interpolation time is made. Defined in % of optimal interpolation time.
             For example with a 25% value and an optimal interpolation time of 0.1 seconds, the actual interpolation time
             is allowed to very between 0.75-0.125 before adjustments are made to it.
            
             Default value is 25%.
             </summary>
        </member>
        <member name="F:Fusion.InterpolationConfiguration.SnapLimit">
             <summary>
             How much actual interpolation time is allowed to drift up/down from calculated optimal time
             before the time calculations are reset and snapped to the optimal value.
             Defined in % of optimal time. Common values are 200% to 500%.
            
             Default value is 200%.  
             </summary>
        </member>
        <member name="F:Fusion.InterpolationConfiguration.MultiplierMin">
            <summary>
            The minimum multiplier that is used to compensate for jitter and uncertainty when calculating optimal interpolation offset.
            This multiplier is used to give some extra interpolation offset from the absolutely optimal time.  
            </summary>
        </member>
        <member name="F:Fusion.InterpolationConfiguration.MultiplierMax">
            <summary>
            Same as the Multiplier Min, just the max value instead.
            </summary>
        </member>
        <member name="T:Fusion.NetworkConfiguration">
            <summary>
            Main network configuration class.
            </summary>
        </member>
        <member name="T:Fusion.NetworkConfiguration.ReliableDataTransfers">
            <summary>
            Flag for allowed Reliable Data transfer modes.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransfers.ClientToServer">
            <summary>
            Allow Client to Server.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransfers.ClientToClientWithServerProxy">
            <summary>
            Allow Client to Client using Server as Proxy.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.SocketSendBufferSize">
            <summary>
            Size in Kilobytes of the underlying socket send buffer.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.SocketRecvBufferSize">
            <summary>
            Size in Kilobytes of the underlying socket receive buffer.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectAttempts">
            <summary>
            Max number of connection attempts that a Client will run when trying to connect to a remote Server.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectInterval">
            <summary>
            Interval in seconds between each connection attempt from a Client.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionDefaultRtt">
            <summary>
            Default assumed RTT in seconds for new connections (before actual RTT has been determined). The real RTT is calculated over time once the connection is established.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionTimeout">
            <summary>
            Max allowed time in seconds that the local peer can run without receiving any update from a remote peer.
            If a client does not receive any update from the server within this period, it will disconnect itself.
            If a server does not receive any update from a remote client within this period, it will disconnect that particular client.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionPingInterval">
            <summary>
            Interval in seconds between PING messages sent to a remote connection, in order to keep that connection alive.
            </summary>
            <remarks>Currently unused.</remarks>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ConnectionShutdownTime">
            <summary>
            Default delay between connection changes status to Shutdown (disconnected/invalid), and it actually being released (freeing all references to that particular connection).
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.MtuDefault">
            <summary>
            Max number of bytes that can be used by Fusion to fill up a UDP package.
            </summary>
        </member>
        <member name="F:Fusion.NetworkConfiguration.ReliableDataTransferModes">
            <summary>
            Current <see cref="F:Fusion.NetworkConfiguration.ReliableDataTransferModes"/> mode.
            </summary>
        </member>
        <member name="M:Fusion.NetworkConfiguration.Init">
            <summary>
            Initializes and creates a copy of this <see cref="T:Fusion.NetworkProjectConfig"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusion.NetworkConfiguration.ToNetConfig(Fusion.Sockets.NetAddress)">
            <summary>
            Convert this <see cref="T:Fusion.NetworkProjectConfig"/> into a <see cref="T:Fusion.Sockets.NetConfig"/> using the <see cref="T:Fusion.Sockets.NetAddress"/> as reference.
            </summary>
        </member>
        <member name="T:Fusion.NetworkSimulationConfiguration">
            <summary>
            Configuration for network conditions simulation (induced latency and loss).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.Enabled">
            <summary>
            If adverse network conditions are being simulated.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayShape">
            <summary>
            The pattern used to oscillate between <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMax"/> values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayMin">
            <summary>
            The lowest packet delay value returned from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayMax">
            <summary>
            The highest packet delay value returned from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayPeriod">
            <summary>
            The period of the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator (the rate at which delay oscillates in seconds).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.DelayThreshold">
            <summary>
            The <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillates between 0 and 1. Values below this threshold are reduced to zero, resulting in a value equal to <see cref="F:Fusion.NetworkSimulationConfiguration.DelayMin"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.AdditionalJitter">
            <summary>
            After the delay value from the <see cref="F:Fusion.NetworkSimulationConfiguration.DelayShape"/> oscillator is determined, random 0 to this value of additional seconds be added to the packet latency.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceShape">
            <summary>
            The pattern used to oscillate between <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMax"/> values.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceMin">
            <summary>
            The lowest loss chance value the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator will produce. 0 = 0% chance of being lost. 1 = 100% chance of being lost.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceMax">
            <summary>
            The highest loss chance value the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator will produce. 0 = 0% chance of being lost. 1 = 100% chance of being lost.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChanceThreshold">
            <summary>
            The <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> wave oscillates between 0 and 1. Values below this threshold are reduced to zero, resulting in a value equal to <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/>.
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.LossChancePeriod">
            <summary>
            The period of the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillator (the rate at which delay oscillates between <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMin"/> and <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceMax"/>).
            </summary>
        </member>
        <member name="F:Fusion.NetworkSimulationConfiguration.AdditionalLoss">
            <summary>
            After the <see cref="F:Fusion.NetworkSimulationConfiguration.LossChanceShape"/> oscillation loss chance is calculated, an additional random value of 0 to this (normalized) percentage of loss chance is added.
            </summary>
        </member>
        <member name="T:Fusion.SimulationGlobalState">
            <summary>
            Stores the global state of a simulation
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.WORDS">
            <summary>
            Total size of the Global State in 4 byte words
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.SIZE">
            <summary>
            Total size of the Global State
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.Scene">
            <summary>
            Current Scene Ref
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.ServerMode">
            <summary>
            Current Simulation Mode
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.MaxPlayers">
            <summary>
            Current player count
            </summary>
        </member>
        <member name="F:Fusion.SimulationGlobalState.PlayersActive">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fusion.SimulationModes">
            <summary>
            Flags for The type of network peer a simulation represents.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Server">
            <summary>
            Simulation represents a server peer, with no local player.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Host">
            <summary>
            Simulation represents a server peer, with a local player.
            </summary>
        </member>
        <member name="F:Fusion.SimulationModes.Client">
            <summary>
            Simulation represents a client peer, with a local player.
            </summary>
        </member>
        <member name="T:Fusion.SimulationSnapshot">
            <summary>
            Represents a snapshot of the simulation state
            </summary>
        </member>
        <member name="P:Fusion.SimulationSnapshot.Tick">
            <summary>
            The absolute tick index this snapshot represents.
            </summary>
        </member>
        <member name="P:Fusion.SimulationSnapshot.Time">
            <summary>
            The time in seconds this <see cref="T:Fusion.SimulationSnapshot"/> represents.
            Time is relative to <see cref="P:Fusion.SimulationSnapshot.Tick"/> 0, with Tick 0 representing Time 0f.
            </summary>
        </member>
        <member name="M:Fusion.SimulationSnapshot.GetObjectHeaderPtrs">
            <summary>
            Build a set of maps of NetworkObject headers. The maps are:
            1. Simple mapping between the NetworkId and the NetworkObject Header
            2. Map between NetworkObject root and a list of nested NetworkObjects based on the NetworkId
            </summary>
        </member>
        <member name="T:Fusion.SimulationStages">
            <summary>
            Flags for which stage the simulation currently running. Forward is when a tick is being simulated for the first time.
            Resimulate is when a tick is being simulated again with corrections.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStages.Forward">
            <summary>
            Currently simulating a tick for the first time.
            </summary>
        </member>
        <member name="F:Fusion.SimulationStages.Resimulate">
            <summary>
            Currently simulating a previously simulated tick again, with state corrections.
            </summary>
        </member>
    </members>
</doc>
