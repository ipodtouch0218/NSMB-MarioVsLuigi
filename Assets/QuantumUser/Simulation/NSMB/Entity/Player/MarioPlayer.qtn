#define _1_18 1.18
#define _0_85 0.85
#define WeirdSlopeConstant -0.0304687 
#define _0_90 0.9
#define _0_1875 0.1875
#define _0_40 0.4
#define _0_35 0.35
#define _0_09 0.09
#define _0_66 0.66666
#define _0_075 0.075
#define _8_25 8.25
#define _3_75 3.75

input {
	button Up;
	button Down;
	button Left;
	button Right;
	button Jump;
	button Sprint;
	button PowerupAction;
	button FireballPowerupAction;
	button PropellerPowerupAction;

	// Buttons can be packed. And we want this to be packed.
	button AllowGroundpoundWithLeftRight;
}

enum JumpState : Byte {
    None,
    SingleJump,
    DoubleJump,
    TripleJump,
}

component MarioPlayer {
	AssetRef<MarioPlayerPhysicsInfo> PhysicsAsset;
	AssetRef<CharacterAsset> CharacterAsset;

	[ExcludeFromPrototype] PlayerRef PlayerRef;
	[ExcludeFromPrototype] byte SpawnpointIndex;

	[ExcludeFromPrototype] PowerupState CurrentPowerupState;
	[ExcludeFromPrototype] PowerupState PreviousPowerupState;
	[ExcludeFromPrototype] AssetRef<PowerupAsset> ReserveItem;
	[ExcludeFromPrototype] RNGSession RNG;

	[ExcludeFromPrototype] GamemodeSpecificData GamemodeData;
	[ExcludeFromPrototype] byte Coins;
	[ExcludeFromPrototype] byte Lives;

	[ExcludeFromPrototype] bool Disconnected;
	[ExcludeFromPrototype] bool IsDead;
	[ExcludeFromPrototype] bool FireDeath;
	[ExcludeFromPrototype] bool IsRespawning;
	[ExcludeFromPrototype] byte DeathAnimationFrames;
	[ExcludeFromPrototype] byte PreRespawnFrames;
	[ExcludeFromPrototype] byte RespawnFrames;
	[ExcludeFromPrototype] byte NoLivesStarDirection;

	// Walk/Running
    [ExcludeFromPrototype] bool FacingRight;
    [ExcludeFromPrototype] bool IsSkidding;
    [ExcludeFromPrototype] bool IsTurnaround;
    [ExcludeFromPrototype] byte FastTurnaroundFrames;
    [ExcludeFromPrototype] byte SlowTurnaroundFrames;
	[ExcludeFromPrototype] int LastPushingFrame;
	[ExcludeFromPrototype] byte StationaryFrames;

	// Jumping
	[ExcludeFromPrototype] JumpState JumpState;
	[ExcludeFromPrototype] JumpState PreviousJumpState;
    [ExcludeFromPrototype] byte JumpLandingFrames;
	[ExcludeFromPrototype] byte JumpBufferFrames;
	[ExcludeFromPrototype] byte CoyoteTimeFrames;
	[ExcludeFromPrototype] int LandedFrame;
	[ExcludeFromPrototype] bool DoEntityBounce;
	[ExcludeFromPrototype] byte ForceJumpTimer;
	[ExcludeFromPrototype] byte CantJumpTimer;

	// Wallslide
	[ExcludeFromPrototype] bool WallslideLeft;
	[ExcludeFromPrototype] bool WallslideRight;
	[ExcludeFromPrototype] byte WallslideEndFrames;
    [ExcludeFromPrototype] byte WalljumpFrames;

	// Groundpound
    [ExcludeFromPrototype] bool IsGroundpounding;
	[ExcludeFromPrototype] bool IsGroundpoundActive;
	[ExcludeFromPrototype] byte GroundpoundStartFrames;
	[ExcludeFromPrototype] byte GroundpoundCooldownFrames;
	[ExcludeFromPrototype] byte GroundpoundStandFrames;

	// Knockback
    [ExcludeFromPrototype] KnockbackStrength CurrentKnockback;
	[ExcludeFromPrototype] bool IsInWeakKnockback;
	[ExcludeFromPrototype] bool KnockForwards;
	[ExcludeFromPrototype] bool KnockbackWasOriginallyFacingRight;
	[ExcludeFromPrototype] int KnockbackTick;
	[ExcludeFromPrototype] byte DamageInvincibilityFrames;
	[ExcludeFromPrototype] byte KnockbackGetupFrames;
	[ExcludeFromPrototype] byte CrushDamageInvincibilityFrames;

	// Crouching
    [ExcludeFromPrototype] bool IsCrouching;
    [ExcludeFromPrototype] bool IsSliding;

	// Block Interactions
    [ExcludeFromPrototype] bool IsSpinnerFlying;
	[ExcludeFromPrototype] bool IsDrilling;
	[ExcludeFromPrototype] bool IsStuckInBlock;

	// Powerups
    [ExcludeFromPrototype] ushort InvincibilityFrames;
	
	[ExcludeFromPrototype] byte MegaMushroomStartFrames;
	[ExcludeFromPrototype] ushort MegaMushroomFrames;
	[ExcludeFromPrototype] byte MegaMushroomEndFrames;
	[ExcludeFromPrototype] bool MegaMushroomStationaryEnd;
	[ExcludeFromPrototype] byte MegaMushroomFootstepFrames;

	[ExcludeFromPrototype] byte ProjectileDelayFrames;
	[ExcludeFromPrototype] byte ProjectileVolleyFrames;
	[ExcludeFromPrototype] byte CurrentProjectiles;
	[ExcludeFromPrototype] byte CurrentVolley;

    [ExcludeFromPrototype] bool IsInShell;
    [ExcludeFromPrototype] byte ShellSlowdownFrames;

    [ExcludeFromPrototype] bool IsPropellerFlying;
	[ExcludeFromPrototype] byte PropellerLaunchFrames;
	[ExcludeFromPrototype] byte PropellerSpinFrames;
	[ExcludeFromPrototype] bool UsedPropellerThisJump;
	[ExcludeFromPrototype] byte PropellerDrillCooldown;
	[ExcludeFromPrototype] byte PropellerDrillHoldFrames;

    [ExcludeFromPrototype] EntityRef HeldEntity;
	[ExcludeFromPrototype] int HoldStartFrame;

    [ExcludeFromPrototype] EntityRef CurrentPipe;
	[ExcludeFromPrototype] FPVector2 PipeDirection;
	[ExcludeFromPrototype] bool PipeEntering;
	[ExcludeFromPrototype] byte PipeFrames;
	[ExcludeFromPrototype] byte PipeCooldownFrames;

	[ExcludeFromPrototype] EntityRef CurrentSpinner;
}

struct StarChasersData {
	byte Stars;
}

struct CoinRunnersData {
	int ObjectiveCoins;
}

union GamemodeSpecificData {
	StarChasersData StarChasers;
	CoinRunnersData CoinRunners;
}

enum KnockbackStrength : Byte {
	None,
	FireballBump,
	CollisionBump,
	Normal,
	Groundpound,
}

signal OnMarioPlayerDied(EntityRef entity);
signal OnMarioPlayerBecameInvincible(EntityRef entity);
signal OnMarioPlayerDropObjective(EntityRef entity, int amount, EntityRef attacker);
signal OnMarioPlayerTakeDamage(EntityRef entity, ref bool keepDamage);
signal OnMarioPlayerGroundpoundedSolid(EntityRef mario, PhysicsContact contact, ref bool continueGroundpound);
signal OnMarioPlayerGroundpoundEnded(EntityRef mario);
signal OnMarioPlayerMegaMushroomFootstep();

event MarioPlayerJumped {
	EntityRef Entity;
	nothashed PowerupState PowerupState;
	nothashed JumpState JumpState;
	nothashed bool WasBounce;
	nothashed bool IsUnderwater;
}

event MarioPlayerGroundpoundStarted {
	EntityRef Entity;
}

event MarioPlayerGroundpounded {
	EntityRef Entity;
	nothashed PowerupState PowerupState;
}

event MarioPlayerCrouched {
	EntityRef Entity;
	nothashed PowerupState PowerupState;
}

synced event MarioPlayerCollectedPowerup {
	EntityRef Entity;
	nothashed PowerupReserveResult Result;
	nothashed PowerupAsset Scriptable;
}

event MarioPlayerUsedReserveItem {
	EntityRef Entity;
	nothashed bool Success;
}

event MarioPlayerWalljumped {
	EntityRef Entity;
	nothashed FPVector2 Position;
	nothashed bool WasOnRightWall;
	nothashed FPVector2 HitboxExtents;
}

event MarioPlayerShotProjectile {
	EntityRef Entity;
	nothashed Projectile Projectile;
}

event MarioPlayerUsedPropeller {
	EntityRef Entity;
}

event MarioPlayerPropellerSpin {
	EntityRef Entity;
}

synced event MarioPlayerDied {
	EntityRef Entity;
	bool IsLava;
}

event MarioPlayerDeathUp {
	EntityRef Entity;
	bool FireDeath;
}

synced event MarioPlayerTookDamage {
	EntityRef Entity;
}

event MarioPlayerPreRespawned {
	EntityRef Entity;
	nothashed FPVector2 Spawnpoint;
}

event MarioPlayerRespawned {
	EntityRef Entity;
}

event MarioPlayerPickedUpObject {
	EntityRef Entity;
	EntityRef OtherEntity;
	bool HoldAboveHead;
}

event MarioPlayerThrewObject {
	EntityRef Entity;
	EntityRef OtherEntity;
}

synced event MarioPlayerMegaStart {
	EntityRef Entity;
}

event MarioPlayerMegaEnd {
	EntityRef Entity;
	bool Cancelled;
	byte EndingFrames;
}

event MarioPlayerEnteredPipe {
	EntityRef Entity;
	EntityRef Pipe;
}

event MarioPlayerStoppedSliding {
	EntityRef Entity;
	bool IsStationary;
}

event MarioPlayerUsedSpinner {
	EntityRef Entity;
	EntityRef Spinner;
}

event MarioPlayerStompedByTeammate {
	EntityRef Entity;
}

synced event MarioPlayerDestroyed {
	EntityRef Entity;
}

event MarioPlayerLandedWithAnimation {
	EntityRef Entity;
}

event PlayKnockbackEffect {
	EntityRef Entity;
	EntityRef Attacker;
	KnockbackStrength Strength;
	nothashed FPVector2 AttackerPosition;
}
