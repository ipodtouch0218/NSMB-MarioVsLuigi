#pragma maxplayers 10
#define _1_18 1.18
#define _0_85 0.85
#define WeirdSlopeConstant -0.0304687 
#define _0_90 0.9
#define _0_1875 0.1875
#define _0_40 0.4
#define _0_35 0.35
#define _0_09 0.09
#define _0_66 0.66666
#define _0_075 0.075

input {
	button Up;
	button Down;
	button Left;
	button Right;
	button Jump;
	button Sprint;
	button PowerupAction;
	button FireballPowerupAction;
	button PropellerPowerupAction;
}

enum JumpState : Byte {
    None,
    SingleJump,
    DoubleJump,
    TripleJump,
}

enum PlayerAction : Byte {
    Idle,
    Walk,
	Skidding,
    Crouch,
	CrouchAir,
    Sliding,
	Bounce,
    SingleJump,
    DoubleJump,
    TripleJump,
	Freefall,
	HoldIdle,
	HoldWalk,
	HoldJump,
	HoldFall,
	WallSlide,
    Wallkick,
    GroundPound,
    SoftKnockback,
    NormalKnockback,
    HardKnockback,
	SpinBlockSpin,
    SpinBlockDrill,
    BlueShellCrouch,
	BlueShellCrouchAir,
    BlueShellSliding,
    BlueShellJump,
    PropellerSpin,
    PropellerDrill,
	MegaMushroom,
	PowerupShoot,
	Pushing,
	Death,
	LavaDeath,
	Respawning,
	EnteringPipe,
}

enum ActionFlags : Int32 {
    Intangible = 1,				// makes Mario intangible if added
    BreaksBlocks = 2,			// allows Mario to break blocks
    IsShelled = 4,				// Blue Shell action
    Attacking = 8,				// hurts enemies
    NoPlayerBounce = 16,		// disable bounce off players
    NoEnemyBounce = 32,			// disable bounce off enemies
    AirAction = 64,				// if the action is in the air
    WaterAction = 128,			// if the action is in the water
    AllowBump = 256,			// allows bumping into other players
    StrongAction = 512,			// makes the special particles spawn when killing enemies
	AllowHold = 1024,			// allows Mario to pick up items
	Cutscene = 2048,			// cutscene-like properties
	CameraChange = 4096,		// changes the way the camera moves (i.e Propeller Spin)
	DisableTurnaround = 8192,	// disables turn around by left and right
	DisablePushing = 16384,		// disables pushing
	UsesSmallHitbox = 32768,	// use the small hitbox even if Mario's big
	UsesCrouchHitbox = 65536,	// use the crouch hitbox
	KillMiniStomp = 131072,		// kills Mini players if above
	StarSpinAction = 262144,	// makes Mario do the star sommersault
	IrregularVelocity = 524288, // velocity isn't controlled by the regular left and right inputs
	Holding = 1048576,			// Mario is holding something in the action
	OverrideAll = 2097152,		// skip every method only letting the HandleActions method run
}

component MarioPlayer {
    asset_ref<MarioPlayerPhysicsInfo> PhysicsAsset;
	asset_ref<CharacterAsset> CharacterAsset;
	[ExcludeFromPrototype] PlayerRef PlayerRef;
	[ExcludeFromPrototype] byte SpawnpointIndex;

	[ExcludeFromPrototype] PowerupState CurrentPowerupState;
	[ExcludeFromPrototype] PowerupState PreviousPowerupState;
	[ExcludeFromPrototype] asset_ref<PowerupAsset> ReserveItem;

	[ExcludeFromPrototype] byte Stars;
	[ExcludeFromPrototype] byte Coins;
	[ExcludeFromPrototype] byte Lives;

	[ExcludeFromPrototype] bool Disconnected;

	// Actions
	[ExcludeFromPrototype] PlayerAction Action;
	[ExcludeFromPrototype] PlayerAction PrevAction;
	[ExcludeFromPrototype] Input PreActionInput;
	[ExcludeFromPrototype] int ActionTimer;
	[ExcludeFromPrototype] int ActionState;
	[ExcludeFromPrototype] int ActionArg;
	[ExcludeFromPrototype] int CurrActionFlags;
	[ExcludeFromPrototype] EntityRef ActionObject;

	// Stomping
	[ExcludeFromPrototype] PlayerAction StompAction;
	[ExcludeFromPrototype] int StarStealCount;

	// Walk/Running
    [ExcludeFromPrototype] bool FacingRight;
    [ExcludeFromPrototype] bool IsTurnaround;
    [ExcludeFromPrototype] byte FastTurnaroundFrames;
    [ExcludeFromPrototype] byte SlowTurnaroundFrames;
	[ExcludeFromPrototype] int LastPushingFrame;
	[ExcludeFromPrototype] byte StationaryFrames;

	// Jumping
	[ExcludeFromPrototype] JumpState JumpState;
	[ExcludeFromPrototype] JumpState PreviousJumpState;
    [ExcludeFromPrototype] byte JumpLandingFrames;
	[ExcludeFromPrototype] byte JumpBufferFrames;
	[ExcludeFromPrototype] byte CoyoteTimeFrames;
	[ExcludeFromPrototype] int LandedFrame;

	// Wallslide
	[ExcludeFromPrototype] byte WallslideEndFrames;
    [ExcludeFromPrototype] byte WalljumpFrames;

	// Groundpound
	[ExcludeFromPrototype] byte GroundpoundStartFrames;
	[ExcludeFromPrototype] byte GroundpoundCooldownFrames;
	[ExcludeFromPrototype] byte GroundpoundStandFrames;

	// Swimming
	[ExcludeFromPrototype] byte SwimForceJumpTimer;

	// Knockback
	[ExcludeFromPrototype] bool KnockbackWasOriginallyFacingRight;
	[ExcludeFromPrototype] int KnockbackTick;
	[ExcludeFromPrototype] byte DamageInvincibilityFrames;
	[ExcludeFromPrototype] byte CrushDamageInvincibilityFrames;

	// Block Interactions
	[ExcludeFromPrototype] bool IsStuckInBlock;

	// Powerups
    [ExcludeFromPrototype] ushort InvincibilityFrames;
	
	[ExcludeFromPrototype] byte MegaMushroomStartFrames;
	[ExcludeFromPrototype] ushort MegaMushroomFrames;
	[ExcludeFromPrototype] byte MegaMushroomEndFrames;
	[ExcludeFromPrototype] bool MegaMushroomStationaryEnd;

	[ExcludeFromPrototype] byte ProjectileDelayFrames;
	[ExcludeFromPrototype] byte ProjectileVolleyFrames;
	[ExcludeFromPrototype] byte CurrentProjectiles;
	[ExcludeFromPrototype] byte CurrentVolley;

    [ExcludeFromPrototype] byte ShellSlowdownFrames;

	[ExcludeFromPrototype] byte PropellerSpinFrames;
	[ExcludeFromPrototype] bool UsedPropellerThisJump;
	[ExcludeFromPrototype] byte PropellerDrillCooldown;
	[ExcludeFromPrototype] byte PropellerDrillHoldFrames;

    [ExcludeFromPrototype] entity_ref HeldEntity;
	[ExcludeFromPrototype] int HoldStartFrame;

    [ExcludeFromPrototype] entity_ref CurrentPipe;
	[ExcludeFromPrototype] FPVector2 PipeDirection;
	[ExcludeFromPrototype] bool PipeEntering;
	[ExcludeFromPrototype] byte PipeFrames;
	[ExcludeFromPrototype] byte PipeCooldownFrames;

	[ExcludeFromPrototype] entity_ref CurrentSpinner;
}

signal OnMarioPlayerDied(EntityRef entity);
signal OnMarioPlayerBecameInvincible(EntityRef entity);

event MarioPlayerJumped {
	nothashed Frame Frame;
	entity_ref Entity;
	nothashed PlayerAction JumpState;
	nothashed bool WasBounce;
}

event MarioPlayerGroundpoundStarted {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerGroundpounded {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerCrouched {
	nothashed Frame Frame;
	entity_ref Entity;
}

synced event MarioPlayerCollectedPowerup {
	nothashed Frame Frame;
	entity_ref Entity;
	nothashed PowerupReserveResult Result;
	nothashed PowerupAsset Scriptable;
}

event MarioPlayerUsedReserveItem {
	nothashed Frame Frame;
	entity_ref Entity;
	nothashed bool Success;
}

event MarioPlayerWalljumped {
	nothashed Frame Frame;
	entity_ref Entity;
	nothashed FPVector2 Position;
	nothashed bool WasOnRightWall;
}

event MarioPlayerShotProjectile {
	nothashed Frame Frame;
	entity_ref Entity;
	nothashed Projectile Projectile;
}

event MarioPlayerUsedPropeller {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerPropellerSpin {
	nothashed Frame Frame;
	entity_ref Entity;
}

synced event MarioPlayerDied {
	Frame Frame;
	entity_ref Entity;
	bool IsLava;
}

event MarioPlayerDeathUp {
	nothashed Frame Frame;
	EntityRef Entity;
}

synced event MarioPlayerTookDamage {
	Frame Frame;
	entity_ref Entity;
}

event MarioPlayerPreRespawned {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerRespawned {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerPickedUpObject {
	nothashed Frame Frame;
	entity_ref Entity;
	entity_ref OtherEntity;
}

event MarioPlayerThrewObject {
	nothashed Frame Frame;
	entity_ref Entity;
	entity_ref OtherEntity;
}

synced event MarioPlayerMegaStart {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerMegaEnd {
	nothashed Frame Frame;
	entity_ref Entity;
	bool Cancelled;
}

event MarioPlayerReceivedKnockback {
	nothashed Frame Frame;
	entity_ref Entity;
	entity_ref Attacker;
	PlayerAction Action;
}

event MarioPlayerEnteredPipe {
	nothashed Frame Frame;
	entity_ref Entity;
	entity_ref Pipe;
}

event MarioPlayerStoppedSliding {
	nothashed Frame Frame;
	entity_ref Entity;
	bool IsStationary;
}

event MarioPlayerUsedSpinner {
	nothashed Frame Frame;
	entity_ref Entity;
	entity_ref Spinner;
}

event MarioPlayerStompedByTeammate {
	nothashed Frame Frame;
	entity_ref Entity;
}

synced event MarioPlayerDestroyed {
	nothashed Frame Frame;
	entity_ref Entity;
}

event MarioPlayerLandedWithAnimation {
	nothashed Frame Frame;
	entity_ref Entity;
}